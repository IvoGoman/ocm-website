var suggestions=document.getElementById("suggestions"),search=document.getElementById("search");search!==null&&document.addEventListener("keydown",inputFocus);function inputFocus(e){e.ctrlKey&&e.key==="/"&&(e.preventDefault(),search.focus()),e.key==="Escape"&&(search.blur(),suggestions.classList.add("d-none"))}document.addEventListener("click",function(e){var t=suggestions.contains(e.target);t||suggestions.classList.add("d-none")}),document.addEventListener("keydown",suggestionFocus);function suggestionFocus(e){const s=suggestions.classList.contains("d-none");if(s)return;const t=[...suggestions.querySelectorAll("a")];if(t.length===0)return;const n=t.indexOf(document.activeElement);if(e.key==="ArrowUp"){e.preventDefault();const s=n>0?n-1:0;t[s].focus()}else if(e.key==="ArrowDown"){e.preventDefault();const s=n+1<t.length?n+1:n;t[s].focus()}}(function(){var e=new FlexSearch.Document({tokenize:"forward",cache:100,document:{id:"id",store:["href","title","description"],index:["title","description","content"]}});e.add({id:0,href:"/docs/core-concepts/",title:"Core Concepts",description:"",content:""}),e.add({id:1,href:"/docs/installation/",title:"Installation",description:"",content:""}),e.add({id:2,href:"/docs/getting-started/",title:"Getting Started",description:"",content:""}),e.add({id:3,href:"/docs/contributing/",title:"Contributing",description:"",content:""}),e.add({id:4,href:"/docs/guides/",title:"Guides",description:"",content:""}),e.add({id:5,href:"/docs/cli-reference/",title:"CLI Reference",description:"OCM CLI reference",content:""}),e.add({id:6,href:"/docs/help/",title:"Help",description:"Help Doks.",content:""}),e.add({id:7,href:"/docs/help/how-to-update/",title:"How to Update",description:"Regularly update the installed npm packages to keep your Doks website stable, usable, and secure.",content:` ðŸ’¡ Learn more about semantic versioning and advanced range syntax. Check for outdated packages # The npm outdated command will check the registry to see if any (or, specific) installed packages are currently outdated:
npm outdated [[\u0026lt;@scope\u0026gt;/]\u0026lt;pkg\u0026gt; ...] Update packages # The npm update command will update all the packages listed to the latest version (specified by the tag config), respecting semver:
npm update [\u0026lt;pkg\u0026gt;...] `}),e.add({id:8,href:"/docs/help/troubleshooting/",title:"Troubleshooting",description:"Solutions to common problems.",content:`Problems updating npm packages # Delete the ./node_modules folder, and run again:
npm install Problems with cache # Delete the temporary directories:
npm run clean `}),e.add({id:9,href:"/docs/help/faq/",title:"FAQ",description:"Answers to frequently asked questions.",content:`Hyas? # Doks is a Hyas theme build by the creator of Hyas.
Footer notice? # Please keep it in place.
Keyboard shortcuts for search? # focus: Ctrl + / select: â†“ and â†‘ open: Enter close: Esc Other documentation? # Netlify Hugo Can I get support? # Create a topic:
Netlify Community Hugo Forums Doks Discussions Contact the creator? # Send h-enk a message:
Netlify Community Hugo Forums Doks Discussions `}),e.add({id:10,href:"/docs/cli-reference/ocm/",title:"ocm",description:`ocm â€” Open Component Model Command Line Client # Synopsis # ocm [\u0026lt;options\u0026gt;] \u0026lt;sub command\u0026gt; ... Options # -X, --attribute stringArray attribute setting --config string configuration file -C, --cred stringArray credential setting -h, --help help for ocm Description # The Open Component Model command line client support the work with OCM artefacts, like Component Archives, Common Transport Archive,
Component Repositories, and component versions.
Additionally it provides some limited support for the docker daemon, OCI artefacts and registries.`,content:`ocm â€” Open Component Model Command Line Client # Synopsis # ocm [\u0026lt;options\u0026gt;] \u0026lt;sub command\u0026gt; ... Options # -X, --attribute stringArray attribute setting --config string configuration file -C, --cred stringArray credential setting -h, --help help for ocm Description # The Open Component Model command line client support the work with OCM artefacts, like Component Archives, Common Transport Archive,
Component Repositories, and component versions.
Additionally it provides some limited support for the docker daemon, OCI artefacts and registries.
It can be used in two ways:
verb/operation first: here the sub commands follow the pattern \u0026lt;verb\u0026gt; \u0026lt;object kind\u0026gt; \u0026lt;arguments\u0026gt; area/kind first: here the area and/or object kind is given first followed by the operation according to the pattern [\u0026lt;area\u0026gt;] \u0026lt;object kind\u0026gt; \u0026lt;verb/operation\u0026gt; \u0026lt;arguments\u0026gt; The command accepts some top level options, they can only be given before the sub commands.
With the option \u0026ndash;cred it is possible to specify arbitrary credentials for various environments on the command line. Nevertheless it is always preferrable to use the cli config file. Every credential setting is related to a dedicated consumer and provides a set of credential attributes. All this can be specified by a sequence of \u0026ndash;cred options.
Every option value has the format
--cred [:]\u0026lt;attr\u003e=\u0026lt;value\u003e Consumer identity attributes are prefixed with the colon (:). A credential settings always start with a sequence of at least one identity attributes, followed by a sequence of credential attributes. If a credential attribute is followed by an identity attribute a new credential setting is started.
The first credential setting may omit identity attributes. In this case it is used as default credential, always used if no dedicated match is found.
For example:
--cred :type=ociRegistry --cred hostname=ghcr.io --cred usename=mandelsoft --cred password=xyz With the option -X it is possible to pass global settings of the form
-X \u0026lt;attribute\u003e=\u0026lt;value\u003e The value can be a simple type or a json string for complex values. The following attributes are supported:
github.com/mandelsoft/oci/cache [cache]: string Filesystem folder to use for caching OCI blobs github.com/mandelsoft/ocm/compat [compat]: bool Compatibility mode: Avoid generic local access methods and prefer type specific ones. github.com/mandelsoft/ocm/keeplocalblob [keeplocalblob]: bool Keep local blobs when importing OCI artefacts to OCI registries from localBlob access methods. By default they will be expanded to OCI artefacts with the access method ociRegistry. If this option is set to true, they will be stored as local blobs, also. The access method will still be localBlob but with a nested ociRegistry access method for describing the global access. github.com/mandelsoft/ocm/signing: bool Public and private Key settings. { "publicKeys"": [ "\u0026lt;provider\u003e": { "data": ""\u0026lt;base64\u003e" } ], "privateKeys"": [ "\u0026lt;provider\u003e": { "path": ""\u0026lt;file path\u003e" } ] SEE ALSO # Sub Commands # ocm add	- Add resources or sources to a component archive ocm cache	- Cache related commands ocm clean	- Cleanup/re-organize elements ocm componentarchive	- Commands acting on component archives ocm componentversions	- Commands acting on components ocm create	- Create transport or component archive ocm describe	- Describe artefacts ocm download	- Download oci artefacts, resources or complete components ocm get	- Get information about artefacts and components ocm oci	- Dedicated command flavors for the OCI layer ocm ocm	- Dedicated command flavors for the Open Component Model ocm references	- Commands related to component references in component versions ocm resources	- Commands acting on component resources ocm show	- Show tags or versions ocm sign	- Sign components ocm sources	- Commands acting on component sources ocm transfer	- Transfer artefacts or components ocm verify	- Verify component version signatures ocm version	- displays the version Additional Help Topics # ocm configfile	- configuration file ocm oci-references	- notation for OCI references ocm ocm-references	- notation for OCM references `}),e.add({id:11,href:"/docs/cli-reference/ocm_add/",title:"ocm_add",description:"ocm add â€” Add Resources Or Sources To A Component Archive # Synopsis # ocm add [\u0026lt;options\u0026gt;] \u0026lt;sub command\u0026gt; ... Options # -h, --help help for add SEE ALSO # Parents # ocm	- Open Component Model command line client Sub Commands # ocm add references	- add aggregation information to a component version ocm add resources	- add resources to a component version ocm add sources	- add source information to a component version ",content:"ocm add â€” Add Resources Or Sources To A Component Archive # Synopsis # ocm add [\u0026lt;options\u0026gt;] \u0026lt;sub command\u0026gt; ... Options # -h, --help help for add SEE ALSO # Parents # ocm	- Open Component Model command line client Sub Commands # ocm add references	- add aggregation information to a component version ocm add resources	- add resources to a component version ocm add sources	- add source information to a component version "}),e.add({id:12,href:"/docs/cli-reference/ocm_add_references/",title:"ocm_add_references",description:"ocm add references â€” Add Aggregation Information To A Component Version # Synopsis # ocm add references [\u0026lt;options\u0026gt;] \u0026lt;target\u0026gt; {\u0026lt;resourcefile\u0026gt; | \u0026lt;var\u0026gt;=\u0026lt;value\u0026gt;} Options # --addenv access environment for templating -h, --help help for references -s, --settings stringArray settings file with variable settings (yaml) --templater string templater to use (subst, spiff, go) (default \u0026quot;subst\u0026quot;) Description # Add aggregation information specified in a resource file to a component version. So far only component archives are supported as target.",content:`ocm add references â€” Add Aggregation Information To A Component Version # Synopsis # ocm add references [\u0026lt;options\u0026gt;] \u0026lt;target\u0026gt; {\u0026lt;resourcefile\u0026gt; | \u0026lt;var\u0026gt;=\u0026lt;value\u0026gt;} Options # --addenv access environment for templating -h, --help help for references -s, --settings stringArray settings file with variable settings (yaml) --templater string templater to use (subst, spiff, go) (default \u0026quot;subst\u0026quot;) Description # Add aggregation information specified in a resource file to a component version. So far only component archives are supported as target.
Templating: All yaml/json defined resources can be templated. Variables are specified as regular arguments following the syntax \u0026lt;name\u0026gt;=\u0026lt;value\u0026gt;. Additionally settings can be specified by a yaml file using the \u0026ndash;settings option. With the option \u0026ndash;addenv environment variables are added to the binding. Values are overwritten in the order environment, settings file, commmand line settings.
Note: Variable names are case-sensitive.
Example:
-- MY_VAL=test There are several templaters that can be selected by the \u0026ndash;templater option:
envsubst: simple value substitution with the drone/envsubst templater. It supports string values, only. Complext settings will be json encoded.
key: subkey: "abc \${MY_VAL}" go: go templating supports complex values.
key: subkey: "abc {{.MY_VAL}}" spiff: spiff templating supports complex values. the settings are accessible using the binding values.
key: subkey: "abc (( values.MY_VAL ))" This command accepts reference specification files describing the references to add to a component version.
The resource specification supports the following blob input types, specified with the field type in the input field:
Input type dir
The path must denote a directory relative to the resources file, which is packed with tar and optionally compressed if the compress field is set to true. If the field preserveDir is set to true the directory itself is added to the tar. If the field followSymLinks is set to true, symbolic links are not packed but their targets files or folders. With the list fields includeFiles and excludeFiles it is possible to specify which files should be included or excluded. The values are regular expression used to match relative file paths. If no inlcudes are specified all file not explicitly excluded are used.
This blob type specification supports the following fields:
path string
This REQUIRED property describes the file path to directory relative to the resource file location.
mediaType string
This OPTIONAL property describes the media type to store with the local blob. The default media type is application/x-tar and application/gzip if compression is enabled.
compress bool
This OPTIONAL property describes whether the file content should be stored compressed or not.
preserveDir bool
This OPTIONAL property describes whether the specified directory with its basename should be included as top level folder.
followSymlinks bool
This OPTIONAL property describes whether symbolic links should be followed or included as links.
excludeFiles list of regex
This OPTIONAL property describes regular expressions used to match files that should NOT be included in the tar file. It takes precedence over the include match.
includeFiles list of regex
This OPTIONAL property describes regular expressions used to match files that should be included in the tar file. If this option is not given all files not explicitly excluded are used.
Input type docker
The path must denote an image tag that can be found in the local docker daemon. The denoted image is packed an OCI artefact set.
This blob type specification supports the following fields:
path string
This REQUIRED property describes the image name to import from the local docker daemon.
Input type file
The path must denote a file relative the the resources file. The content is compressed if the compress field is set to true.
This blob type specification supports the following fields:
path string
This REQUIRED property describes the file path to the helm chart relative to the resource file location.
mediaType string
This OPTIONAL property describes the media type to store with the local blob. The default media type is application/octet-stream and application/gzip if compression is enabled.
compress bool
This OPTIONAL property describes whether the file content should be stored compressed or not.
Input type helm
The path must denote an helm chart archive or directory relative to the resources file. The denoted chart is packed as an OCI artefact set. Additional provider info is taken from a file with the same name and the suffix .prov.
If the chart should just be stored as archive, please use the type file or dir.
This blob type specification supports the following fields:
path string
This REQUIRED property describes the file path to the helm chart relative to the resource file location.
version string
This OPTIONAL property can be set to configure an explicit version hint. If not specified the versio from the chart will be used. Basically, it is a good practice to use the component version for local resources This can be achieved by using templating for this attribute in the resource file.
SEE ALSO # Parents # ocm add	- Add resources or sources to a component archive ocm	- Open Component Model command line client `}),e.add({id:13,href:"/docs/cli-reference/ocm_add_resources/",title:"ocm_add_resources",description:"ocm add resources â€” Add Resources To A Component Version # Synopsis # ocm add resources [\u0026lt;options\u0026gt;] \u0026lt;target\u0026gt; {\u0026lt;resourcefile\u0026gt; | \u0026lt;var\u0026gt;=\u0026lt;value\u0026gt;} Options # --addenv access environment for templating -h, --help help for resources -s, --settings stringArray settings file with variable settings (yaml) --templater string templater to use (subst, spiff, go) (default \u0026quot;subst\u0026quot;) Description # Add resources specified in a resource file to a component version. So far only component archives are supported as target.",content:`ocm add resources â€” Add Resources To A Component Version # Synopsis # ocm add resources [\u0026lt;options\u0026gt;] \u0026lt;target\u0026gt; {\u0026lt;resourcefile\u0026gt; | \u0026lt;var\u0026gt;=\u0026lt;value\u0026gt;} Options # --addenv access environment for templating -h, --help help for resources -s, --settings stringArray settings file with variable settings (yaml) --templater string templater to use (subst, spiff, go) (default \u0026quot;subst\u0026quot;) Description # Add resources specified in a resource file to a component version. So far only component archives are supported as target.
Templating: All yaml/json defined resources can be templated. Variables are specified as regular arguments following the syntax \u0026lt;name\u0026gt;=\u0026lt;value\u0026gt;. Additionally settings can be specified by a yaml file using the \u0026ndash;settings option. With the option \u0026ndash;addenv environment variables are added to the binding. Values are overwritten in the order environment, settings file, commmand line settings.
Note: Variable names are case-sensitive.
Example:
-- MY_VAL=test There are several templaters that can be selected by the \u0026ndash;templater option:
envsubst: simple value substitution with the drone/envsubst templater. It supports string values, only. Complext settings will be json encoded.
key: subkey: "abc \${MY_VAL}" go: go templating supports complex values.
key: subkey: "abc {{.MY_VAL}}" spiff: spiff templating supports complex values. the settings are accessible using the binding values.
key: subkey: "abc (( values.MY_VAL ))" This command accepts resource specification files describing the resources to add to a component version.
The resource specification supports the following blob input types, specified with the field type in the input field:
Input type dir
The path must denote a directory relative to the resources file, which is packed with tar and optionally compressed if the compress field is set to true. If the field preserveDir is set to true the directory itself is added to the tar. If the field followSymLinks is set to true, symbolic links are not packed but their targets files or folders. With the list fields includeFiles and excludeFiles it is possible to specify which files should be included or excluded. The values are regular expression used to match relative file paths. If no inlcudes are specified all file not explicitly excluded are used.
This blob type specification supports the following fields:
path string
This REQUIRED property describes the file path to directory relative to the resource file location.
mediaType string
This OPTIONAL property describes the media type to store with the local blob. The default media type is application/x-tar and application/gzip if compression is enabled.
compress bool
This OPTIONAL property describes whether the file content should be stored compressed or not.
preserveDir bool
This OPTIONAL property describes whether the specified directory with its basename should be included as top level folder.
followSymlinks bool
This OPTIONAL property describes whether symbolic links should be followed or included as links.
excludeFiles list of regex
This OPTIONAL property describes regular expressions used to match files that should NOT be included in the tar file. It takes precedence over the include match.
includeFiles list of regex
This OPTIONAL property describes regular expressions used to match files that should be included in the tar file. If this option is not given all files not explicitly excluded are used.
Input type docker
The path must denote an image tag that can be found in the local docker daemon. The denoted image is packed an OCI artefact set.
This blob type specification supports the following fields:
path string
This REQUIRED property describes the image name to import from the local docker daemon.
Input type file
The path must denote a file relative the the resources file. The content is compressed if the compress field is set to true.
This blob type specification supports the following fields:
path string
This REQUIRED property describes the file path to the helm chart relative to the resource file location.
mediaType string
This OPTIONAL property describes the media type to store with the local blob. The default media type is application/octet-stream and application/gzip if compression is enabled.
compress bool
This OPTIONAL property describes whether the file content should be stored compressed or not.
Input type helm
The path must denote an helm chart archive or directory relative to the resources file. The denoted chart is packed as an OCI artefact set. Additional provider info is taken from a file with the same name and the suffix .prov.
If the chart should just be stored as archive, please use the type file or dir.
This blob type specification supports the following fields:
path string
This REQUIRED property describes the file path to the helm chart relative to the resource file location.
version string
This OPTIONAL property can be set to configure an explicit version hint. If not specified the versio from the chart will be used. Basically, it is a good practice to use the component version for local resources This can be achieved by using templating for this attribute in the resource file.
SEE ALSO # Parents # ocm add	- Add resources or sources to a component archive ocm	- Open Component Model command line client `}),e.add({id:14,href:"/docs/cli-reference/ocm_add_sources/",title:"ocm_add_sources",description:"ocm add sources â€” Add Source Information To A Component Version # Synopsis # ocm add sources [\u0026lt;options\u0026gt;] \u0026lt;target\u0026gt; {\u0026lt;resourcefile\u0026gt; | \u0026lt;var\u0026gt;=\u0026lt;value\u0026gt;} Options # --addenv access environment for templating -h, --help help for sources -s, --settings stringArray settings file with variable settings (yaml) --templater string templater to use (subst, spiff, go) (default \u0026quot;subst\u0026quot;) Description # Add source information specified in a resource file to a component version. So far only component archives are supported as target.",content:`ocm add sources â€” Add Source Information To A Component Version # Synopsis # ocm add sources [\u0026lt;options\u0026gt;] \u0026lt;target\u0026gt; {\u0026lt;resourcefile\u0026gt; | \u0026lt;var\u0026gt;=\u0026lt;value\u0026gt;} Options # --addenv access environment for templating -h, --help help for sources -s, --settings stringArray settings file with variable settings (yaml) --templater string templater to use (subst, spiff, go) (default \u0026quot;subst\u0026quot;) Description # Add source information specified in a resource file to a component version. So far only component archives are supported as target.
Templating: All yaml/json defined resources can be templated. Variables are specified as regular arguments following the syntax \u0026lt;name\u0026gt;=\u0026lt;value\u0026gt;. Additionally settings can be specified by a yaml file using the \u0026ndash;settings option. With the option \u0026ndash;addenv environment variables are added to the binding. Values are overwritten in the order environment, settings file, commmand line settings.
Note: Variable names are case-sensitive.
Example:
-- MY_VAL=test There are several templaters that can be selected by the \u0026ndash;templater option:
envsubst: simple value substitution with the drone/envsubst templater. It supports string values, only. Complext settings will be json encoded.
key: subkey: "abc \${MY_VAL}" go: go templating supports complex values.
key: subkey: "abc {{.MY_VAL}}" spiff: spiff templating supports complex values. the settings are accessible using the binding values.
key: subkey: "abc (( values.MY_VAL ))" This command accepts (re)source specification files describing the sources to add to a component version.
The resource specification supports the following blob input types, specified with the field type in the input field:
Input type dir
The path must denote a directory relative to the resources file, which is packed with tar and optionally compressed if the compress field is set to true. If the field preserveDir is set to true the directory itself is added to the tar. If the field followSymLinks is set to true, symbolic links are not packed but their targets files or folders. With the list fields includeFiles and excludeFiles it is possible to specify which files should be included or excluded. The values are regular expression used to match relative file paths. If no inlcudes are specified all file not explicitly excluded are used.
This blob type specification supports the following fields:
path string
This REQUIRED property describes the file path to directory relative to the resource file location.
mediaType string
This OPTIONAL property describes the media type to store with the local blob. The default media type is application/x-tar and application/gzip if compression is enabled.
compress bool
This OPTIONAL property describes whether the file content should be stored compressed or not.
preserveDir bool
This OPTIONAL property describes whether the specified directory with its basename should be included as top level folder.
followSymlinks bool
This OPTIONAL property describes whether symbolic links should be followed or included as links.
excludeFiles list of regex
This OPTIONAL property describes regular expressions used to match files that should NOT be included in the tar file. It takes precedence over the include match.
includeFiles list of regex
This OPTIONAL property describes regular expressions used to match files that should be included in the tar file. If this option is not given all files not explicitly excluded are used.
Input type docker
The path must denote an image tag that can be found in the local docker daemon. The denoted image is packed an OCI artefact set.
This blob type specification supports the following fields:
path string
This REQUIRED property describes the image name to import from the local docker daemon.
Input type file
The path must denote a file relative the the resources file. The content is compressed if the compress field is set to true.
This blob type specification supports the following fields:
path string
This REQUIRED property describes the file path to the helm chart relative to the resource file location.
mediaType string
This OPTIONAL property describes the media type to store with the local blob. The default media type is application/octet-stream and application/gzip if compression is enabled.
compress bool
This OPTIONAL property describes whether the file content should be stored compressed or not.
Input type helm
The path must denote an helm chart archive or directory relative to the resources file. The denoted chart is packed as an OCI artefact set. Additional provider info is taken from a file with the same name and the suffix .prov.
If the chart should just be stored as archive, please use the type file or dir.
This blob type specification supports the following fields:
path string
This REQUIRED property describes the file path to the helm chart relative to the resource file location.
version string
This OPTIONAL property can be set to configure an explicit version hint. If not specified the versio from the chart will be used. Basically, it is a good practice to use the component version for local resources This can be achieved by using templating for this attribute in the resource file.
SEE ALSO # Parents # ocm add	- Add resources or sources to a component archive ocm	- Open Component Model command line client `}),e.add({id:15,href:"/docs/cli-reference/ocm_cache/",title:"ocm_cache",description:"ocm cache â€” Cache Related Commands # Synopsis # ocm cache [\u0026lt;options\u0026gt;] \u0026lt;sub command\u0026gt; ... Options # -h, --help help for cache SEE ALSO # Parents # ocm	- Open Component Model command line client Sub Commands # ocm cache clean	- cleanup oci blob cache ocm cache info	- show OCI blob cache information ",content:"ocm cache â€” Cache Related Commands # Synopsis # ocm cache [\u0026lt;options\u0026gt;] \u0026lt;sub command\u0026gt; ... Options # -h, --help help for cache SEE ALSO # Parents # ocm	- Open Component Model command line client Sub Commands # ocm cache clean	- cleanup oci blob cache ocm cache info	- show OCI blob cache information "}),e.add({id:16,href:"/docs/cli-reference/ocm_cache_clean/",title:"ocm_cache_clean",description:"ocm cache clean â€” Cleanup Oci Blob Cache # Synopsis # ocm cache clean [\u0026lt;options\u0026gt;] Options # -h, --help help for clean Description # Cleanup all blobs stored in oci blob cache (if given).\nExamples # $ ocm clean cache SEE ALSO # Parents # ocm cache	- Cache related commands ocm	- Open Component Model command line client ",content:"ocm cache clean â€” Cleanup Oci Blob Cache # Synopsis # ocm cache clean [\u0026lt;options\u0026gt;] Options # -h, --help help for clean Description # Cleanup all blobs stored in oci blob cache (if given).\nExamples # $ ocm clean cache SEE ALSO # Parents # ocm cache	- Cache related commands ocm	- Open Component Model command line client "}),e.add({id:17,href:"/docs/cli-reference/ocm_cache_info/",title:"ocm_cache_info",description:"ocm cache info â€” Show OCI Blob Cache Information # Synopsis # ocm cache info [\u0026lt;options\u0026gt;] Options # -h, --help help for info Description # Show details about the OCI blob cache (if given).\nExamples # $ ocm cache info SEE ALSO # Parents # ocm cache	- Cache related commands ocm	- Open Component Model command line client ",content:"ocm cache info â€” Show OCI Blob Cache Information # Synopsis # ocm cache info [\u0026lt;options\u0026gt;] Options # -h, --help help for info Description # Show details about the OCI blob cache (if given).\nExamples # $ ocm cache info SEE ALSO # Parents # ocm cache	- Cache related commands ocm	- Open Component Model command line client "}),e.add({id:18,href:"/docs/cli-reference/ocm_clean/",title:"ocm_clean",description:"ocm clean â€” Cleanup/Re-Organize Elements # Synopsis # ocm clean [\u0026lt;options\u0026gt;] \u0026lt;sub command\u0026gt; ... Options # -h, --help help for clean SEE ALSO # Parents # ocm	- Open Component Model command line client Sub Commands # ocm clean cache	- cleanup oci blob cache ",content:"ocm clean â€” Cleanup/Re-Organize Elements # Synopsis # ocm clean [\u0026lt;options\u0026gt;] \u0026lt;sub command\u0026gt; ... Options # -h, --help help for clean SEE ALSO # Parents # ocm	- Open Component Model command line client Sub Commands # ocm clean cache	- cleanup oci blob cache "}),e.add({id:19,href:"/docs/cli-reference/ocm_clean_cache/",title:"ocm_clean_cache",description:"ocm clean cache â€” Cleanup Oci Blob Cache # Synopsis # ocm clean cache [\u0026lt;options\u0026gt;] Options # -h, --help help for cache Description # Cleanup all blobs stored in oci blob cache (if given).\nExamples # $ ocm clean cache SEE ALSO # Parents # ocm clean	- Cleanup/re-organize elements ocm	- Open Component Model command line client ",content:"ocm clean cache â€” Cleanup Oci Blob Cache # Synopsis # ocm clean cache [\u0026lt;options\u0026gt;] Options # -h, --help help for cache Description # Cleanup all blobs stored in oci blob cache (if given).\nExamples # $ ocm clean cache SEE ALSO # Parents # ocm clean	- Cleanup/re-organize elements ocm	- Open Component Model command line client "}),e.add({id:20,href:"/docs/cli-reference/ocm_componentarchive/",title:"ocm_componentarchive",description:"ocm componentarchive â€” Commands Acting On Component Archives # Synopsis # ocm componentarchive [\u0026lt;options\u0026gt;] \u0026lt;sub command\u0026gt; ... Options # -h, --help help for componentarchive SEE ALSO # Parents # ocm	- Open Component Model command line client Sub Commands # ocm componentarchive create	- create new component archive ocm componentarchive transfer	- transfer component archive to some component repository ",content:"ocm componentarchive â€” Commands Acting On Component Archives # Synopsis # ocm componentarchive [\u0026lt;options\u0026gt;] \u0026lt;sub command\u0026gt; ... Options # -h, --help help for componentarchive SEE ALSO # Parents # ocm	- Open Component Model command line client Sub Commands # ocm componentarchive create	- create new component archive ocm componentarchive transfer	- transfer component archive to some component repository "}),e.add({id:21,href:"/docs/cli-reference/ocm_componentarchive_create/",title:"ocm_componentarchive_create",description:"ocm componentarchive create â€” Create New Component Archive # Synopsis # ocm componentarchive create [\u0026lt;options\u0026gt;] \u0026lt;component\u0026gt; \u0026lt;version\u0026gt; \u0026lt;provider\u0026gt; \u0026lt;path\u0026gt; {--provider \u0026lt;label\u0026gt;=\u0026lt;value\u0026gt;} {\u0026lt;label\u0026gt;=\u0026lt;value\u0026gt;} Options # -f, --force remove existing content -h, --help help for create -p, --provider stringArray provider attribute -S, --scheme string schema version (default \u0026quot;v2\u0026quot;) -t, --type string archive format (default \u0026quot;directory\u0026quot;) Description # Create a new component archive. This might be either a directory prepared to host component version content or a tar/tgz file.",content:`ocm componentarchive create â€” Create New Component Archive # Synopsis # ocm componentarchive create [\u0026lt;options\u0026gt;] \u0026lt;component\u0026gt; \u0026lt;version\u0026gt; \u0026lt;provider\u0026gt; \u0026lt;path\u0026gt; {--provider \u0026lt;label\u0026gt;=\u0026lt;value\u0026gt;} {\u0026lt;label\u0026gt;=\u0026lt;value\u0026gt;} Options # -f, --force remove existing content -h, --help help for create -p, --provider stringArray provider attribute -S, --scheme string schema version (default \u0026quot;v2\u0026quot;) -t, --type string archive format (default \u0026quot;directory\u0026quot;) Description # Create a new component archive. This might be either a directory prepared to host component version content or a tar/tgz file.
The \u0026ndash;type option accepts a file format for the target archive to use. The following formats are supported:
directory tar tgz The default format is directory. It the option \u0026ndash;scheme is given, the given component descriptor format is used/generated. The following schema versions are supported:
ocm.gardener.cloud/v3alpha1 v2 (default) SEE ALSO # Parents # ocm componentarchive	- Commands acting on component archives ocm	- Open Component Model command line client `}),e.add({id:22,href:"/docs/cli-reference/ocm_componentarchive_transfer/",title:"ocm_componentarchive_transfer",description:"ocm componentarchive transfer â€” Transfer Component Archive To Some Component Repository # Synopsis # ocm componentarchive transfer [\u0026lt;options\u0026gt;] \u0026lt;source\u0026gt; \u0026lt;target\u0026gt; Options # -h, --help help for transfer -t, --type string archive format (default \u0026quot;directory\u0026quot;) Description # Transfer a component archive to some component repository. This might be a CTF Archive or a regular repository. If the type CTF is specified the target must already exist, if CTF flavor is specified it will be created if it does not exist.",content:`ocm componentarchive transfer â€” Transfer Component Archive To Some Component Repository # Synopsis # ocm componentarchive transfer [\u0026lt;options\u0026gt;] \u0026lt;source\u0026gt; \u0026lt;target\u0026gt; Options # -h, --help help for transfer -t, --type string archive format (default \u0026quot;directory\u0026quot;) Description # Transfer a component archive to some component repository. This might be a CTF Archive or a regular repository. If the type CTF is specified the target must already exist, if CTF flavor is specified it will be created if it does not exist.
Besides those explicitly known types a complete repository spec might be configured, either via inline argument or command configuration file and name.
The \u0026ndash;type option accepts a file format for the target archive to use. The following formats are supported:
directory tar tgz The default format is directory. SEE ALSO # Parents # ocm componentarchive	- Commands acting on component archives ocm	- Open Component Model command line client `}),e.add({id:23,href:"/docs/cli-reference/ocm_componentversions/",title:"ocm_componentversions",description:"ocm componentversions â€” Commands Acting On Components # Synopsis # ocm componentversions [\u0026lt;options\u0026gt;] \u0026lt;sub command\u0026gt; ... Options # -h, --help help for componentversions SEE ALSO # Parents # ocm	- Open Component Model command line client Sub Commands # ocm componentversions download	- download ocm component versions ocm componentversions get	- get component version ocm componentversions sign	- Sign component version ocm componentversions verify	- Verify signature of component version ",content:"ocm componentversions â€” Commands Acting On Components # Synopsis # ocm componentversions [\u0026lt;options\u0026gt;] \u0026lt;sub command\u0026gt; ... Options # -h, --help help for componentversions SEE ALSO # Parents # ocm	- Open Component Model command line client Sub Commands # ocm componentversions download	- download ocm component versions ocm componentversions get	- get component version ocm componentversions sign	- Sign component version ocm componentversions verify	- Verify signature of component version "}),e.add({id:24,href:"/docs/cli-reference/ocm_componentversions_download/",title:"ocm_componentversions_download",description:`ocm componentversions download â€” Download Ocm Component Versions # Synopsis # ocm componentversions download [\u0026lt;options\u0026gt;] {\u0026lt;components\u0026gt;} Options # -h, --help help for download -O, --outfile string output file or directory -r, --repo string repository name or spec -t, --type string archive format (default \u0026quot;directory\u0026quot;) Description # Download component versions from an OCM repository. The result is stored in component archives.
The files are named according to the component version name.`,content:`ocm componentversions download â€” Download Ocm Component Versions # Synopsis # ocm componentversions download [\u0026lt;options\u0026gt;] {\u0026lt;components\u0026gt;} Options # -h, --help help for download -O, --outfile string output file or directory -r, --repo string repository name or spec -t, --type string archive format (default \u0026quot;directory\u0026quot;) Description # Download component versions from an OCM repository. The result is stored in component archives.
The files are named according to the component version name.
If the \u0026ndash;repo option is specified, the given names are interpreted relative to the specified repository using the syntax
\u0026lt;component\u003e[:\u0026lt;version\u003e] If no \u0026ndash;repo option is specified the given names are interpreted as located OCM component version references:
[\u0026lt;repo type\u003e::]\u0026lt;host\u003e[:\u0026lt;port\u003e][/\u0026lt;base path\u003e]//\u0026lt;component\u003e[:\u0026lt;version\u003e] Additionally there is a variant to denote common transport archives and general repository specifications
[\u0026lt;repo type\u003e::]\u0026lt;filepath\u003e|\u0026lt;spec json\u003e[//\u0026lt;component\u003e[:\u0026lt;version\u003e]] The \u0026ndash;repo option takes an OCM repository specification:
[\u0026lt;repo type\u003e::]\u0026lt;configured name\u003e|\u0026lt;file path\u003e|\u0026lt;spec json\u003e For the Common Transport Format the types directory, tar or tgz is possible.
Using the JSON variant any repository type supported by the linked library can be used:
Dedicated OCM repository types:
ComponentArchive OCI Repository types (using standard component repository to OCI mapping):
ArtefactSet CommonTransportFormat DockerDaemon Empty OCIRegistry oci ociRegistry The \u0026ndash;type option accepts a file format for the target archive to use. The following formats are supported:
directory tar tgz The default format is directory. SEE ALSO # Parents # ocm componentversions	- Commands acting on components ocm	- Open Component Model command line client `}),e.add({id:25,href:"/docs/cli-reference/ocm_componentversions_get/",title:"ocm_componentversions_get",description:"ocm componentversions get â€” Get Component Version # Synopsis # ocm componentversions get [\u0026lt;options\u0026gt;] {\u0026lt;component-reference\u0026gt;} Options # -c, --closure follow component reference nesting -h, --help help for get -o, --output string output mode (JSON, json, tree, wide, yaml) -r, --repo string repository name or spec -S, --scheme string schema version -s, --sort stringArray sort fields Description # Get lists all component versions specified, if only a component is specified all versions are listed.",content:`ocm componentversions get â€” Get Component Version # Synopsis # ocm componentversions get [\u0026lt;options\u0026gt;] {\u0026lt;component-reference\u0026gt;} Options # -c, --closure follow component reference nesting -h, --help help for get -o, --output string output mode (JSON, json, tree, wide, yaml) -r, --repo string repository name or spec -S, --scheme string schema version -s, --sort stringArray sort fields Description # Get lists all component versions specified, if only a component is specified all versions are listed.
If the \u0026ndash;repo option is specified, the given names are interpreted relative to the specified repository using the syntax
\u0026lt;component\u003e[:\u0026lt;version\u003e] If no \u0026ndash;repo option is specified the given names are interpreted as located OCM component version references:
[\u0026lt;repo type\u003e::]\u0026lt;host\u003e[:\u0026lt;port\u003e][/\u0026lt;base path\u003e]//\u0026lt;component\u003e[:\u0026lt;version\u003e] Additionally there is a variant to denote common transport archives and general repository specifications
[\u0026lt;repo type\u003e::]\u0026lt;filepath\u003e|\u0026lt;spec json\u003e[//\u0026lt;component\u003e[:\u0026lt;version\u003e]] The \u0026ndash;repo option takes an OCM repository specification:
[\u0026lt;repo type\u003e::]\u0026lt;configured name\u003e|\u0026lt;file path\u003e|\u0026lt;spec json\u003e For the Common Transport Format the types directory, tar or tgz is possible.
Using the JSON variant any repository type supported by the linked library can be used:
Dedicated OCM repository types:
ComponentArchive OCI Repository types (using standard component repository to OCI mapping):
ArtefactSet CommonTransportFormat DockerDaemon Empty OCIRegistry oci ociRegistry With the option \u0026ndash;closure the complete reference tree of a component reference is traversed.
It the option \u0026ndash;scheme is given, the given component descriptor is converted to given format for output. The following schema versions are supported:
ocm.gardener.cloud/v3alpha1 v2 With the option \u0026ndash;output the output mode can be selected. The following modes are supported:
JSON json tree wide yaml Examples # \$ ocm get componentversion ghcr.io/mandelsoft/kubelink \$ ocm get componentversion --repo OCIRegistry:ghcr.io mandelsoft/kubelink SEE ALSO # Parents # ocm componentversions	- Commands acting on components ocm	- Open Component Model command line client `}),e.add({id:26,href:"/docs/cli-reference/ocm_componentversions_sign/",title:"ocm_componentversions_sign",description:"ocm componentversions sign â€” Sign Component Version # Synopsis # ocm componentversions sign [\u0026lt;options\u0026gt;] {\u0026lt;component-reference\u0026gt;} Options # -S, --algorithm string signature handler (default \u0026quot;RSASSA-PKCS1-V1_5\u0026quot;) --ca-cert stringArray Additional root certificates -H, --hash string hash algorithm (default \u0026quot;sha256\u0026quot;) -h, --help help for sign -I, --issuer string issuer name -N, --normalization string normalization algorithm (default \u0026quot;jsonNormalisation/v1\u0026quot;) -K, --private-key stringArray private key setting -k, --public-key stringArray public key setting -R, --recursive recursively sign component versions (default true) -r, --repo string repository name or spec -s, --signature stringArray signature name --update update digest in component versions (default true) -V, --verify verify existing digests (default true) Description # Sign specified component versions.",content:`ocm componentversions sign â€” Sign Component Version # Synopsis # ocm componentversions sign [\u0026lt;options\u0026gt;] {\u0026lt;component-reference\u0026gt;} Options # -S, --algorithm string signature handler (default \u0026quot;RSASSA-PKCS1-V1_5\u0026quot;) --ca-cert stringArray Additional root certificates -H, --hash string hash algorithm (default \u0026quot;sha256\u0026quot;) -h, --help help for sign -I, --issuer string issuer name -N, --normalization string normalization algorithm (default \u0026quot;jsonNormalisation/v1\u0026quot;) -K, --private-key stringArray private key setting -k, --public-key stringArray public key setting -R, --recursive recursively sign component versions (default true) -r, --repo string repository name or spec -s, --signature stringArray signature name --update update digest in component versions (default true) -V, --verify verify existing digests (default true) Description # Sign specified component versions.
If the \u0026ndash;repo option is specified, the given names are interpreted relative to the specified repository using the syntax
\u0026lt;component\u003e[:\u0026lt;version\u003e] If no \u0026ndash;repo option is specified the given names are interpreted as located OCM component version references:
[\u0026lt;repo type\u003e::]\u0026lt;host\u003e[:\u0026lt;port\u003e][/\u0026lt;base path\u003e]//\u0026lt;component\u003e[:\u0026lt;version\u003e] Additionally there is a variant to denote common transport archives and general repository specifications
[\u0026lt;repo type\u003e::]\u0026lt;filepath\u003e|\u0026lt;spec json\u003e[//\u0026lt;component\u003e[:\u0026lt;version\u003e]] The \u0026ndash;repo option takes an OCM repository specification:
[\u0026lt;repo type\u003e::]\u0026lt;configured name\u003e|\u0026lt;file path\u003e|\u0026lt;spec json\u003e For the Common Transport Format the types directory, tar or tgz is possible.
Using the JSON variant any repository type supported by the linked library can be used:
Dedicated OCM repository types:
ComponentArchive OCI Repository types (using standard component repository to OCI mapping):
ArtefactSet CommonTransportFormat DockerDaemon Empty OCIRegistry oci ociRegistry The \u0026ndash;public-key and \u0026ndash;private-key options can be used to define public and private keys on the command line. The options have an argument of the form [\u0026lt;name\u0026gt;=]\u0026lt;filepath\u0026gt;. The optional name specifies the signature name the key should be used for. By default this is the signature name specified with the option \u0026ndash;signature.
Alternatively a key can be specified as base64 encoded string if the argument start with the prefix ! or as direct string with the prefix =.
If in signing mode a public key is specified, existing signatures for the given signature name will be verified, instead of recreated.
The following signing types are supported with option \u0026ndash;algorithm:
RSASSA-PKCS1-V1_5 (default) rsa-signingsservice The following normalization modes are supported with option \u0026ndash;normalization:
jsonNormalisation/v1 (default) jsonNormalisation/v2 The following hash modes are supported with option \u0026ndash;hash:
NO-DIGEST sha256 (default) sha512 Examples # \$ ocm sign componentversion --signature mandelsoft --private-key=mandelsoft.key ghcr.io/mandelsoft/kubelink SEE ALSO # Parents # ocm componentversions	- Commands acting on components ocm	- Open Component Model command line client `}),e.add({id:27,href:"/docs/cli-reference/ocm_componentversions_verify/",title:"ocm_componentversions_verify",description:`ocm componentversions verify â€” Verify Signature Of Component Version # Synopsis # ocm componentversions verify [\u0026lt;options\u0026gt;] {\u0026lt;component-reference\u0026gt;} Options # --ca-cert stringArray Additional root certificates -h, --help help for verify -k, --public-key stringArray public key setting -r, --repo string repository name or spec -s, --signature stringArray signature name -V, --verify verify existing digests Description # Verify signature of specified component versions.
If the \u0026ndash;repo option is specified, the given names are interpreted relative to the specified repository using the syntax`,content:`ocm componentversions verify â€” Verify Signature Of Component Version # Synopsis # ocm componentversions verify [\u0026lt;options\u0026gt;] {\u0026lt;component-reference\u0026gt;} Options # --ca-cert stringArray Additional root certificates -h, --help help for verify -k, --public-key stringArray public key setting -r, --repo string repository name or spec -s, --signature stringArray signature name -V, --verify verify existing digests Description # Verify signature of specified component versions.
If the \u0026ndash;repo option is specified, the given names are interpreted relative to the specified repository using the syntax
\u0026lt;component\u003e[:\u0026lt;version\u003e] If no \u0026ndash;repo option is specified the given names are interpreted as located OCM component version references:
[\u0026lt;repo type\u003e::]\u0026lt;host\u003e[:\u0026lt;port\u003e][/\u0026lt;base path\u003e]//\u0026lt;component\u003e[:\u0026lt;version\u003e] Additionally there is a variant to denote common transport archives and general repository specifications
[\u0026lt;repo type\u003e::]\u0026lt;filepath\u003e|\u0026lt;spec json\u003e[//\u0026lt;component\u003e[:\u0026lt;version\u003e]] The \u0026ndash;repo option takes an OCM repository specification:
[\u0026lt;repo type\u003e::]\u0026lt;configured name\u003e|\u0026lt;file path\u003e|\u0026lt;spec json\u003e For the Common Transport Format the types directory, tar or tgz is possible.
Using the JSON variant any repository type supported by the linked library can be used:
Dedicated OCM repository types:
ComponentArchive OCI Repository types (using standard component repository to OCI mapping):
ArtefactSet CommonTransportFormat DockerDaemon Empty OCIRegistry oci ociRegistry The \u0026ndash;public-key and \u0026ndash;private-key options can be used to define public and private keys on the command line. The options have an argument of the form [\u0026lt;name\u0026gt;=]\u0026lt;filepath\u0026gt;. The optional name specifies the signature name the key should be used for. By default this is the signature name specified with the option \u0026ndash;signature.
Alternatively a key can be specified as base64 encoded string if the argument start with the prefix ! or as direct string with the prefix =.
Examples # \$ ocm verify componentversion --signature mandelsoft --public-key=mandelsoft.key ghcr.io/mandelsoft/kubelink SEE ALSO # Parents # ocm componentversions	- Commands acting on components ocm	- Open Component Model command line client `}),e.add({id:28,href:"/docs/cli-reference/ocm_configfile/",title:"ocm_configfile",description:"ocm configfile â€” Configuration File # Description # The command line client supports configuring by a given configuration file. If existent by default the file $HOME/.ocmconfig will be read. Using the option \u0026ndash;config an alternative file can be specified.\nThe file format is yaml. It uses the same type mechanism used for all kinds of typed specification in the ocm area. The file must have the type of a configuration specification.",content:`ocm configfile â€” Configuration File # Description # The command line client supports configuring by a given configuration file. If existent by default the file \`HOME/.ocmconfig will be read. Using the option \u0026ndash;config an alternative file can be specified.
The file format is yaml. It uses the same type mechanism used for all kinds of typed specification in the ocm area. The file must have the type of a configuration specification. Instead, the command line client supports a generic configuration specification able to host a list of arbitrary configuration specifications. The type for this spec is generic.config.ocm.gardener.cloud/v1.
The following configuration types are supported:
attributes.config.ocm.gardener.cloud
The config type attributes.config.ocm.gardener.cloud can be used to define a list of arbitrary attribute specifications:
type: attributes.config.ocm.gardener.cloud attributes: \u0026lt;name\u003e: \u0026lt;yaml defining the attribute\u003e ... credentials.config.ocm.gardener.cloud
The config type credentials.config.ocm.gardener.cloud can be used to define a list of arbitrary configuration specifications:
type: credentials.config.ocm.gardener.cloud consumers: - identity: \u0026lt;name\u003e: \u0026lt;value\u003e ... credentials: - \u0026lt;credential specification\u003e ... credential chain repositories: - repository: \u0026lt;repository specification\u003e credentials: - \u0026lt;credential specification\u003e ... credential chain aliases: \u0026lt;name\u003e: repository: \u0026lt;repository specification\u003e credentials: - \u0026lt;credential specification\u003e ... credential chain generic.config.ocm.gardener.cloud
The config type generic.config.ocm.gardener.cloud can be used to define a list of arbitrary configuration specifications:
type: generic.config.ocm.gardener.cloud configurations: - type: \u0026lt;any config type\u003e ... ... keys.config.ocm.gardener.cloud
The config type keys.config.ocm.gardener.cloud can be used to define public and private keys. A key value might be given by one of the fields:
path: path of file with key data data: base64 encoded binary data stringdata: data a string parsed by key handler type: keys.config.ocm.gardener.cloud privateKeys: \u0026lt;name\u003e: path: \u0026lt;file path\u003e ... publicKeys: \u0026lt;name\u003e: data: \u0026lt;base64 encoded key representation\u003e ... oci.config.ocm.gardener.cloud
The config type oci.config.ocm.gardener.cloud can be used to define OCI registry aliases:
type: oci.config.ocm.gardener.cloud aliases: \u0026lt;name\u003e: \u0026lt;OCI registry specification\u003e ... ocm.cmd.config.ocm.gardener.cloud
The config type ocm.cmd.config.ocm.gardener.cloud can be used to configure predefined aliases for dedicated OCM repositories and OCI registries.
type: ocm.cmd.config.ocm.gardener.cloud ocmRepositories: \u0026lt;name\u003e: \u0026lt;specification of OCM repository\u003e ... ociRepositories: \u0026lt;name\u003e: \u0026lt;specification of OCI registry\u003e ... scripts.ocm.config.ocm.gardener.cloud
The config type scripts.ocm.config.ocm.gardener.cloud can be used to define transfer scripts:
type: scripts.ocm.config.ocm.gardener.cloud scripts: \u0026lt;name\u003e: path: \u0026lt;\u003efile path\u003e \u0026lt;other name\u003e: script: \u0026lt;\u003enested script as yaml\u003e Examples # type: generic.config.ocm.gardener.cloud/v1 configurations: - type: credentials.config.ocm.gardener.cloud repositories: - repository: type: DockerConfig/v1 dockerConfigFile: \u0026quot;~/.docker/config.json\u0026quot; propagateConsumerIdentity: true - type: attributes.config.ocm.gardener.cloud attributes: # map of attribute settings compat: true # - type: scripts.ocm.config.ocm.gardener.cloud # scripts: # \u0026quot;default\u0026quot;: # script: # process: true SEE ALSO # Parents # ocm	- Open Component Model command line client `}),e.add({id:29,href:"/docs/cli-reference/ocm_create/",title:"ocm_create",description:"ocm create â€” Create Transport Or Component Archive # Synopsis # ocm create [\u0026lt;options\u0026gt;] \u0026lt;sub command\u0026gt; ... Options # -h, --help help for create SEE ALSO # Parents # ocm	- Open Component Model command line client Sub Commands # ocm create componentarchive	- create new component archive ocm create rsakeypair	- create RSA public key pair ocm create transportarchive	- create new OCI/OCM transport archive ",content:"ocm create â€” Create Transport Or Component Archive # Synopsis # ocm create [\u0026lt;options\u0026gt;] \u0026lt;sub command\u0026gt; ... Options # -h, --help help for create SEE ALSO # Parents # ocm	- Open Component Model command line client Sub Commands # ocm create componentarchive	- create new component archive ocm create rsakeypair	- create RSA public key pair ocm create transportarchive	- create new OCI/OCM transport archive "}),e.add({id:30,href:"/docs/cli-reference/ocm_create_componentarchive/",title:"ocm_create_componentarchive",description:"ocm create componentarchive â€” Create New Component Archive # Synopsis # ocm create componentarchive [\u0026lt;options\u0026gt;] \u0026lt;component\u0026gt; \u0026lt;version\u0026gt; \u0026lt;provider\u0026gt; \u0026lt;path\u0026gt; {--provider \u0026lt;label\u0026gt;=\u0026lt;value\u0026gt;} {\u0026lt;label\u0026gt;=\u0026lt;value\u0026gt;} Options # -f, --force remove existing content -h, --help help for componentarchive -p, --provider stringArray provider attribute -S, --scheme string schema version (default \u0026quot;v2\u0026quot;) -t, --type string archive format (default \u0026quot;directory\u0026quot;) Description # Create a new component archive. This might be either a directory prepared to host component version content or a tar/tgz file.",content:`ocm create componentarchive â€” Create New Component Archive # Synopsis # ocm create componentarchive [\u0026lt;options\u0026gt;] \u0026lt;component\u0026gt; \u0026lt;version\u0026gt; \u0026lt;provider\u0026gt; \u0026lt;path\u0026gt; {--provider \u0026lt;label\u0026gt;=\u0026lt;value\u0026gt;} {\u0026lt;label\u0026gt;=\u0026lt;value\u0026gt;} Options # -f, --force remove existing content -h, --help help for componentarchive -p, --provider stringArray provider attribute -S, --scheme string schema version (default \u0026quot;v2\u0026quot;) -t, --type string archive format (default \u0026quot;directory\u0026quot;) Description # Create a new component archive. This might be either a directory prepared to host component version content or a tar/tgz file.
The \u0026ndash;type option accepts a file format for the target archive to use. The following formats are supported:
directory tar tgz The default format is directory. It the option \u0026ndash;scheme is given, the given component descriptor format is used/generated. The following schema versions are supported:
ocm.gardener.cloud/v3alpha1 v2 (default) SEE ALSO # Parents # ocm create	- Create transport or component archive ocm	- Open Component Model command line client `}),e.add({id:31,href:"/docs/cli-reference/ocm_create_rsakeypair/",title:"ocm_create_rsakeypair",description:`ocm create rsakeypair â€” Create RSA Public Key Pair # Synopsis # ocm create rsakeypair [\u0026lt;private key file\u0026gt; [\u0026lt;public key file\u0026gt;]] {\u0026lt;subject-attribute\u0026gt;=\u0026lt;value\u0026gt;} Options # --cacert string certificate authority to sign public key --cakey string private key for certificate authority -h, --help help for rsakeypair --validity duration certificate validity (default 87600h0m0s) Description # Create an RSA public key pair and save to files.
The default for the filename to store the private key is rsa.`,content:`ocm create rsakeypair â€” Create RSA Public Key Pair # Synopsis # ocm create rsakeypair [\u0026lt;private key file\u0026gt; [\u0026lt;public key file\u0026gt;]] {\u0026lt;subject-attribute\u0026gt;=\u0026lt;value\u0026gt;} Options # --cacert string certificate authority to sign public key --cakey string private key for certificate authority -h, --help help for rsakeypair --validity duration certificate validity (default 87600h0m0s) Description # Create an RSA public key pair and save to files.
The default for the filename to store the private key is rsa.priv. If no public key file is specified, its name will be derived from the filename for the private key (suffix .pub for public key or .cert for certificate). If a certificate authority is given (\u0026ndash;cacert) the public key will be signed. In this case a subject (at least common name/issuer) and a private key (\u0026ndash;cakey) is required. If only a subject is given, the public key will be self-signed.
For signing the public key the following subject attributes are supported:
CN, common-name, issuer: Common Name/Issuer O, organization, org: Organization OU, organizational-unit, org-unit: Organizational Unit STREET (multiple): Street Address POSTALCODE, postal-code (multiple): Postal Code L, locality (multiple): Locality S, province, (multiple): Province C, country, (multiple): Country Examples # \$ ocm create rsakeypair mandelsoft.priv mandelsoft.cert issuer=mandelsoft SEE ALSO # Parents # ocm create	- Create transport or component archive ocm	- Open Component Model command line client `}),e.add({id:32,href:"/docs/cli-reference/ocm_create_transportarchive/",title:"ocm_create_transportarchive",description:`ocm create transportarchive â€” Create New OCI/OCM Transport Archive # Synopsis # ocm create transportarchive [\u0026lt;options\u0026gt;] \u0026lt;path\u0026gt; Options # -f, --force remove existing content -h, --help help for transportarchive -t, --type string archive format (default \u0026quot;directory\u0026quot;) Description # Create a new empty OCM/OCI transport archive. This might be either a directory prepared to host artefact content or a tar/tgz file.
SEE ALSO # Parents # ocm create	- Create transport or component archive ocm	- Open Component Model command line client `,content:`ocm create transportarchive â€” Create New OCI/OCM Transport Archive # Synopsis # ocm create transportarchive [\u0026lt;options\u0026gt;] \u0026lt;path\u0026gt; Options # -f, --force remove existing content -h, --help help for transportarchive -t, --type string archive format (default \u0026quot;directory\u0026quot;) Description # Create a new empty OCM/OCI transport archive. This might be either a directory prepared to host artefact content or a tar/tgz file.
SEE ALSO # Parents # ocm create	- Create transport or component archive ocm	- Open Component Model command line client `}),e.add({id:33,href:"/docs/cli-reference/ocm_describe/",title:"ocm_describe",description:"ocm describe â€” Describe Artefacts # Synopsis # ocm describe [\u0026lt;options\u0026gt;] \u0026lt;sub command\u0026gt; ... Options # -h, --help help for describe SEE ALSO # Parents # ocm	- Open Component Model command line client Sub Commands # ocm describe artefacts	- describe artefact version ",content:"ocm describe â€” Describe Artefacts # Synopsis # ocm describe [\u0026lt;options\u0026gt;] \u0026lt;sub command\u0026gt; ... Options # -h, --help help for describe SEE ALSO # Parents # ocm	- Open Component Model command line client Sub Commands # ocm describe artefacts	- describe artefact version "}),e.add({id:34,href:"/docs/cli-reference/ocm_describe_artefacts/",title:"ocm_describe_artefacts",description:`ocm describe artefacts â€” Describe Artefact Version # Synopsis # ocm describe artefacts [\u0026lt;options\u0026gt;] {\u0026lt;artefact-reference\u0026gt;} Options # -h, --help help for artefacts --layerfiles list layer files -o, --output string output mode (JSON, json, yaml) -r, --repo string repository name or spec Description # Describe lists all artefact versions specified, if only a repository is specified all tagged artefacts are listed. Per version a detailed, potentially recursive description is printed.
If the repository/registry option is specified, the given names are interpreted relative to the specified registry using the syntax`,content:`ocm describe artefacts â€” Describe Artefact Version # Synopsis # ocm describe artefacts [\u0026lt;options\u0026gt;] {\u0026lt;artefact-reference\u0026gt;} Options # -h, --help help for artefacts --layerfiles list layer files -o, --output string output mode (JSON, json, yaml) -r, --repo string repository name or spec Description # Describe lists all artefact versions specified, if only a repository is specified all tagged artefacts are listed. Per version a detailed, potentially recursive description is printed.
If the repository/registry option is specified, the given names are interpreted relative to the specified registry using the syntax
\u0026lt;OCI repository name\u003e[:\u0026lt;tag\u003e][@\u0026lt;digest\u003e] If no \u0026ndash;repo option is specified the given names are interpreted as extended CI artefact references.
[\u0026lt;repo type\u003e::]\u0026lt;host\u003e[:\u0026lt;port\u003e]/\u0026lt;OCI repository name\u003e[:\u0026lt;tag\u003e][@\u0026lt;digest\u003e] The \u0026ndash;repo option takes a repository/OCI registry specification:
[\u0026lt;repo type\u003e::]\u0026lt;configured name\u003e|\u0026lt;file path\u003e|\u0026lt;spec json\u003e For the Common Transport Format the types directory, tar or tgz are possible.
Using the JSON variant any repository type supported by the linked library can be used:
ArtefactSet CommonTransportFormat DockerDaemon Empty OCIRegistry oci ociRegistry With the option \u0026ndash;output the output mode can be selected. The following modes are supported:
JSON json yaml Examples # \$ ocm describe artefact ghcr.io/mandelsoft/kubelink \$ ocm describe artefact --repo OCIRegistry:ghcr.io mandelsoft/kubelink SEE ALSO # Parents # ocm describe	- Describe artefacts ocm	- Open Component Model command line client `}),e.add({id:35,href:"/docs/cli-reference/ocm_download/",title:"ocm_download",description:"ocm download â€” Download Oci Artefacts, Resources Or Complete Components # Synopsis # ocm download [\u0026lt;options\u0026gt;] \u0026lt;sub command\u0026gt; ... Options # -h, --help help for download SEE ALSO # Parents # ocm	- Open Component Model command line client Sub Commands # ocm download artefacts	- download oci artefacts ocm download componentversions	- download ocm component versions ocm download resources	- download resources of a component version ",content:"ocm download â€” Download Oci Artefacts, Resources Or Complete Components # Synopsis # ocm download [\u0026lt;options\u0026gt;] \u0026lt;sub command\u0026gt; ... Options # -h, --help help for download SEE ALSO # Parents # ocm	- Open Component Model command line client Sub Commands # ocm download artefacts	- download oci artefacts ocm download componentversions	- download ocm component versions ocm download resources	- download resources of a component version "}),e.add({id:36,href:"/docs/cli-reference/ocm_download_artefacts/",title:"ocm_download_artefacts",description:`ocm download artefacts â€” Download Oci Artefacts # Synopsis # ocm download artefacts [\u0026lt;options\u0026gt;] {\u0026lt;artefact\u0026gt;} Options # -h, --help help for artefacts -O, --outfile string output file or directory -r, --repo string repository name or spec -t, --type string archive format (default \u0026quot;directory\u0026quot;) Description # Download artefacts from an OCI registry. The result is stored in artefact set format, without the repository part
The files are named according to the artefact repository name.`,content:`ocm download artefacts â€” Download Oci Artefacts # Synopsis # ocm download artefacts [\u0026lt;options\u0026gt;] {\u0026lt;artefact\u0026gt;} Options # -h, --help help for artefacts -O, --outfile string output file or directory -r, --repo string repository name or spec -t, --type string archive format (default \u0026quot;directory\u0026quot;) Description # Download artefacts from an OCI registry. The result is stored in artefact set format, without the repository part
The files are named according to the artefact repository name.
If the repository/registry option is specified, the given names are interpreted relative to the specified registry using the syntax
\u0026lt;OCI repository name\u003e[:\u0026lt;tag\u003e][@\u0026lt;digest\u003e] If no \u0026ndash;repo option is specified the given names are interpreted as extended CI artefact references.
[\u0026lt;repo type\u003e::]\u0026lt;host\u003e[:\u0026lt;port\u003e]/\u0026lt;OCI repository name\u003e[:\u0026lt;tag\u003e][@\u0026lt;digest\u003e] The \u0026ndash;repo option takes a repository/OCI registry specification:
[\u0026lt;repo type\u003e::]\u0026lt;configured name\u003e|\u0026lt;file path\u003e|\u0026lt;spec json\u003e For the Common Transport Format the types directory, tar or tgz are possible.
Using the JSON variant any repository type supported by the linked library can be used:
ArtefactSet CommonTransportFormat DockerDaemon Empty OCIRegistry oci ociRegistry The \u0026ndash;type option accepts a file format for the target archive to use. The following formats are supported:
directory tar tgz The default format is directory. SEE ALSO # Parents # ocm download	- Download oci artefacts, resources or complete components ocm	- Open Component Model command line client `}),e.add({id:37,href:"/docs/cli-reference/ocm_download_componentversions/",title:"ocm_download_componentversions",description:`ocm download componentversions â€” Download Ocm Component Versions # Synopsis # ocm download componentversions [\u0026lt;options\u0026gt;] {\u0026lt;components\u0026gt;} Options # -h, --help help for componentversions -O, --outfile string output file or directory -r, --repo string repository name or spec -t, --type string archive format (default \u0026quot;directory\u0026quot;) Description # Download component versions from an OCM repository. The result is stored in component archives.
The files are named according to the component version name.`,content:`ocm download componentversions â€” Download Ocm Component Versions # Synopsis # ocm download componentversions [\u0026lt;options\u0026gt;] {\u0026lt;components\u0026gt;} Options # -h, --help help for componentversions -O, --outfile string output file or directory -r, --repo string repository name or spec -t, --type string archive format (default \u0026quot;directory\u0026quot;) Description # Download component versions from an OCM repository. The result is stored in component archives.
The files are named according to the component version name.
If the \u0026ndash;repo option is specified, the given names are interpreted relative to the specified repository using the syntax
\u0026lt;component\u003e[:\u0026lt;version\u003e] If no \u0026ndash;repo option is specified the given names are interpreted as located OCM component version references:
[\u0026lt;repo type\u003e::]\u0026lt;host\u003e[:\u0026lt;port\u003e][/\u0026lt;base path\u003e]//\u0026lt;component\u003e[:\u0026lt;version\u003e] Additionally there is a variant to denote common transport archives and general repository specifications
[\u0026lt;repo type\u003e::]\u0026lt;filepath\u003e|\u0026lt;spec json\u003e[//\u0026lt;component\u003e[:\u0026lt;version\u003e]] The \u0026ndash;repo option takes an OCM repository specification:
[\u0026lt;repo type\u003e::]\u0026lt;configured name\u003e|\u0026lt;file path\u003e|\u0026lt;spec json\u003e For the Common Transport Format the types directory, tar or tgz is possible.
Using the JSON variant any repository type supported by the linked library can be used:
Dedicated OCM repository types:
ComponentArchive OCI Repository types (using standard component repository to OCI mapping):
ArtefactSet CommonTransportFormat DockerDaemon Empty OCIRegistry oci ociRegistry The \u0026ndash;type option accepts a file format for the target archive to use. The following formats are supported:
directory tar tgz The default format is directory. SEE ALSO # Parents # ocm download	- Download oci artefacts, resources or complete components ocm	- Open Component Model command line client `}),e.add({id:38,href:"/docs/cli-reference/ocm_download_resources/",title:"ocm_download_resources",description:"ocm download resources â€” Download Resources Of A Component Version # Synopsis # ocm download resources [\u0026lt;options\u0026gt;] \u0026lt;component\u0026gt; {\u0026lt;name\u0026gt; { \u0026lt;key\u0026gt;=\u0026lt;value\u0026gt; }} Options # -c, --closure follow component reference nesting -d, --download-handlers use download handler if possible -h, --help help for resources --lookup string repository name or spec for closure lookup fallback -O, --outfile string output file or directory -r, --repo string repository name or spec Description # Download resources of a component version.",content:`ocm download resources â€” Download Resources Of A Component Version # Synopsis # ocm download resources [\u0026lt;options\u0026gt;] \u0026lt;component\u0026gt; {\u0026lt;name\u0026gt; { \u0026lt;key\u0026gt;=\u0026lt;value\u0026gt; }} Options # -c, --closure follow component reference nesting -d, --download-handlers use download handler if possible -h, --help help for resources --lookup string repository name or spec for closure lookup fallback -O, --outfile string output file or directory -r, --repo string repository name or spec Description # Download resources of a component version. Resources are specified by identities. An identity consists of a name argument followed by optional \u0026lt;key\u0026gt;=\u0026lt;value\u0026gt; arguments.
The option -O is used to declare the output destination. For a single resource to download, this is the file written for the resource blob. If multiple resources are selected, a directory structure is written into the given directory for every involved component version as follows:
\u0026lt;component\u003e/\u0026lt;version\u003e{/\u0026lt;nested component\u003e/\u0026lt;version\u003e} The resource files are named according to the resource identity in the component descriptor. If this identity is just the resource name, this name is ised. If additional identity attributes are required, this name is append by a comma separated list of \u0026lt;name\u0026gt;=\u0026amp;lt\u0026gt;value\u0026gt; pairs separated by a \u0026ldquo;-\u0026rdquo; from the plain name. This attribute list is alphabetical order:
\u0026lt;resource name\u003e[-[\u0026lt;name\u003e=\u0026lt\u003evalue\u003e]{,\u0026lt;name\u003e=\u0026lt\u003evalue\u003e}] If the \u0026ndash;repo option is specified, the given names are interpreted relative to the specified repository using the syntax
\u0026lt;component\u003e[:\u0026lt;version\u003e] If no \u0026ndash;repo option is specified the given names are interpreted as located OCM component version references:
[\u0026lt;repo type\u003e::]\u0026lt;host\u003e[:\u0026lt;port\u003e][/\u0026lt;base path\u003e]//\u0026lt;component\u003e[:\u0026lt;version\u003e] Additionally there is a variant to denote common transport archives and general repository specifications
[\u0026lt;repo type\u003e::]\u0026lt;filepath\u003e|\u0026lt;spec json\u003e[//\u0026lt;component\u003e[:\u0026lt;version\u003e]] The \u0026ndash;repo option takes an OCM repository specification:
[\u0026lt;repo type\u003e::]\u0026lt;configured name\u003e|\u0026lt;file path\u003e|\u0026lt;spec json\u003e For the Common Transport Format the types directory, tar or tgz is possible.
Using the JSON variant any repository type supported by the linked library can be used:
Dedicated OCM repository types:
ComponentArchive OCI Repository types (using standard component repository to OCI mapping):
ArtefactSet CommonTransportFormat DockerDaemon Empty OCIRegistry oci ociRegistry The library supports some downloads with semantics based on resource types. For example a helm chart can be download directly as helm chart archive, even if stored as OCI artefact. This is handled by download handler. Their usage can be enabled with the \u0026ndash;download-handlers option. Otherwise the resource as returned by the access method is stored.
With the option \u0026ndash;closure the complete reference tree of a component reference is traversed.
If a component lookup for building a reference closure is required the \u0026ndash;lookup option can be used to specify a fallback lookup repository. By default the component versions are searched in the repository holding the component version for which the closure is determined. For Component Archives this is never possible, because it only contains a single component version. Therefore, in this scenario this option must always be specified to be able to follow component references.
SEE ALSO # Parents # ocm download	- Download oci artefacts, resources or complete components ocm	- Open Component Model command line client `}),e.add({id:39,href:"/docs/cli-reference/ocm_get/",title:"ocm_get",description:"ocm get â€” Get Information About Artefacts And Components # Synopsis # ocm get [\u0026lt;options\u0026gt;] \u0026lt;sub command\u0026gt; ... Options # -h, --help help for get SEE ALSO # Parents # ocm	- Open Component Model command line client Sub Commands # ocm get artefacts	- get artefact version ocm get componentversions	- get component version ocm get references	- get references of a component version ocm get resources	- get resources of a component version ocm get sources	- get sources of a component version ",content:"ocm get â€” Get Information About Artefacts And Components # Synopsis # ocm get [\u0026lt;options\u0026gt;] \u0026lt;sub command\u0026gt; ... Options # -h, --help help for get SEE ALSO # Parents # ocm	- Open Component Model command line client Sub Commands # ocm get artefacts	- get artefact version ocm get componentversions	- get component version ocm get references	- get references of a component version ocm get resources	- get resources of a component version ocm get sources	- get sources of a component version "}),e.add({id:40,href:"/docs/cli-reference/ocm_get_artefacts/",title:"ocm_get_artefacts",description:"ocm get artefacts â€” Get Artefact Version # Synopsis # ocm get artefacts [\u0026lt;options\u0026gt;] {\u0026lt;artefact-reference\u0026gt;} Options # -a, --attached show attached artefacts -c, --closure follow index nesting -h, --help help for artefacts -o, --output string output mode (JSON, json, tree, wide, yaml) -r, --repo string repository name or spec -s, --sort stringArray sort fields Description # Get lists all artefact versions specified, if only a repository is specified all tagged artefacts are listed.",content:`ocm get artefacts â€” Get Artefact Version # Synopsis # ocm get artefacts [\u0026lt;options\u0026gt;] {\u0026lt;artefact-reference\u0026gt;} Options # -a, --attached show attached artefacts -c, --closure follow index nesting -h, --help help for artefacts -o, --output string output mode (JSON, json, tree, wide, yaml) -r, --repo string repository name or spec -s, --sort stringArray sort fields Description # Get lists all artefact versions specified, if only a repository is specified all tagged artefacts are listed.
If the repository/registry option is specified, the given names are interpreted relative to the specified registry using the syntax
\u0026lt;OCI repository name\u003e[:\u0026lt;tag\u003e][@\u0026lt;digest\u003e] If no \u0026ndash;repo option is specified the given names are interpreted as extended CI artefact references.
[\u0026lt;repo type\u003e::]\u0026lt;host\u003e[:\u0026lt;port\u003e]/\u0026lt;OCI repository name\u003e[:\u0026lt;tag\u003e][@\u0026lt;digest\u003e] The \u0026ndash;repo option takes a repository/OCI registry specification:
[\u0026lt;repo type\u003e::]\u0026lt;configured name\u003e|\u0026lt;file path\u003e|\u0026lt;spec json\u003e For the Common Transport Format the types directory, tar or tgz are possible.
Using the JSON variant any repository type supported by the linked library can be used:
ArtefactSet CommonTransportFormat DockerDaemon Empty OCIRegistry oci ociRegistry With the option \u0026ndash;closure the complete reference tree of a index is traversed.
With the option \u0026ndash;output the output mode can be selected. The following modes are supported:
JSON json tree wide yaml Examples # \$ ocm get artefact ghcr.io/mandelsoft/kubelink \$ ocm get artefact --repo OCIRegistry:ghcr.io mandelsoft/kubelink SEE ALSO # Parents # ocm get	- Get information about artefacts and components ocm	- Open Component Model command line client `}),e.add({id:41,href:"/docs/cli-reference/ocm_get_componentversions/",title:"ocm_get_componentversions",description:"ocm get componentversions â€” Get Component Version # Synopsis # ocm get componentversions [\u0026lt;options\u0026gt;] {\u0026lt;component-reference\u0026gt;} Options # -c, --closure follow component reference nesting -h, --help help for componentversions -o, --output string output mode (JSON, json, tree, wide, yaml) -r, --repo string repository name or spec -S, --scheme string schema version -s, --sort stringArray sort fields Description # Get lists all component versions specified, if only a component is specified all versions are listed.",content:`ocm get componentversions â€” Get Component Version # Synopsis # ocm get componentversions [\u0026lt;options\u0026gt;] {\u0026lt;component-reference\u0026gt;} Options # -c, --closure follow component reference nesting -h, --help help for componentversions -o, --output string output mode (JSON, json, tree, wide, yaml) -r, --repo string repository name or spec -S, --scheme string schema version -s, --sort stringArray sort fields Description # Get lists all component versions specified, if only a component is specified all versions are listed.
If the \u0026ndash;repo option is specified, the given names are interpreted relative to the specified repository using the syntax
\u0026lt;component\u003e[:\u0026lt;version\u003e] If no \u0026ndash;repo option is specified the given names are interpreted as located OCM component version references:
[\u0026lt;repo type\u003e::]\u0026lt;host\u003e[:\u0026lt;port\u003e][/\u0026lt;base path\u003e]//\u0026lt;component\u003e[:\u0026lt;version\u003e] Additionally there is a variant to denote common transport archives and general repository specifications
[\u0026lt;repo type\u003e::]\u0026lt;filepath\u003e|\u0026lt;spec json\u003e[//\u0026lt;component\u003e[:\u0026lt;version\u003e]] The \u0026ndash;repo option takes an OCM repository specification:
[\u0026lt;repo type\u003e::]\u0026lt;configured name\u003e|\u0026lt;file path\u003e|\u0026lt;spec json\u003e For the Common Transport Format the types directory, tar or tgz is possible.
Using the JSON variant any repository type supported by the linked library can be used:
Dedicated OCM repository types:
ComponentArchive OCI Repository types (using standard component repository to OCI mapping):
ArtefactSet CommonTransportFormat DockerDaemon Empty OCIRegistry oci ociRegistry With the option \u0026ndash;closure the complete reference tree of a component reference is traversed.
It the option \u0026ndash;scheme is given, the given component descriptor is converted to given format for output. The following schema versions are supported:
ocm.gardener.cloud/v3alpha1 v2 With the option \u0026ndash;output the output mode can be selected. The following modes are supported:
JSON json tree wide yaml Examples # \$ ocm get componentversion ghcr.io/mandelsoft/kubelink \$ ocm get componentversion --repo OCIRegistry:ghcr.io mandelsoft/kubelink SEE ALSO # Parents # ocm get	- Get information about artefacts and components ocm	- Open Component Model command line client `}),e.add({id:42,href:"/docs/cli-reference/ocm_get_references/",title:"ocm_get_references",description:"ocm get references â€” Get References Of A Component Version # Synopsis # ocm get references [\u0026lt;options\u0026gt;] \u0026lt;component\u0026gt; {\u0026lt;name\u0026gt; { \u0026lt;key\u0026gt;=\u0026lt;value\u0026gt; }} Options # -c, --closure follow component reference nesting -h, --help help for references --lookup string repository name or spec for closure lookup fallback -o, --output string output mode (JSON, json, tree, wide, yaml) -r, --repo string repository name or spec -s, --sort stringArray sort fields Description # Get references of a component version.",content:`ocm get references â€” Get References Of A Component Version # Synopsis # ocm get references [\u0026lt;options\u0026gt;] \u0026lt;component\u0026gt; {\u0026lt;name\u0026gt; { \u0026lt;key\u0026gt;=\u0026lt;value\u0026gt; }} Options # -c, --closure follow component reference nesting -h, --help help for references --lookup string repository name or spec for closure lookup fallback -o, --output string output mode (JSON, json, tree, wide, yaml) -r, --repo string repository name or spec -s, --sort stringArray sort fields Description # Get references of a component version. References are specified by identities. An identity consists of a name argument followed by optional \u0026lt;key\u0026gt;=\u0026lt;value\u0026gt; arguments.
If the \u0026ndash;repo option is specified, the given names are interpreted relative to the specified repository using the syntax
\u0026lt;component\u003e[:\u0026lt;version\u003e] If no \u0026ndash;repo option is specified the given names are interpreted as located OCM component version references:
[\u0026lt;repo type\u003e::]\u0026lt;host\u003e[:\u0026lt;port\u003e][/\u0026lt;base path\u003e]//\u0026lt;component\u003e[:\u0026lt;version\u003e] Additionally there is a variant to denote common transport archives and general repository specifications
[\u0026lt;repo type\u003e::]\u0026lt;filepath\u003e|\u0026lt;spec json\u003e[//\u0026lt;component\u003e[:\u0026lt;version\u003e]] The \u0026ndash;repo option takes an OCM repository specification:
[\u0026lt;repo type\u003e::]\u0026lt;configured name\u003e|\u0026lt;file path\u003e|\u0026lt;spec json\u003e For the Common Transport Format the types directory, tar or tgz is possible.
Using the JSON variant any repository type supported by the linked library can be used:
Dedicated OCM repository types:
ComponentArchive OCI Repository types (using standard component repository to OCI mapping):
ArtefactSet CommonTransportFormat DockerDaemon Empty OCIRegistry oci ociRegistry With the option \u0026ndash;closure the complete reference tree of a component reference is traversed.
If a component lookup for building a reference closure is required the \u0026ndash;lookup option can be used to specify a fallback lookup repository. By default the component versions are searched in the repository holding the component version for which the closure is determined. For Component Archives this is never possible, because it only contains a single component version. Therefore, in this scenario this option must always be specified to be able to follow component references.
With the option \u0026ndash;output the output mode can be selected. The following modes are supported:
JSON json tree wide yaml SEE ALSO # Parents # ocm get	- Get information about artefacts and components ocm	- Open Component Model command line client `}),e.add({id:43,href:"/docs/cli-reference/ocm_get_resources/",title:"ocm_get_resources",description:"ocm get resources â€” Get Resources Of A Component Version # Synopsis # ocm get resources [\u0026lt;options\u0026gt;] \u0026lt;component\u0026gt; {\u0026lt;name\u0026gt; { \u0026lt;key\u0026gt;=\u0026lt;value\u0026gt; }} Options # -c, --closure follow component reference nesting -h, --help help for resources --lookup string repository name or spec for closure lookup fallback -o, --output string output mode (JSON, json, tree, treewide, wide, yaml) -r, --repo string repository name or spec -s, --sort stringArray sort fields Description # Get resources of a component version.",content:`ocm get resources â€” Get Resources Of A Component Version # Synopsis # ocm get resources [\u0026lt;options\u0026gt;] \u0026lt;component\u0026gt; {\u0026lt;name\u0026gt; { \u0026lt;key\u0026gt;=\u0026lt;value\u0026gt; }} Options # -c, --closure follow component reference nesting -h, --help help for resources --lookup string repository name or spec for closure lookup fallback -o, --output string output mode (JSON, json, tree, treewide, wide, yaml) -r, --repo string repository name or spec -s, --sort stringArray sort fields Description # Get resources of a component version. Resources are specified by identities. An identity consists of a name argument followed by optional \u0026lt;key\u0026gt;=\u0026lt;value\u0026gt; arguments.
If the \u0026ndash;repo option is specified, the given names are interpreted relative to the specified repository using the syntax
\u0026lt;component\u003e[:\u0026lt;version\u003e] If no \u0026ndash;repo option is specified the given names are interpreted as located OCM component version references:
[\u0026lt;repo type\u003e::]\u0026lt;host\u003e[:\u0026lt;port\u003e][/\u0026lt;base path\u003e]//\u0026lt;component\u003e[:\u0026lt;version\u003e] Additionally there is a variant to denote common transport archives and general repository specifications
[\u0026lt;repo type\u003e::]\u0026lt;filepath\u003e|\u0026lt;spec json\u003e[//\u0026lt;component\u003e[:\u0026lt;version\u003e]] The \u0026ndash;repo option takes an OCM repository specification:
[\u0026lt;repo type\u003e::]\u0026lt;configured name\u003e|\u0026lt;file path\u003e|\u0026lt;spec json\u003e For the Common Transport Format the types directory, tar or tgz is possible.
Using the JSON variant any repository type supported by the linked library can be used:
Dedicated OCM repository types:
ComponentArchive OCI Repository types (using standard component repository to OCI mapping):
ArtefactSet CommonTransportFormat DockerDaemon Empty OCIRegistry oci ociRegistry With the option \u0026ndash;closure the complete reference tree of a component reference is traversed.
If a component lookup for building a reference closure is required the \u0026ndash;lookup option can be used to specify a fallback lookup repository. By default the component versions are searched in the repository holding the component version for which the closure is determined. For Component Archives this is never possible, because it only contains a single component version. Therefore, in this scenario this option must always be specified to be able to follow component references.
With the option \u0026ndash;output the output mode can be selected. The following modes are supported:
JSON json tree treewide wide yaml SEE ALSO # Parents # ocm get	- Get information about artefacts and components ocm	- Open Component Model command line client `}),e.add({id:44,href:"/docs/cli-reference/ocm_get_sources/",title:"ocm_get_sources",description:"ocm get sources â€” Get Sources Of A Component Version # Synopsis # ocm get sources [\u0026lt;options\u0026gt;] \u0026lt;component\u0026gt; {\u0026lt;name\u0026gt; { \u0026lt;key\u0026gt;=\u0026lt;value\u0026gt; }} Options # -c, --closure follow component reference nesting -h, --help help for sources --lookup string repository name or spec for closure lookup fallback -o, --output string output mode (JSON, json, tree, wide, yaml) -r, --repo string repository name or spec -s, --sort stringArray sort fields Description # Get sources of a component version.",content:`ocm get sources â€” Get Sources Of A Component Version # Synopsis # ocm get sources [\u0026lt;options\u0026gt;] \u0026lt;component\u0026gt; {\u0026lt;name\u0026gt; { \u0026lt;key\u0026gt;=\u0026lt;value\u0026gt; }} Options # -c, --closure follow component reference nesting -h, --help help for sources --lookup string repository name or spec for closure lookup fallback -o, --output string output mode (JSON, json, tree, wide, yaml) -r, --repo string repository name or spec -s, --sort stringArray sort fields Description # Get sources of a component version. Sources are specified by identities. An identity consists of a name argument followed by optional \u0026lt;key\u0026gt;=\u0026lt;value\u0026gt; arguments.
If the \u0026ndash;repo option is specified, the given names are interpreted relative to the specified repository using the syntax
\u0026lt;component\u003e[:\u0026lt;version\u003e] If no \u0026ndash;repo option is specified the given names are interpreted as located OCM component version references:
[\u0026lt;repo type\u003e::]\u0026lt;host\u003e[:\u0026lt;port\u003e][/\u0026lt;base path\u003e]//\u0026lt;component\u003e[:\u0026lt;version\u003e] Additionally there is a variant to denote common transport archives and general repository specifications
[\u0026lt;repo type\u003e::]\u0026lt;filepath\u003e|\u0026lt;spec json\u003e[//\u0026lt;component\u003e[:\u0026lt;version\u003e]] The \u0026ndash;repo option takes an OCM repository specification:
[\u0026lt;repo type\u003e::]\u0026lt;configured name\u003e|\u0026lt;file path\u003e|\u0026lt;spec json\u003e For the Common Transport Format the types directory, tar or tgz is possible.
Using the JSON variant any repository type supported by the linked library can be used:
Dedicated OCM repository types:
ComponentArchive OCI Repository types (using standard component repository to OCI mapping):
ArtefactSet CommonTransportFormat DockerDaemon Empty OCIRegistry oci ociRegistry With the option \u0026ndash;closure the complete reference tree of a component reference is traversed.
If a component lookup for building a reference closure is required the \u0026ndash;lookup option can be used to specify a fallback lookup repository. By default the component versions are searched in the repository holding the component version for which the closure is determined. For Component Archives this is never possible, because it only contains a single component version. Therefore, in this scenario this option must always be specified to be able to follow component references.
With the option \u0026ndash;output the output mode can be selected. The following modes are supported:
JSON json tree wide yaml SEE ALSO # Parents # ocm get	- Get information about artefacts and components ocm	- Open Component Model command line client `}),e.add({id:45,href:"/docs/cli-reference/ocm_oci/",title:"ocm_oci",description:"ocm oci â€” Dedicated Command Flavors For The OCI Layer # Synopsis # ocm oci [\u0026lt;options\u0026gt;] \u0026lt;sub command\u0026gt; ... Options # -h, --help help for oci SEE ALSO # Parents # ocm	- Open Component Model command line client Sub Commands # ocm oci artefacts	- Commands acting on OCI artefacts ocm oci tags	- Commands acting on OCI tag names ocm oci transportarchive	- Commands acting on OCI view of a Common Transport Archive Additional Help Topics # ocm oci oci-references	- notation for OCI references ",content:"ocm oci â€” Dedicated Command Flavors For The OCI Layer # Synopsis # ocm oci [\u0026lt;options\u0026gt;] \u0026lt;sub command\u0026gt; ... Options # -h, --help help for oci SEE ALSO # Parents # ocm	- Open Component Model command line client Sub Commands # ocm oci artefacts	- Commands acting on OCI artefacts ocm oci tags	- Commands acting on OCI tag names ocm oci transportarchive	- Commands acting on OCI view of a Common Transport Archive Additional Help Topics # ocm oci oci-references	- notation for OCI references "}),e.add({id:46,href:"/docs/cli-reference/ocm_oci_artefacts/",title:"ocm_oci_artefacts",description:"ocm oci artefacts â€” Commands Acting On OCI Artefacts # Synopsis # ocm oci artefacts [\u0026lt;options\u0026gt;] \u0026lt;sub command\u0026gt; ... Options # -h, --help help for artefacts SEE ALSO # Parents # ocm oci	- Dedicated command flavors for the OCI layer ocm	- Open Component Model command line client Sub Commands # ocm oci artefacts describe	- describe artefact version ocm oci artefacts download	- download oci artefacts ocm oci artefacts get	- get artefact version ocm oci artefacts transfer	- transfer OCI artefacts ",content:"ocm oci artefacts â€” Commands Acting On OCI Artefacts # Synopsis # ocm oci artefacts [\u0026lt;options\u0026gt;] \u0026lt;sub command\u0026gt; ... Options # -h, --help help for artefacts SEE ALSO # Parents # ocm oci	- Dedicated command flavors for the OCI layer ocm	- Open Component Model command line client Sub Commands # ocm oci artefacts describe	- describe artefact version ocm oci artefacts download	- download oci artefacts ocm oci artefacts get	- get artefact version ocm oci artefacts transfer	- transfer OCI artefacts "}),e.add({id:47,href:"/docs/cli-reference/ocm_oci_artefacts_describe/",title:"ocm_oci_artefacts_describe",description:"ocm oci artefacts describe â€” Describe Artefact Version # Synopsis # ocm oci artefacts describe [\u0026lt;options\u0026gt;] {\u0026lt;artefact-reference\u0026gt;} Options # -h, --help help for describe --layerfiles list layer files -o, --output string output mode (JSON, json, yaml) -r, --repo string repository name or spec Description # Describe lists all artefact versions specified, if only a repository is specified all tagged artefacts are listed. Per version a detailed, potentially recursive description is printed.",content:`ocm oci artefacts describe â€” Describe Artefact Version # Synopsis # ocm oci artefacts describe [\u0026lt;options\u0026gt;] {\u0026lt;artefact-reference\u0026gt;} Options # -h, --help help for describe --layerfiles list layer files -o, --output string output mode (JSON, json, yaml) -r, --repo string repository name or spec Description # Describe lists all artefact versions specified, if only a repository is specified all tagged artefacts are listed. Per version a detailed, potentially recursive description is printed.
If the repository/registry option is specified, the given names are interpreted relative to the specified registry using the syntax
\u0026lt;OCI repository name\u003e[:\u0026lt;tag\u003e][@\u0026lt;digest\u003e] If no \u0026ndash;repo option is specified the given names are interpreted as extended CI artefact references.
[\u0026lt;repo type\u003e::]\u0026lt;host\u003e[:\u0026lt;port\u003e]/\u0026lt;OCI repository name\u003e[:\u0026lt;tag\u003e][@\u0026lt;digest\u003e] The \u0026ndash;repo option takes a repository/OCI registry specification:
[\u0026lt;repo type\u003e::]\u0026lt;configured name\u003e|\u0026lt;file path\u003e|\u0026lt;spec json\u003e For the Common Transport Format the types directory, tar or tgz are possible.
Using the JSON variant any repository type supported by the linked library can be used:
ArtefactSet CommonTransportFormat DockerDaemon Empty OCIRegistry oci ociRegistry With the option \u0026ndash;output the output mode can be selected. The following modes are supported:
JSON json yaml Examples # \$ ocm describe artefact ghcr.io/mandelsoft/kubelink \$ ocm describe artefact --repo OCIRegistry:ghcr.io mandelsoft/kubelink SEE ALSO # Parents # ocm oci artefacts	- Commands acting on OCI artefacts ocm oci	- Dedicated command flavors for the OCI layer ocm	- Open Component Model command line client `}),e.add({id:48,href:"/docs/cli-reference/ocm_oci_artefacts_download/",title:"ocm_oci_artefacts_download",description:`ocm oci artefacts download â€” Download Oci Artefacts # Synopsis # ocm oci artefacts download [\u0026lt;options\u0026gt;] {\u0026lt;artefact\u0026gt;} Options # -h, --help help for download -O, --outfile string output file or directory -r, --repo string repository name or spec -t, --type string archive format (default \u0026quot;directory\u0026quot;) Description # Download artefacts from an OCI registry. The result is stored in artefact set format, without the repository part
The files are named according to the artefact repository name.`,content:`ocm oci artefacts download â€” Download Oci Artefacts # Synopsis # ocm oci artefacts download [\u0026lt;options\u0026gt;] {\u0026lt;artefact\u0026gt;} Options # -h, --help help for download -O, --outfile string output file or directory -r, --repo string repository name or spec -t, --type string archive format (default \u0026quot;directory\u0026quot;) Description # Download artefacts from an OCI registry. The result is stored in artefact set format, without the repository part
The files are named according to the artefact repository name.
If the repository/registry option is specified, the given names are interpreted relative to the specified registry using the syntax
\u0026lt;OCI repository name\u003e[:\u0026lt;tag\u003e][@\u0026lt;digest\u003e] If no \u0026ndash;repo option is specified the given names are interpreted as extended CI artefact references.
[\u0026lt;repo type\u003e::]\u0026lt;host\u003e[:\u0026lt;port\u003e]/\u0026lt;OCI repository name\u003e[:\u0026lt;tag\u003e][@\u0026lt;digest\u003e] The \u0026ndash;repo option takes a repository/OCI registry specification:
[\u0026lt;repo type\u003e::]\u0026lt;configured name\u003e|\u0026lt;file path\u003e|\u0026lt;spec json\u003e For the Common Transport Format the types directory, tar or tgz are possible.
Using the JSON variant any repository type supported by the linked library can be used:
ArtefactSet CommonTransportFormat DockerDaemon Empty OCIRegistry oci ociRegistry The \u0026ndash;type option accepts a file format for the target archive to use. The following formats are supported:
directory tar tgz The default format is directory. SEE ALSO # Parents # ocm oci artefacts	- Commands acting on OCI artefacts ocm oci	- Dedicated command flavors for the OCI layer ocm	- Open Component Model command line client `}),e.add({id:49,href:"/docs/cli-reference/ocm_oci_artefacts_get/",title:"ocm_oci_artefacts_get",description:"ocm oci artefacts get â€” Get Artefact Version # Synopsis # ocm oci artefacts get [\u0026lt;options\u0026gt;] {\u0026lt;artefact-reference\u0026gt;} Options # -a, --attached show attached artefacts -c, --closure follow index nesting -h, --help help for get -o, --output string output mode (JSON, json, tree, wide, yaml) -r, --repo string repository name or spec -s, --sort stringArray sort fields Description # Get lists all artefact versions specified, if only a repository is specified all tagged artefacts are listed.",content:`ocm oci artefacts get â€” Get Artefact Version # Synopsis # ocm oci artefacts get [\u0026lt;options\u0026gt;] {\u0026lt;artefact-reference\u0026gt;} Options # -a, --attached show attached artefacts -c, --closure follow index nesting -h, --help help for get -o, --output string output mode (JSON, json, tree, wide, yaml) -r, --repo string repository name or spec -s, --sort stringArray sort fields Description # Get lists all artefact versions specified, if only a repository is specified all tagged artefacts are listed.
If the repository/registry option is specified, the given names are interpreted relative to the specified registry using the syntax
\u0026lt;OCI repository name\u003e[:\u0026lt;tag\u003e][@\u0026lt;digest\u003e] If no \u0026ndash;repo option is specified the given names are interpreted as extended CI artefact references.
[\u0026lt;repo type\u003e::]\u0026lt;host\u003e[:\u0026lt;port\u003e]/\u0026lt;OCI repository name\u003e[:\u0026lt;tag\u003e][@\u0026lt;digest\u003e] The \u0026ndash;repo option takes a repository/OCI registry specification:
[\u0026lt;repo type\u003e::]\u0026lt;configured name\u003e|\u0026lt;file path\u003e|\u0026lt;spec json\u003e For the Common Transport Format the types directory, tar or tgz are possible.
Using the JSON variant any repository type supported by the linked library can be used:
ArtefactSet CommonTransportFormat DockerDaemon Empty OCIRegistry oci ociRegistry With the option \u0026ndash;closure the complete reference tree of a index is traversed.
With the option \u0026ndash;output the output mode can be selected. The following modes are supported:
JSON json tree wide yaml Examples # \$ ocm get artefact ghcr.io/mandelsoft/kubelink \$ ocm get artefact --repo OCIRegistry:ghcr.io mandelsoft/kubelink SEE ALSO # Parents # ocm oci artefacts	- Commands acting on OCI artefacts ocm oci	- Dedicated command flavors for the OCI layer ocm	- Open Component Model command line client `}),e.add({id:50,href:"/docs/cli-reference/ocm_oci_artefacts_transfer/",title:"ocm_oci_artefacts_transfer",description:"ocm oci artefacts transfer â€” Transfer OCI Artefacts # Synopsis # ocm oci artefacts transfer [\u0026lt;options\u0026gt;] {\u0026lt;artefact-reference\u0026gt;} Options # -h, --help help for transfer -r, --repo string repository name or spec Description # Transfer OCI artefacts from one registry to another one If the repository/registry option is specified, the given names are interpreted relative to the specified registry using the syntax \u0026lt;OCI repository name\u003e[:\u0026lt;tag\u003e][@\u0026lt;digest\u003e] If no \u0026ndash;repo option is specified the given names are interpreted as extended CI artefact references.",content:`ocm oci artefacts transfer â€” Transfer OCI Artefacts # Synopsis # ocm oci artefacts transfer [\u0026lt;options\u0026gt;] {\u0026lt;artefact-reference\u0026gt;} Options # -h, --help help for transfer -r, --repo string repository name or spec Description # Transfer OCI artefacts from one registry to another one
If the repository/registry option is specified, the given names are interpreted relative to the specified registry using the syntax
\u0026lt;OCI repository name\u003e[:\u0026lt;tag\u003e][@\u0026lt;digest\u003e] If no \u0026ndash;repo option is specified the given names are interpreted as extended CI artefact references.
[\u0026lt;repo type\u003e::]\u0026lt;host\u003e[:\u0026lt;port\u003e]/\u0026lt;OCI repository name\u003e[:\u0026lt;tag\u003e][@\u0026lt;digest\u003e] The \u0026ndash;repo option takes a repository/OCI registry specification:
[\u0026lt;repo type\u003e::]\u0026lt;configured name\u003e|\u0026lt;file path\u003e|\u0026lt;spec json\u003e For the Common Transport Format the types directory, tar or tgz are possible.
Using the JSON variant any repository type supported by the linked library can be used:
ArtefactSet CommonTransportFormat DockerDaemon Empty OCIRegistry oci ociRegistry Examples # \$ ocm oci transfer ghcr.io/mandelsoft/kubelink gcr.io SEE ALSO # Parents # ocm oci artefacts	- Commands acting on OCI artefacts ocm oci	- Dedicated command flavors for the OCI layer ocm	- Open Component Model command line client `}),e.add({id:51,href:"/docs/cli-reference/ocm_oci_oci-references/",title:"ocm_oci_oci-references",description:"ocm oci oci-references â€” Notation For OCI References # Description # The command line client supports a special notation scheme for specifying references to instances of oci like registries. This allows for specifying references to any registry supported by the OCM toolset that can host OCI artefacts. As a subset the regular OCI artefact notation used for docker images are possible: [+][\u0026lt;type\u003e::][./][\u0026lt;file path\u003e//\u0026lt;repository\u003e[:\u0026lt;tag\u003e][@\u0026lt;digest\u003e] or [\u0026lt;type\u003e::][\u0026lt;json repo spec\u003e//]\u0026lt;repository\u003e[:\u0026lt;tag\u003e][@\u0026lt;digest\u003e] or [\u0026lt;type\u003e::][\u0026lt;scheme\u003e:://]\u0026lt;domain\u003e[:\u0026lt;port\u003e/]\u0026lt;repository\u003e[:\u0026lt;tag\u003e][@\u0026lt;digest\u003e] or \u0026lt;docker library\u003e[:\u0026lt;tag\u003e][@\u0026lt;digest\u003e] or \u0026lt;docker repository\u003e/\u0026lt;docker image\u003e[:\u0026lt;tag\u003e][@\u0026lt;digest\u003e] Besides dedicated artefacts it is also possible to denote registries as a whole:",content:`ocm oci oci-references â€” Notation For OCI References # Description # The command line client supports a special notation scheme for specifying references to instances of oci like registries. This allows for specifying references to any registry supported by the OCM toolset that can host OCI artefacts. As a subset the regular OCI artefact notation used for docker images are possible:
[+][\u0026lt;type\u003e::][./][\u0026lt;file path\u003e//\u0026lt;repository\u003e[:\u0026lt;tag\u003e][@\u0026lt;digest\u003e] or [\u0026lt;type\u003e::][\u0026lt;json repo spec\u003e//]\u0026lt;repository\u003e[:\u0026lt;tag\u003e][@\u0026lt;digest\u003e] or [\u0026lt;type\u003e::][\u0026lt;scheme\u003e:://]\u0026lt;domain\u003e[:\u0026lt;port\u003e/]\u0026lt;repository\u003e[:\u0026lt;tag\u003e][@\u0026lt;digest\u003e] or \u0026lt;docker library\u003e[:\u0026lt;tag\u003e][@\u0026lt;digest\u003e] or \u0026lt;docker repository\u003e/\u0026lt;docker image\u003e[:\u0026lt;tag\u003e][@\u0026lt;digest\u003e] Besides dedicated artefacts it is also possible to denote registries as a whole:
[+][\u0026lt;type\u003e::][\u0026lt;scheme\u003e:://]\u0026lt;domain\u003e[:\u0026lt;port\u003e] or [+][\u0026lt;type\u003e::]\u0026lt;json repo spec\u003e or [+][\u0026lt;type\u003e::][./]\u0026lt;file path\u003e The optional + is used for file based implementations (Common Transport Format) to indicate the creation of a not yet existing file.
The type may contain a file format qualifier separated by a + character. The following formats are supported: directory, tar, tgz
Examples # ghcr.io/mandelsoft/cnudie:1.0.0 SEE ALSO # Parents # ocm oci	- Dedicated command flavors for the OCI layer ocm	- Open Component Model command line client `}),e.add({id:52,href:"/docs/cli-reference/ocm_oci_tags/",title:"ocm_oci_tags",description:"ocm oci tags â€” Commands Acting On OCI Tag Names # Synopsis # ocm oci tags [\u0026lt;options\u0026gt;] \u0026lt;sub command\u0026gt; ... Options # -h, --help help for tags SEE ALSO # Parents # ocm oci	- Dedicated command flavors for the OCI layer ocm	- Open Component Model command line client Sub Commands # ocm oci tags show	- show dedicated tags of OCI artefacts ",content:"ocm oci tags â€” Commands Acting On OCI Tag Names # Synopsis # ocm oci tags [\u0026lt;options\u0026gt;] \u0026lt;sub command\u0026gt; ... Options # -h, --help help for tags SEE ALSO # Parents # ocm oci	- Dedicated command flavors for the OCI layer ocm	- Open Component Model command line client Sub Commands # ocm oci tags show	- show dedicated tags of OCI artefacts "}),e.add({id:53,href:"/docs/cli-reference/ocm_oci_tags_show/",title:"ocm_oci_tags_show",description:`ocm oci tags show â€” Show Dedicated Tags Of OCI Artefacts # Synopsis # ocm oci tags show [\u0026lt;options\u0026gt;] \u0026lt;component\u0026gt; {\u0026lt;version pattern\u0026gt;} Options # -h, --help help for show -l, --latest show only latest tags -r, --repo string repository name or spec -o, --semantic show semantic tags -s, --semver show only semver compliant tags Description # Match tags of an artefact against some patterns.
If the repository/registry option is specified, the given names are interpreted relative to the specified registry using the syntax`,content:`ocm oci tags show â€” Show Dedicated Tags Of OCI Artefacts # Synopsis # ocm oci tags show [\u0026lt;options\u0026gt;] \u0026lt;component\u0026gt; {\u0026lt;version pattern\u0026gt;} Options # -h, --help help for show -l, --latest show only latest tags -r, --repo string repository name or spec -o, --semantic show semantic tags -s, --semver show only semver compliant tags Description # Match tags of an artefact against some patterns.
If the repository/registry option is specified, the given names are interpreted relative to the specified registry using the syntax
\u0026lt;OCI repository name\u003e[:\u0026lt;tag\u003e][@\u0026lt;digest\u003e] If no \u0026ndash;repo option is specified the given names are interpreted as extended CI artefact references.
[\u0026lt;repo type\u003e::]\u0026lt;host\u003e[:\u0026lt;port\u003e]/\u0026lt;OCI repository name\u003e[:\u0026lt;tag\u003e][@\u0026lt;digest\u003e] The \u0026ndash;repo option takes a repository/OCI registry specification:
[\u0026lt;repo type\u003e::]\u0026lt;configured name\u003e|\u0026lt;file path\u003e|\u0026lt;spec json\u003e For the Common Transport Format the types directory, tar or tgz are possible.
Using the JSON variant any repository type supported by the linked library can be used:
ArtefactSet CommonTransportFormat DockerDaemon Empty OCIRegistry oci ociRegistry Examples # \$ oci show tags ghcr.io/mandelsoft/kubelink SEE ALSO # Parents # ocm oci tags	- Commands acting on OCI tag names ocm oci	- Dedicated command flavors for the OCI layer ocm	- Open Component Model command line client `}),e.add({id:54,href:"/docs/cli-reference/ocm_oci_transportarchive/",title:"ocm_oci_transportarchive",description:"ocm oci transportarchive â€” Commands Acting On OCI View Of A Common Transport Archive # Synopsis # ocm oci transportarchive [\u0026lt;options\u0026gt;] \u0026lt;sub command\u0026gt; ... Options # -h, --help help for transportarchive SEE ALSO # Parents # ocm oci	- Dedicated command flavors for the OCI layer ocm	- Open Component Model command line client Sub Commands # ocm oci transportarchive create	- create new OCI/OCM transport archive ",content:"ocm oci transportarchive â€” Commands Acting On OCI View Of A Common Transport Archive # Synopsis # ocm oci transportarchive [\u0026lt;options\u0026gt;] \u0026lt;sub command\u0026gt; ... Options # -h, --help help for transportarchive SEE ALSO # Parents # ocm oci	- Dedicated command flavors for the OCI layer ocm	- Open Component Model command line client Sub Commands # ocm oci transportarchive create	- create new OCI/OCM transport archive "}),e.add({id:55,href:"/docs/cli-reference/ocm_oci_transportarchive_create/",title:"ocm_oci_transportarchive_create",description:`ocm oci transportarchive create â€” Create New OCI/OCM Transport Archive # Synopsis # ocm oci transportarchive create [\u0026lt;options\u0026gt;] \u0026lt;path\u0026gt; Options # -f, --force remove existing content -h, --help help for create -t, --type string archive format (default \u0026quot;directory\u0026quot;) Description # Create a new empty OCM/OCI transport archive. This might be either a directory prepared to host artefact content or a tar/tgz file.
SEE ALSO # Parents # ocm oci transportarchive	- Commands acting on OCI view of a Common Transport Archive ocm oci	- Dedicated command flavors for the OCI layer ocm	- Open Component Model command line client `,content:`ocm oci transportarchive create â€” Create New OCI/OCM Transport Archive # Synopsis # ocm oci transportarchive create [\u0026lt;options\u0026gt;] \u0026lt;path\u0026gt; Options # -f, --force remove existing content -h, --help help for create -t, --type string archive format (default \u0026quot;directory\u0026quot;) Description # Create a new empty OCM/OCI transport archive. This might be either a directory prepared to host artefact content or a tar/tgz file.
SEE ALSO # Parents # ocm oci transportarchive	- Commands acting on OCI view of a Common Transport Archive ocm oci	- Dedicated command flavors for the OCI layer ocm	- Open Component Model command line client `}),e.add({id:56,href:"/docs/cli-reference/ocm_oci-references/",title:"ocm_oci-references",description:"ocm oci-references â€” Notation For OCI References # Description # The command line client supports a special notation scheme for specifying references to instances of oci like registries. This allows for specifying references to any registry supported by the OCM toolset that can host OCI artefacts. As a subset the regular OCI artefact notation used for docker images are possible: [+][\u0026lt;type\u003e::][./][\u0026lt;file path\u003e//\u0026lt;repository\u003e[:\u0026lt;tag\u003e][@\u0026lt;digest\u003e] or [\u0026lt;type\u003e::][\u0026lt;json repo spec\u003e//]\u0026lt;repository\u003e[:\u0026lt;tag\u003e][@\u0026lt;digest\u003e] or [\u0026lt;type\u003e::][\u0026lt;scheme\u003e:://]\u0026lt;domain\u003e[:\u0026lt;port\u003e/]\u0026lt;repository\u003e[:\u0026lt;tag\u003e][@\u0026lt;digest\u003e] or \u0026lt;docker library\u003e[:\u0026lt;tag\u003e][@\u0026lt;digest\u003e] or \u0026lt;docker repository\u003e/\u0026lt;docker image\u003e[:\u0026lt;tag\u003e][@\u0026lt;digest\u003e] Besides dedicated artefacts it is also possible to denote registries as a whole:",content:`ocm oci-references â€” Notation For OCI References # Description # The command line client supports a special notation scheme for specifying references to instances of oci like registries. This allows for specifying references to any registry supported by the OCM toolset that can host OCI artefacts. As a subset the regular OCI artefact notation used for docker images are possible:
[+][\u0026lt;type\u003e::][./][\u0026lt;file path\u003e//\u0026lt;repository\u003e[:\u0026lt;tag\u003e][@\u0026lt;digest\u003e] or [\u0026lt;type\u003e::][\u0026lt;json repo spec\u003e//]\u0026lt;repository\u003e[:\u0026lt;tag\u003e][@\u0026lt;digest\u003e] or [\u0026lt;type\u003e::][\u0026lt;scheme\u003e:://]\u0026lt;domain\u003e[:\u0026lt;port\u003e/]\u0026lt;repository\u003e[:\u0026lt;tag\u003e][@\u0026lt;digest\u003e] or \u0026lt;docker library\u003e[:\u0026lt;tag\u003e][@\u0026lt;digest\u003e] or \u0026lt;docker repository\u003e/\u0026lt;docker image\u003e[:\u0026lt;tag\u003e][@\u0026lt;digest\u003e] Besides dedicated artefacts it is also possible to denote registries as a whole:
[+][\u0026lt;type\u003e::][\u0026lt;scheme\u003e:://]\u0026lt;domain\u003e[:\u0026lt;port\u003e] or [+][\u0026lt;type\u003e::]\u0026lt;json repo spec\u003e or [+][\u0026lt;type\u003e::][./]\u0026lt;file path\u003e The optional + is used for file based implementations (Common Transport Format) to indicate the creation of a not yet existing file.
The type may contain a file format qualifier separated by a + character. The following formats are supported: directory, tar, tgz
Examples # ghcr.io/mandelsoft/cnudie:1.0.0 SEE ALSO # Parents # ocm	- Open Component Model command line client `}),e.add({id:57,href:"/docs/cli-reference/ocm_ocm/",title:"ocm_ocm",description:"ocm ocm â€” Dedicated Command Flavors For The Open Component Model # Synopsis # ocm ocm [\u0026lt;options\u0026gt;] \u0026lt;sub command\u0026gt; ... Options # -h, --help help for ocm SEE ALSO # Parents # ocm	- Open Component Model command line client Sub Commands # ocm ocm commontransportarchive	- Commands acting on common transport archives ocm ocm componentarchive	- Commands acting on component archives ocm ocm componentversions	- Commands acting on components ocm ocm references	- Commands related to component references in component versions ocm ocm resources	- Commands acting on component resources ocm ocm sources	- Commands acting on component sources ocm ocm versions	- Commands acting on component version names Additional Help Topics # ocm ocm ocm-references	- notation for OCM references ",content:"ocm ocm â€” Dedicated Command Flavors For The Open Component Model # Synopsis # ocm ocm [\u0026lt;options\u0026gt;] \u0026lt;sub command\u0026gt; ... Options # -h, --help help for ocm SEE ALSO # Parents # ocm	- Open Component Model command line client Sub Commands # ocm ocm commontransportarchive	- Commands acting on common transport archives ocm ocm componentarchive	- Commands acting on component archives ocm ocm componentversions	- Commands acting on components ocm ocm references	- Commands related to component references in component versions ocm ocm resources	- Commands acting on component resources ocm ocm sources	- Commands acting on component sources ocm ocm versions	- Commands acting on component version names Additional Help Topics # ocm ocm ocm-references	- notation for OCM references "}),e.add({id:58,href:"/docs/cli-reference/ocm_ocm_commontransportarchive/",title:"ocm_ocm_commontransportarchive",description:"ocm ocm commontransportarchive â€” Commands Acting On Common Transport Archives # Synopsis # ocm ocm commontransportarchive [\u0026lt;options\u0026gt;] \u0026lt;sub command\u0026gt; ... Options # -h, --help help for commontransportarchive SEE ALSO # Parents # ocm ocm	- Dedicated command flavors for the Open Component Model ocm	- Open Component Model command line client Sub Commands # ocm ocm commontransportarchive create	- create new component archive ocm ocm commontransportarchive transfer	- transfer component archive to some component repository ",content:"ocm ocm commontransportarchive â€” Commands Acting On Common Transport Archives # Synopsis # ocm ocm commontransportarchive [\u0026lt;options\u0026gt;] \u0026lt;sub command\u0026gt; ... Options # -h, --help help for commontransportarchive SEE ALSO # Parents # ocm ocm	- Dedicated command flavors for the Open Component Model ocm	- Open Component Model command line client Sub Commands # ocm ocm commontransportarchive create	- create new component archive ocm ocm commontransportarchive transfer	- transfer component archive to some component repository "}),e.add({id:59,href:"/docs/cli-reference/ocm_ocm_commontransportarchive_create/",title:"ocm_ocm_commontransportarchive_create",description:"ocm ocm commontransportarchive create â€” Create New Component Archive # Synopsis # ocm ocm commontransportarchive create [\u0026lt;options\u0026gt;] \u0026lt;component\u0026gt; \u0026lt;version\u0026gt; \u0026lt;provider\u0026gt; \u0026lt;path\u0026gt; {--provider \u0026lt;label\u0026gt;=\u0026lt;value\u0026gt;} {\u0026lt;label\u0026gt;=\u0026lt;value\u0026gt;} Options # -f, --force remove existing content -h, --help help for create -p, --provider stringArray provider attribute -S, --scheme string schema version (default \u0026quot;v2\u0026quot;) -t, --type string archive format (default \u0026quot;directory\u0026quot;) Description # Create a new component archive. This might be either a directory prepared to host component version content or a tar/tgz file.",content:`ocm ocm commontransportarchive create â€” Create New Component Archive # Synopsis # ocm ocm commontransportarchive create [\u0026lt;options\u0026gt;] \u0026lt;component\u0026gt; \u0026lt;version\u0026gt; \u0026lt;provider\u0026gt; \u0026lt;path\u0026gt; {--provider \u0026lt;label\u0026gt;=\u0026lt;value\u0026gt;} {\u0026lt;label\u0026gt;=\u0026lt;value\u0026gt;} Options # -f, --force remove existing content -h, --help help for create -p, --provider stringArray provider attribute -S, --scheme string schema version (default \u0026quot;v2\u0026quot;) -t, --type string archive format (default \u0026quot;directory\u0026quot;) Description # Create a new component archive. This might be either a directory prepared to host component version content or a tar/tgz file.
The \u0026ndash;type option accepts a file format for the target archive to use. The following formats are supported:
directory tar tgz The default format is directory. It the option \u0026ndash;scheme is given, the given component descriptor format is used/generated. The following schema versions are supported:
ocm.gardener.cloud/v3alpha1 v2 (default) SEE ALSO # Parents # ocm ocm commontransportarchive	- Commands acting on common transport archives ocm ocm	- Dedicated command flavors for the Open Component Model ocm	- Open Component Model command line client `}),e.add({id:60,href:"/docs/cli-reference/ocm_ocm_commontransportarchive_transfer/",title:"ocm_ocm_commontransportarchive_transfer",description:"ocm ocm commontransportarchive transfer â€” Transfer Component Archive To Some Component Repository # Synopsis # ocm ocm commontransportarchive transfer [\u0026lt;options\u0026gt;] \u0026lt;source\u0026gt; \u0026lt;target\u0026gt; Options # -h, --help help for transfer -t, --type string archive format (default \u0026quot;directory\u0026quot;) Description # Transfer a component archive to some component repository. This might be a CTF Archive or a regular repository. If the type CTF is specified the target must already exist, if CTF flavor is specified it will be created if it does not exist.",content:`ocm ocm commontransportarchive transfer â€” Transfer Component Archive To Some Component Repository # Synopsis # ocm ocm commontransportarchive transfer [\u0026lt;options\u0026gt;] \u0026lt;source\u0026gt; \u0026lt;target\u0026gt; Options # -h, --help help for transfer -t, --type string archive format (default \u0026quot;directory\u0026quot;) Description # Transfer a component archive to some component repository. This might be a CTF Archive or a regular repository. If the type CTF is specified the target must already exist, if CTF flavor is specified it will be created if it does not exist.
Besides those explicitly known types a complete repository spec might be configured, either via inline argument or command configuration file and name.
The \u0026ndash;type option accepts a file format for the target archive to use. The following formats are supported:
directory tar tgz The default format is directory. SEE ALSO # Parents # ocm ocm commontransportarchive	- Commands acting on common transport archives ocm ocm	- Dedicated command flavors for the Open Component Model ocm	- Open Component Model command line client `}),e.add({id:61,href:"/docs/cli-reference/ocm_ocm_componentarchive/",title:"ocm_ocm_componentarchive",description:"ocm ocm componentarchive â€” Commands Acting On Component Archives # Synopsis # ocm ocm componentarchive [\u0026lt;options\u0026gt;] \u0026lt;sub command\u0026gt; ... Options # -h, --help help for componentarchive SEE ALSO # Parents # ocm ocm	- Dedicated command flavors for the Open Component Model ocm	- Open Component Model command line client Sub Commands # ocm ocm componentarchive create	- create new component archive ocm ocm componentarchive transfer	- transfer component archive to some component repository ",content:"ocm ocm componentarchive â€” Commands Acting On Component Archives # Synopsis # ocm ocm componentarchive [\u0026lt;options\u0026gt;] \u0026lt;sub command\u0026gt; ... Options # -h, --help help for componentarchive SEE ALSO # Parents # ocm ocm	- Dedicated command flavors for the Open Component Model ocm	- Open Component Model command line client Sub Commands # ocm ocm componentarchive create	- create new component archive ocm ocm componentarchive transfer	- transfer component archive to some component repository "}),e.add({id:62,href:"/docs/cli-reference/ocm_ocm_componentarchive_create/",title:"ocm_ocm_componentarchive_create",description:"ocm ocm componentarchive create â€” Create New Component Archive # Synopsis # ocm ocm componentarchive create [\u0026lt;options\u0026gt;] \u0026lt;component\u0026gt; \u0026lt;version\u0026gt; \u0026lt;provider\u0026gt; \u0026lt;path\u0026gt; {--provider \u0026lt;label\u0026gt;=\u0026lt;value\u0026gt;} {\u0026lt;label\u0026gt;=\u0026lt;value\u0026gt;} Options # -f, --force remove existing content -h, --help help for create -p, --provider stringArray provider attribute -S, --scheme string schema version (default \u0026quot;v2\u0026quot;) -t, --type string archive format (default \u0026quot;directory\u0026quot;) Description # Create a new component archive. This might be either a directory prepared to host component version content or a tar/tgz file.",content:`ocm ocm componentarchive create â€” Create New Component Archive # Synopsis # ocm ocm componentarchive create [\u0026lt;options\u0026gt;] \u0026lt;component\u0026gt; \u0026lt;version\u0026gt; \u0026lt;provider\u0026gt; \u0026lt;path\u0026gt; {--provider \u0026lt;label\u0026gt;=\u0026lt;value\u0026gt;} {\u0026lt;label\u0026gt;=\u0026lt;value\u0026gt;} Options # -f, --force remove existing content -h, --help help for create -p, --provider stringArray provider attribute -S, --scheme string schema version (default \u0026quot;v2\u0026quot;) -t, --type string archive format (default \u0026quot;directory\u0026quot;) Description # Create a new component archive. This might be either a directory prepared to host component version content or a tar/tgz file.
The \u0026ndash;type option accepts a file format for the target archive to use. The following formats are supported:
directory tar tgz The default format is directory. It the option \u0026ndash;scheme is given, the given component descriptor format is used/generated. The following schema versions are supported:
ocm.gardener.cloud/v3alpha1 v2 (default) SEE ALSO # Parents # ocm ocm componentarchive	- Commands acting on component archives ocm ocm	- Dedicated command flavors for the Open Component Model ocm	- Open Component Model command line client `}),e.add({id:63,href:"/docs/cli-reference/ocm_ocm_componentarchive_transfer/",title:"ocm_ocm_componentarchive_transfer",description:"ocm ocm componentarchive transfer â€” Transfer Component Archive To Some Component Repository # Synopsis # ocm ocm componentarchive transfer [\u0026lt;options\u0026gt;] \u0026lt;source\u0026gt; \u0026lt;target\u0026gt; Options # -h, --help help for transfer -t, --type string archive format (default \u0026quot;directory\u0026quot;) Description # Transfer a component archive to some component repository. This might be a CTF Archive or a regular repository. If the type CTF is specified the target must already exist, if CTF flavor is specified it will be created if it does not exist.",content:`ocm ocm componentarchive transfer â€” Transfer Component Archive To Some Component Repository # Synopsis # ocm ocm componentarchive transfer [\u0026lt;options\u0026gt;] \u0026lt;source\u0026gt; \u0026lt;target\u0026gt; Options # -h, --help help for transfer -t, --type string archive format (default \u0026quot;directory\u0026quot;) Description # Transfer a component archive to some component repository. This might be a CTF Archive or a regular repository. If the type CTF is specified the target must already exist, if CTF flavor is specified it will be created if it does not exist.
Besides those explicitly known types a complete repository spec might be configured, either via inline argument or command configuration file and name.
The \u0026ndash;type option accepts a file format for the target archive to use. The following formats are supported:
directory tar tgz The default format is directory. SEE ALSO # Parents # ocm ocm componentarchive	- Commands acting on component archives ocm ocm	- Dedicated command flavors for the Open Component Model ocm	- Open Component Model command line client `}),e.add({id:64,href:"/docs/cli-reference/ocm_ocm_componentversions/",title:"ocm_ocm_componentversions",description:"ocm ocm componentversions â€” Commands Acting On Components # Synopsis # ocm ocm componentversions [\u0026lt;options\u0026gt;] \u0026lt;sub command\u0026gt; ... Options # -h, --help help for componentversions SEE ALSO # Parents # ocm ocm	- Dedicated command flavors for the Open Component Model ocm	- Open Component Model command line client Sub Commands # ocm ocm componentversions download	- download ocm component versions ocm ocm componentversions get	- get component version ocm ocm componentversions sign	- Sign component version ocm ocm componentversions verify	- Verify signature of component version ",content:"ocm ocm componentversions â€” Commands Acting On Components # Synopsis # ocm ocm componentversions [\u0026lt;options\u0026gt;] \u0026lt;sub command\u0026gt; ... Options # -h, --help help for componentversions SEE ALSO # Parents # ocm ocm	- Dedicated command flavors for the Open Component Model ocm	- Open Component Model command line client Sub Commands # ocm ocm componentversions download	- download ocm component versions ocm ocm componentversions get	- get component version ocm ocm componentversions sign	- Sign component version ocm ocm componentversions verify	- Verify signature of component version "}),e.add({id:65,href:"/docs/cli-reference/ocm_ocm_componentversions_download/",title:"ocm_ocm_componentversions_download",description:`ocm ocm componentversions download â€” Download Ocm Component Versions # Synopsis # ocm ocm componentversions download [\u0026lt;options\u0026gt;] {\u0026lt;components\u0026gt;} Options # -h, --help help for download -O, --outfile string output file or directory -r, --repo string repository name or spec -t, --type string archive format (default \u0026quot;directory\u0026quot;) Description # Download component versions from an OCM repository. The result is stored in component archives.
The files are named according to the component version name.`,content:`ocm ocm componentversions download â€” Download Ocm Component Versions # Synopsis # ocm ocm componentversions download [\u0026lt;options\u0026gt;] {\u0026lt;components\u0026gt;} Options # -h, --help help for download -O, --outfile string output file or directory -r, --repo string repository name or spec -t, --type string archive format (default \u0026quot;directory\u0026quot;) Description # Download component versions from an OCM repository. The result is stored in component archives.
The files are named according to the component version name.
If the \u0026ndash;repo option is specified, the given names are interpreted relative to the specified repository using the syntax
\u0026lt;component\u003e[:\u0026lt;version\u003e] If no \u0026ndash;repo option is specified the given names are interpreted as located OCM component version references:
[\u0026lt;repo type\u003e::]\u0026lt;host\u003e[:\u0026lt;port\u003e][/\u0026lt;base path\u003e]//\u0026lt;component\u003e[:\u0026lt;version\u003e] Additionally there is a variant to denote common transport archives and general repository specifications
[\u0026lt;repo type\u003e::]\u0026lt;filepath\u003e|\u0026lt;spec json\u003e[//\u0026lt;component\u003e[:\u0026lt;version\u003e]] The \u0026ndash;repo option takes an OCM repository specification:
[\u0026lt;repo type\u003e::]\u0026lt;configured name\u003e|\u0026lt;file path\u003e|\u0026lt;spec json\u003e For the Common Transport Format the types directory, tar or tgz is possible.
Using the JSON variant any repository type supported by the linked library can be used:
Dedicated OCM repository types:
ComponentArchive OCI Repository types (using standard component repository to OCI mapping):
ArtefactSet CommonTransportFormat DockerDaemon Empty OCIRegistry oci ociRegistry The \u0026ndash;type option accepts a file format for the target archive to use. The following formats are supported:
directory tar tgz The default format is directory. SEE ALSO # Parents # ocm ocm componentversions	- Commands acting on components ocm ocm	- Dedicated command flavors for the Open Component Model ocm	- Open Component Model command line client `}),e.add({id:66,href:"/docs/cli-reference/ocm_ocm_componentversions_get/",title:"ocm_ocm_componentversions_get",description:"ocm ocm componentversions get â€” Get Component Version # Synopsis # ocm ocm componentversions get [\u0026lt;options\u0026gt;] {\u0026lt;component-reference\u0026gt;} Options # -c, --closure follow component reference nesting -h, --help help for get -o, --output string output mode (JSON, json, tree, wide, yaml) -r, --repo string repository name or spec -S, --scheme string schema version -s, --sort stringArray sort fields Description # Get lists all component versions specified, if only a component is specified all versions are listed.",content:`ocm ocm componentversions get â€” Get Component Version # Synopsis # ocm ocm componentversions get [\u0026lt;options\u0026gt;] {\u0026lt;component-reference\u0026gt;} Options # -c, --closure follow component reference nesting -h, --help help for get -o, --output string output mode (JSON, json, tree, wide, yaml) -r, --repo string repository name or spec -S, --scheme string schema version -s, --sort stringArray sort fields Description # Get lists all component versions specified, if only a component is specified all versions are listed.
If the \u0026ndash;repo option is specified, the given names are interpreted relative to the specified repository using the syntax
\u0026lt;component\u003e[:\u0026lt;version\u003e] If no \u0026ndash;repo option is specified the given names are interpreted as located OCM component version references:
[\u0026lt;repo type\u003e::]\u0026lt;host\u003e[:\u0026lt;port\u003e][/\u0026lt;base path\u003e]//\u0026lt;component\u003e[:\u0026lt;version\u003e] Additionally there is a variant to denote common transport archives and general repository specifications
[\u0026lt;repo type\u003e::]\u0026lt;filepath\u003e|\u0026lt;spec json\u003e[//\u0026lt;component\u003e[:\u0026lt;version\u003e]] The \u0026ndash;repo option takes an OCM repository specification:
[\u0026lt;repo type\u003e::]\u0026lt;configured name\u003e|\u0026lt;file path\u003e|\u0026lt;spec json\u003e For the Common Transport Format the types directory, tar or tgz is possible.
Using the JSON variant any repository type supported by the linked library can be used:
Dedicated OCM repository types:
ComponentArchive OCI Repository types (using standard component repository to OCI mapping):
ArtefactSet CommonTransportFormat DockerDaemon Empty OCIRegistry oci ociRegistry With the option \u0026ndash;closure the complete reference tree of a component reference is traversed.
It the option \u0026ndash;scheme is given, the given component descriptor is converted to given format for output. The following schema versions are supported:
ocm.gardener.cloud/v3alpha1 v2 With the option \u0026ndash;output the output mode can be selected. The following modes are supported:
JSON json tree wide yaml Examples # \$ ocm get componentversion ghcr.io/mandelsoft/kubelink \$ ocm get componentversion --repo OCIRegistry:ghcr.io mandelsoft/kubelink SEE ALSO # Parents # ocm ocm componentversions	- Commands acting on components ocm ocm	- Dedicated command flavors for the Open Component Model ocm	- Open Component Model command line client `}),e.add({id:67,href:"/docs/cli-reference/ocm_ocm_componentversions_sign/",title:"ocm_ocm_componentversions_sign",description:"ocm ocm componentversions sign â€” Sign Component Version # Synopsis # ocm ocm componentversions sign [\u0026lt;options\u0026gt;] {\u0026lt;component-reference\u0026gt;} Options # -S, --algorithm string signature handler (default \u0026quot;RSASSA-PKCS1-V1_5\u0026quot;) --ca-cert stringArray Additional root certificates -H, --hash string hash algorithm (default \u0026quot;sha256\u0026quot;) -h, --help help for sign -I, --issuer string issuer name -N, --normalization string normalization algorithm (default \u0026quot;jsonNormalisation/v1\u0026quot;) -K, --private-key stringArray private key setting -k, --public-key stringArray public key setting -R, --recursive recursively sign component versions (default true) -r, --repo string repository name or spec -s, --signature stringArray signature name --update update digest in component versions (default true) -V, --verify verify existing digests (default true) Description # Sign specified component versions.",content:`ocm ocm componentversions sign â€” Sign Component Version # Synopsis # ocm ocm componentversions sign [\u0026lt;options\u0026gt;] {\u0026lt;component-reference\u0026gt;} Options # -S, --algorithm string signature handler (default \u0026quot;RSASSA-PKCS1-V1_5\u0026quot;) --ca-cert stringArray Additional root certificates -H, --hash string hash algorithm (default \u0026quot;sha256\u0026quot;) -h, --help help for sign -I, --issuer string issuer name -N, --normalization string normalization algorithm (default \u0026quot;jsonNormalisation/v1\u0026quot;) -K, --private-key stringArray private key setting -k, --public-key stringArray public key setting -R, --recursive recursively sign component versions (default true) -r, --repo string repository name or spec -s, --signature stringArray signature name --update update digest in component versions (default true) -V, --verify verify existing digests (default true) Description # Sign specified component versions.
If the \u0026ndash;repo option is specified, the given names are interpreted relative to the specified repository using the syntax
\u0026lt;component\u003e[:\u0026lt;version\u003e] If no \u0026ndash;repo option is specified the given names are interpreted as located OCM component version references:
[\u0026lt;repo type\u003e::]\u0026lt;host\u003e[:\u0026lt;port\u003e][/\u0026lt;base path\u003e]//\u0026lt;component\u003e[:\u0026lt;version\u003e] Additionally there is a variant to denote common transport archives and general repository specifications
[\u0026lt;repo type\u003e::]\u0026lt;filepath\u003e|\u0026lt;spec json\u003e[//\u0026lt;component\u003e[:\u0026lt;version\u003e]] The \u0026ndash;repo option takes an OCM repository specification:
[\u0026lt;repo type\u003e::]\u0026lt;configured name\u003e|\u0026lt;file path\u003e|\u0026lt;spec json\u003e For the Common Transport Format the types directory, tar or tgz is possible.
Using the JSON variant any repository type supported by the linked library can be used:
Dedicated OCM repository types:
ComponentArchive OCI Repository types (using standard component repository to OCI mapping):
ArtefactSet CommonTransportFormat DockerDaemon Empty OCIRegistry oci ociRegistry The \u0026ndash;public-key and \u0026ndash;private-key options can be used to define public and private keys on the command line. The options have an argument of the form [\u0026lt;name\u0026gt;=]\u0026lt;filepath\u0026gt;. The optional name specifies the signature name the key should be used for. By default this is the signature name specified with the option \u0026ndash;signature.
Alternatively a key can be specified as base64 encoded string if the argument start with the prefix ! or as direct string with the prefix =.
If in signing mode a public key is specified, existing signatures for the given signature name will be verified, instead of recreated.
The following signing types are supported with option \u0026ndash;algorithm:
RSASSA-PKCS1-V1_5 (default) rsa-signingsservice The following normalization modes are supported with option \u0026ndash;normalization:
jsonNormalisation/v1 (default) jsonNormalisation/v2 The following hash modes are supported with option \u0026ndash;hash:
NO-DIGEST sha256 (default) sha512 Examples # \$ ocm sign componentversion --signature mandelsoft --private-key=mandelsoft.key ghcr.io/mandelsoft/kubelink SEE ALSO # Parents # ocm ocm componentversions	- Commands acting on components ocm ocm	- Dedicated command flavors for the Open Component Model ocm	- Open Component Model command line client `}),e.add({id:68,href:"/docs/cli-reference/ocm_ocm_componentversions_verify/",title:"ocm_ocm_componentversions_verify",description:`ocm ocm componentversions verify â€” Verify Signature Of Component Version # Synopsis # ocm ocm componentversions verify [\u0026lt;options\u0026gt;] {\u0026lt;component-reference\u0026gt;} Options # --ca-cert stringArray Additional root certificates -h, --help help for verify -k, --public-key stringArray public key setting -r, --repo string repository name or spec -s, --signature stringArray signature name -V, --verify verify existing digests Description # Verify signature of specified component versions.
If the \u0026ndash;repo option is specified, the given names are interpreted relative to the specified repository using the syntax`,content:`ocm ocm componentversions verify â€” Verify Signature Of Component Version # Synopsis # ocm ocm componentversions verify [\u0026lt;options\u0026gt;] {\u0026lt;component-reference\u0026gt;} Options # --ca-cert stringArray Additional root certificates -h, --help help for verify -k, --public-key stringArray public key setting -r, --repo string repository name or spec -s, --signature stringArray signature name -V, --verify verify existing digests Description # Verify signature of specified component versions.
If the \u0026ndash;repo option is specified, the given names are interpreted relative to the specified repository using the syntax
\u0026lt;component\u003e[:\u0026lt;version\u003e] If no \u0026ndash;repo option is specified the given names are interpreted as located OCM component version references:
[\u0026lt;repo type\u003e::]\u0026lt;host\u003e[:\u0026lt;port\u003e][/\u0026lt;base path\u003e]//\u0026lt;component\u003e[:\u0026lt;version\u003e] Additionally there is a variant to denote common transport archives and general repository specifications
[\u0026lt;repo type\u003e::]\u0026lt;filepath\u003e|\u0026lt;spec json\u003e[//\u0026lt;component\u003e[:\u0026lt;version\u003e]] The \u0026ndash;repo option takes an OCM repository specification:
[\u0026lt;repo type\u003e::]\u0026lt;configured name\u003e|\u0026lt;file path\u003e|\u0026lt;spec json\u003e For the Common Transport Format the types directory, tar or tgz is possible.
Using the JSON variant any repository type supported by the linked library can be used:
Dedicated OCM repository types:
ComponentArchive OCI Repository types (using standard component repository to OCI mapping):
ArtefactSet CommonTransportFormat DockerDaemon Empty OCIRegistry oci ociRegistry The \u0026ndash;public-key and \u0026ndash;private-key options can be used to define public and private keys on the command line. The options have an argument of the form [\u0026lt;name\u0026gt;=]\u0026lt;filepath\u0026gt;. The optional name specifies the signature name the key should be used for. By default this is the signature name specified with the option \u0026ndash;signature.
Alternatively a key can be specified as base64 encoded string if the argument start with the prefix ! or as direct string with the prefix =.
Examples # \$ ocm verify componentversion --signature mandelsoft --public-key=mandelsoft.key ghcr.io/mandelsoft/kubelink SEE ALSO # Parents # ocm ocm componentversions	- Commands acting on components ocm ocm	- Dedicated command flavors for the Open Component Model ocm	- Open Component Model command line client `}),e.add({id:69,href:"/docs/cli-reference/ocm_ocm_ocm-references/",title:"ocm_ocm_ocm-references",description:"ocm ocm ocm-references â€” Notation For OCM References # Description # The command line client supports a special notation scheme for specifying references to OCM components and repositories. This allows for specifying references to any registry supported by the OCM toolset that can host OCM components: [+][\u0026lt;type\u003e::][./][\u0026lt;file path\u003e//\u0026lt;component id\u003e[:\u0026lt;version\u003e] or [+][\u0026lt;type\u003e::]\u0026lt;domain\u003e[:\u0026lt;port\u003e][/\u0026lt;repository prefix\u003e]//\u0026lt;component id\u003e[:\u0026lt;version] or [\u0026lt;type\u003e::][\u0026lt;json repo spec\u003e//]\u0026lt;component id\u003e[:\u0026lt;version\u003e] Besides dedicated components it is also possible to denote repositories as a whole:",content:`ocm ocm ocm-references â€” Notation For OCM References # Description # The command line client supports a special notation scheme for specifying references to OCM components and repositories. This allows for specifying references to any registry supported by the OCM toolset that can host OCM components:
[+][\u0026lt;type\u003e::][./][\u0026lt;file path\u003e//\u0026lt;component id\u003e[:\u0026lt;version\u003e] or [+][\u0026lt;type\u003e::]\u0026lt;domain\u003e[:\u0026lt;port\u003e][/\u0026lt;repository prefix\u003e]//\u0026lt;component id\u003e[:\u0026lt;version] or [\u0026lt;type\u003e::][\u0026lt;json repo spec\u003e//]\u0026lt;component id\u003e[:\u0026lt;version\u003e] Besides dedicated components it is also possible to denote repositories as a whole:
[+][\u0026lt;type\u003e::][\u0026lt;scheme\u003e:://]\u0026lt;domain\u003e[:\u0026lt;port\u003e][/\u0026lt;repository prefix\u003e] or [+][\u0026lt;type\u003e::]\u0026lt;json repo spec\u003e or [+][\u0026lt;type\u003e::][./]\u0026lt;file path\u003e The optional + is used for file based implementations (Common Transport Format) to indicate the creation of a not yet existing file.
The type may contain a file format qualifier separated by a + character. The following formats are supported: directory, tar, tgz
Examples # ghcr.io/mandelsoft/cnudie//github.com/mandelsoft/pause:1.0.0 ctf+tgz::./ctf SEE ALSO # Parents # ocm ocm	- Dedicated command flavors for the Open Component Model ocm	- Open Component Model command line client `}),e.add({id:70,href:"/docs/cli-reference/ocm_ocm_references/",title:"ocm_ocm_references",description:"ocm ocm references â€” Commands Related To Component References In Component Versions # Synopsis # ocm ocm references [\u0026lt;options\u0026gt;] \u0026lt;sub command\u0026gt; ... Options # -h, --help help for references SEE ALSO # Parents # ocm ocm	- Dedicated command flavors for the Open Component Model ocm	- Open Component Model command line client Sub Commands # ocm ocm references add	- add aggregation information to a component version ocm ocm references get	- get references of a component version ",content:"ocm ocm references â€” Commands Related To Component References In Component Versions # Synopsis # ocm ocm references [\u0026lt;options\u0026gt;] \u0026lt;sub command\u0026gt; ... Options # -h, --help help for references SEE ALSO # Parents # ocm ocm	- Dedicated command flavors for the Open Component Model ocm	- Open Component Model command line client Sub Commands # ocm ocm references add	- add aggregation information to a component version ocm ocm references get	- get references of a component version "}),e.add({id:71,href:"/docs/cli-reference/ocm_ocm_references_add/",title:"ocm_ocm_references_add",description:"ocm ocm references add â€” Add Aggregation Information To A Component Version # Synopsis # ocm ocm references add [\u0026lt;options\u0026gt;] \u0026lt;target\u0026gt; {\u0026lt;resourcefile\u0026gt; | \u0026lt;var\u0026gt;=\u0026lt;value\u0026gt;} Options # --addenv access environment for templating -h, --help help for add -s, --settings stringArray settings file with variable settings (yaml) --templater string templater to use (subst, spiff, go) (default \u0026quot;subst\u0026quot;) Description # Add aggregation information specified in a resource file to a component version. So far only component archives are supported as target.",content:`ocm ocm references add â€” Add Aggregation Information To A Component Version # Synopsis # ocm ocm references add [\u0026lt;options\u0026gt;] \u0026lt;target\u0026gt; {\u0026lt;resourcefile\u0026gt; | \u0026lt;var\u0026gt;=\u0026lt;value\u0026gt;} Options # --addenv access environment for templating -h, --help help for add -s, --settings stringArray settings file with variable settings (yaml) --templater string templater to use (subst, spiff, go) (default \u0026quot;subst\u0026quot;) Description # Add aggregation information specified in a resource file to a component version. So far only component archives are supported as target.
Templating: All yaml/json defined resources can be templated. Variables are specified as regular arguments following the syntax \u0026lt;name\u0026gt;=\u0026lt;value\u0026gt;. Additionally settings can be specified by a yaml file using the \u0026ndash;settings option. With the option \u0026ndash;addenv environment variables are added to the binding. Values are overwritten in the order environment, settings file, commmand line settings.
Note: Variable names are case-sensitive.
Example:
-- MY_VAL=test There are several templaters that can be selected by the \u0026ndash;templater option:
envsubst: simple value substitution with the drone/envsubst templater. It supports string values, only. Complext settings will be json encoded.
key: subkey: "abc \${MY_VAL}" go: go templating supports complex values.
key: subkey: "abc {{.MY_VAL}}" spiff: spiff templating supports complex values. the settings are accessible using the binding values.
key: subkey: "abc (( values.MY_VAL ))" This command accepts reference specification files describing the references to add to a component version.
The resource specification supports the following blob input types, specified with the field type in the input field:
Input type dir
The path must denote a directory relative to the resources file, which is packed with tar and optionally compressed if the compress field is set to true. If the field preserveDir is set to true the directory itself is added to the tar. If the field followSymLinks is set to true, symbolic links are not packed but their targets files or folders. With the list fields includeFiles and excludeFiles it is possible to specify which files should be included or excluded. The values are regular expression used to match relative file paths. If no inlcudes are specified all file not explicitly excluded are used.
This blob type specification supports the following fields:
path string
This REQUIRED property describes the file path to directory relative to the resource file location.
mediaType string
This OPTIONAL property describes the media type to store with the local blob. The default media type is application/x-tar and application/gzip if compression is enabled.
compress bool
This OPTIONAL property describes whether the file content should be stored compressed or not.
preserveDir bool
This OPTIONAL property describes whether the specified directory with its basename should be included as top level folder.
followSymlinks bool
This OPTIONAL property describes whether symbolic links should be followed or included as links.
excludeFiles list of regex
This OPTIONAL property describes regular expressions used to match files that should NOT be included in the tar file. It takes precedence over the include match.
includeFiles list of regex
This OPTIONAL property describes regular expressions used to match files that should be included in the tar file. If this option is not given all files not explicitly excluded are used.
Input type docker
The path must denote an image tag that can be found in the local docker daemon. The denoted image is packed an OCI artefact set.
This blob type specification supports the following fields:
path string
This REQUIRED property describes the image name to import from the local docker daemon.
Input type file
The path must denote a file relative the the resources file. The content is compressed if the compress field is set to true.
This blob type specification supports the following fields:
path string
This REQUIRED property describes the file path to the helm chart relative to the resource file location.
mediaType string
This OPTIONAL property describes the media type to store with the local blob. The default media type is application/octet-stream and application/gzip if compression is enabled.
compress bool
This OPTIONAL property describes whether the file content should be stored compressed or not.
Input type helm
The path must denote an helm chart archive or directory relative to the resources file. The denoted chart is packed as an OCI artefact set. Additional provider info is taken from a file with the same name and the suffix .prov.
If the chart should just be stored as archive, please use the type file or dir.
This blob type specification supports the following fields:
path string
This REQUIRED property describes the file path to the helm chart relative to the resource file location.
version string
This OPTIONAL property can be set to configure an explicit version hint. If not specified the versio from the chart will be used. Basically, it is a good practice to use the component version for local resources This can be achieved by using templating for this attribute in the resource file.
SEE ALSO # Parents # ocm ocm references	- Commands related to component references in component versions ocm ocm	- Dedicated command flavors for the Open Component Model ocm	- Open Component Model command line client `}),e.add({id:72,href:"/docs/cli-reference/ocm_ocm_references_get/",title:"ocm_ocm_references_get",description:"ocm ocm references get â€” Get References Of A Component Version # Synopsis # ocm ocm references get [\u0026lt;options\u0026gt;] \u0026lt;component\u0026gt; {\u0026lt;name\u0026gt; { \u0026lt;key\u0026gt;=\u0026lt;value\u0026gt; }} Options # -c, --closure follow component reference nesting -h, --help help for get --lookup string repository name or spec for closure lookup fallback -o, --output string output mode (JSON, json, tree, wide, yaml) -r, --repo string repository name or spec -s, --sort stringArray sort fields Description # Get references of a component version.",content:`ocm ocm references get â€” Get References Of A Component Version # Synopsis # ocm ocm references get [\u0026lt;options\u0026gt;] \u0026lt;component\u0026gt; {\u0026lt;name\u0026gt; { \u0026lt;key\u0026gt;=\u0026lt;value\u0026gt; }} Options # -c, --closure follow component reference nesting -h, --help help for get --lookup string repository name or spec for closure lookup fallback -o, --output string output mode (JSON, json, tree, wide, yaml) -r, --repo string repository name or spec -s, --sort stringArray sort fields Description # Get references of a component version. References are specified by identities. An identity consists of a name argument followed by optional \u0026lt;key\u0026gt;=\u0026lt;value\u0026gt; arguments.
If the \u0026ndash;repo option is specified, the given names are interpreted relative to the specified repository using the syntax
\u0026lt;component\u003e[:\u0026lt;version\u003e] If no \u0026ndash;repo option is specified the given names are interpreted as located OCM component version references:
[\u0026lt;repo type\u003e::]\u0026lt;host\u003e[:\u0026lt;port\u003e][/\u0026lt;base path\u003e]//\u0026lt;component\u003e[:\u0026lt;version\u003e] Additionally there is a variant to denote common transport archives and general repository specifications
[\u0026lt;repo type\u003e::]\u0026lt;filepath\u003e|\u0026lt;spec json\u003e[//\u0026lt;component\u003e[:\u0026lt;version\u003e]] The \u0026ndash;repo option takes an OCM repository specification:
[\u0026lt;repo type\u003e::]\u0026lt;configured name\u003e|\u0026lt;file path\u003e|\u0026lt;spec json\u003e For the Common Transport Format the types directory, tar or tgz is possible.
Using the JSON variant any repository type supported by the linked library can be used:
Dedicated OCM repository types:
ComponentArchive OCI Repository types (using standard component repository to OCI mapping):
ArtefactSet CommonTransportFormat DockerDaemon Empty OCIRegistry oci ociRegistry With the option \u0026ndash;closure the complete reference tree of a component reference is traversed.
If a component lookup for building a reference closure is required the \u0026ndash;lookup option can be used to specify a fallback lookup repository. By default the component versions are searched in the repository holding the component version for which the closure is determined. For Component Archives this is never possible, because it only contains a single component version. Therefore, in this scenario this option must always be specified to be able to follow component references.
With the option \u0026ndash;output the output mode can be selected. The following modes are supported:
JSON json tree wide yaml SEE ALSO # Parents # ocm ocm references	- Commands related to component references in component versions ocm ocm	- Dedicated command flavors for the Open Component Model ocm	- Open Component Model command line client `}),e.add({id:73,href:"/docs/cli-reference/ocm_ocm_resources/",title:"ocm_ocm_resources",description:"ocm ocm resources â€” Commands Acting On Component Resources # Synopsis # ocm ocm resources [\u0026lt;options\u0026gt;] \u0026lt;sub command\u0026gt; ... Options # -h, --help help for resources SEE ALSO # Parents # ocm ocm	- Dedicated command flavors for the Open Component Model ocm	- Open Component Model command line client Sub Commands # ocm ocm resources add	- add resources to a component version ocm ocm resources download	- download resources of a component version ocm ocm resources get	- get resources of a component version ",content:"ocm ocm resources â€” Commands Acting On Component Resources # Synopsis # ocm ocm resources [\u0026lt;options\u0026gt;] \u0026lt;sub command\u0026gt; ... Options # -h, --help help for resources SEE ALSO # Parents # ocm ocm	- Dedicated command flavors for the Open Component Model ocm	- Open Component Model command line client Sub Commands # ocm ocm resources add	- add resources to a component version ocm ocm resources download	- download resources of a component version ocm ocm resources get	- get resources of a component version "}),e.add({id:74,href:"/docs/cli-reference/ocm_ocm_resources_add/",title:"ocm_ocm_resources_add",description:"ocm ocm resources add â€” Add Resources To A Component Version # Synopsis # ocm ocm resources add [\u0026lt;options\u0026gt;] \u0026lt;target\u0026gt; {\u0026lt;resourcefile\u0026gt; | \u0026lt;var\u0026gt;=\u0026lt;value\u0026gt;} Options # --addenv access environment for templating -h, --help help for add -s, --settings stringArray settings file with variable settings (yaml) --templater string templater to use (subst, spiff, go) (default \u0026quot;subst\u0026quot;) Description # Add resources specified in a resource file to a component version. So far only component archives are supported as target.",content:`ocm ocm resources add â€” Add Resources To A Component Version # Synopsis # ocm ocm resources add [\u0026lt;options\u0026gt;] \u0026lt;target\u0026gt; {\u0026lt;resourcefile\u0026gt; | \u0026lt;var\u0026gt;=\u0026lt;value\u0026gt;} Options # --addenv access environment for templating -h, --help help for add -s, --settings stringArray settings file with variable settings (yaml) --templater string templater to use (subst, spiff, go) (default \u0026quot;subst\u0026quot;) Description # Add resources specified in a resource file to a component version. So far only component archives are supported as target.
Templating: All yaml/json defined resources can be templated. Variables are specified as regular arguments following the syntax \u0026lt;name\u0026gt;=\u0026lt;value\u0026gt;. Additionally settings can be specified by a yaml file using the \u0026ndash;settings option. With the option \u0026ndash;addenv environment variables are added to the binding. Values are overwritten in the order environment, settings file, commmand line settings.
Note: Variable names are case-sensitive.
Example:
-- MY_VAL=test There are several templaters that can be selected by the \u0026ndash;templater option:
envsubst: simple value substitution with the drone/envsubst templater. It supports string values, only. Complext settings will be json encoded.
key: subkey: "abc \${MY_VAL}" go: go templating supports complex values.
key: subkey: "abc {{.MY_VAL}}" spiff: spiff templating supports complex values. the settings are accessible using the binding values.
key: subkey: "abc (( values.MY_VAL ))" This command accepts resource specification files describing the resources to add to a component version.
The resource specification supports the following blob input types, specified with the field type in the input field:
Input type dir
The path must denote a directory relative to the resources file, which is packed with tar and optionally compressed if the compress field is set to true. If the field preserveDir is set to true the directory itself is added to the tar. If the field followSymLinks is set to true, symbolic links are not packed but their targets files or folders. With the list fields includeFiles and excludeFiles it is possible to specify which files should be included or excluded. The values are regular expression used to match relative file paths. If no inlcudes are specified all file not explicitly excluded are used.
This blob type specification supports the following fields:
path string
This REQUIRED property describes the file path to directory relative to the resource file location.
mediaType string
This OPTIONAL property describes the media type to store with the local blob. The default media type is application/x-tar and application/gzip if compression is enabled.
compress bool
This OPTIONAL property describes whether the file content should be stored compressed or not.
preserveDir bool
This OPTIONAL property describes whether the specified directory with its basename should be included as top level folder.
followSymlinks bool
This OPTIONAL property describes whether symbolic links should be followed or included as links.
excludeFiles list of regex
This OPTIONAL property describes regular expressions used to match files that should NOT be included in the tar file. It takes precedence over the include match.
includeFiles list of regex
This OPTIONAL property describes regular expressions used to match files that should be included in the tar file. If this option is not given all files not explicitly excluded are used.
Input type docker
The path must denote an image tag that can be found in the local docker daemon. The denoted image is packed an OCI artefact set.
This blob type specification supports the following fields:
path string
This REQUIRED property describes the image name to import from the local docker daemon.
Input type file
The path must denote a file relative the the resources file. The content is compressed if the compress field is set to true.
This blob type specification supports the following fields:
path string
This REQUIRED property describes the file path to the helm chart relative to the resource file location.
mediaType string
This OPTIONAL property describes the media type to store with the local blob. The default media type is application/octet-stream and application/gzip if compression is enabled.
compress bool
This OPTIONAL property describes whether the file content should be stored compressed or not.
Input type helm
The path must denote an helm chart archive or directory relative to the resources file. The denoted chart is packed as an OCI artefact set. Additional provider info is taken from a file with the same name and the suffix .prov.
If the chart should just be stored as archive, please use the type file or dir.
This blob type specification supports the following fields:
path string
This REQUIRED property describes the file path to the helm chart relative to the resource file location.
version string
This OPTIONAL property can be set to configure an explicit version hint. If not specified the versio from the chart will be used. Basically, it is a good practice to use the component version for local resources This can be achieved by using templating for this attribute in the resource file.
SEE ALSO # Parents # ocm ocm resources	- Commands acting on component resources ocm ocm	- Dedicated command flavors for the Open Component Model ocm	- Open Component Model command line client `}),e.add({id:75,href:"/docs/cli-reference/ocm_ocm_resources_download/",title:"ocm_ocm_resources_download",description:"ocm ocm resources download â€” Download Resources Of A Component Version # Synopsis # ocm ocm resources download [\u0026lt;options\u0026gt;] \u0026lt;component\u0026gt; {\u0026lt;name\u0026gt; { \u0026lt;key\u0026gt;=\u0026lt;value\u0026gt; }} Options # -c, --closure follow component reference nesting -d, --download-handlers use download handler if possible -h, --help help for download --lookup string repository name or spec for closure lookup fallback -O, --outfile string output file or directory -r, --repo string repository name or spec Description # Download resources of a component version.",content:`ocm ocm resources download â€” Download Resources Of A Component Version # Synopsis # ocm ocm resources download [\u0026lt;options\u0026gt;] \u0026lt;component\u0026gt; {\u0026lt;name\u0026gt; { \u0026lt;key\u0026gt;=\u0026lt;value\u0026gt; }} Options # -c, --closure follow component reference nesting -d, --download-handlers use download handler if possible -h, --help help for download --lookup string repository name or spec for closure lookup fallback -O, --outfile string output file or directory -r, --repo string repository name or spec Description # Download resources of a component version. Resources are specified by identities. An identity consists of a name argument followed by optional \u0026lt;key\u0026gt;=\u0026lt;value\u0026gt; arguments.
The option -O is used to declare the output destination. For a single resource to download, this is the file written for the resource blob. If multiple resources are selected, a directory structure is written into the given directory for every involved component version as follows:
\u0026lt;component\u003e/\u0026lt;version\u003e{/\u0026lt;nested component\u003e/\u0026lt;version\u003e} The resource files are named according to the resource identity in the component descriptor. If this identity is just the resource name, this name is ised. If additional identity attributes are required, this name is append by a comma separated list of \u0026lt;name\u0026gt;=\u0026amp;lt\u0026gt;value\u0026gt; pairs separated by a \u0026ldquo;-\u0026rdquo; from the plain name. This attribute list is alphabetical order:
\u0026lt;resource name\u003e[-[\u0026lt;name\u003e=\u0026lt\u003evalue\u003e]{,\u0026lt;name\u003e=\u0026lt\u003evalue\u003e}] If the \u0026ndash;repo option is specified, the given names are interpreted relative to the specified repository using the syntax
\u0026lt;component\u003e[:\u0026lt;version\u003e] If no \u0026ndash;repo option is specified the given names are interpreted as located OCM component version references:
[\u0026lt;repo type\u003e::]\u0026lt;host\u003e[:\u0026lt;port\u003e][/\u0026lt;base path\u003e]//\u0026lt;component\u003e[:\u0026lt;version\u003e] Additionally there is a variant to denote common transport archives and general repository specifications
[\u0026lt;repo type\u003e::]\u0026lt;filepath\u003e|\u0026lt;spec json\u003e[//\u0026lt;component\u003e[:\u0026lt;version\u003e]] The \u0026ndash;repo option takes an OCM repository specification:
[\u0026lt;repo type\u003e::]\u0026lt;configured name\u003e|\u0026lt;file path\u003e|\u0026lt;spec json\u003e For the Common Transport Format the types directory, tar or tgz is possible.
Using the JSON variant any repository type supported by the linked library can be used:
Dedicated OCM repository types:
ComponentArchive OCI Repository types (using standard component repository to OCI mapping):
ArtefactSet CommonTransportFormat DockerDaemon Empty OCIRegistry oci ociRegistry The library supports some downloads with semantics based on resource types. For example a helm chart can be download directly as helm chart archive, even if stored as OCI artefact. This is handled by download handler. Their usage can be enabled with the \u0026ndash;download-handlers option. Otherwise the resource as returned by the access method is stored.
With the option \u0026ndash;closure the complete reference tree of a component reference is traversed.
If a component lookup for building a reference closure is required the \u0026ndash;lookup option can be used to specify a fallback lookup repository. By default the component versions are searched in the repository holding the component version for which the closure is determined. For Component Archives this is never possible, because it only contains a single component version. Therefore, in this scenario this option must always be specified to be able to follow component references.
SEE ALSO # Parents # ocm ocm resources	- Commands acting on component resources ocm ocm	- Dedicated command flavors for the Open Component Model ocm	- Open Component Model command line client `}),e.add({id:76,href:"/docs/cli-reference/ocm_ocm_resources_get/",title:"ocm_ocm_resources_get",description:"ocm ocm resources get â€” Get Resources Of A Component Version # Synopsis # ocm ocm resources get [\u0026lt;options\u0026gt;] \u0026lt;component\u0026gt; {\u0026lt;name\u0026gt; { \u0026lt;key\u0026gt;=\u0026lt;value\u0026gt; }} Options # -c, --closure follow component reference nesting -h, --help help for get --lookup string repository name or spec for closure lookup fallback -o, --output string output mode (JSON, json, tree, treewide, wide, yaml) -r, --repo string repository name or spec -s, --sort stringArray sort fields Description # Get resources of a component version.",content:`ocm ocm resources get â€” Get Resources Of A Component Version # Synopsis # ocm ocm resources get [\u0026lt;options\u0026gt;] \u0026lt;component\u0026gt; {\u0026lt;name\u0026gt; { \u0026lt;key\u0026gt;=\u0026lt;value\u0026gt; }} Options # -c, --closure follow component reference nesting -h, --help help for get --lookup string repository name or spec for closure lookup fallback -o, --output string output mode (JSON, json, tree, treewide, wide, yaml) -r, --repo string repository name or spec -s, --sort stringArray sort fields Description # Get resources of a component version. Resources are specified by identities. An identity consists of a name argument followed by optional \u0026lt;key\u0026gt;=\u0026lt;value\u0026gt; arguments.
If the \u0026ndash;repo option is specified, the given names are interpreted relative to the specified repository using the syntax
\u0026lt;component\u003e[:\u0026lt;version\u003e] If no \u0026ndash;repo option is specified the given names are interpreted as located OCM component version references:
[\u0026lt;repo type\u003e::]\u0026lt;host\u003e[:\u0026lt;port\u003e][/\u0026lt;base path\u003e]//\u0026lt;component\u003e[:\u0026lt;version\u003e] Additionally there is a variant to denote common transport archives and general repository specifications
[\u0026lt;repo type\u003e::]\u0026lt;filepath\u003e|\u0026lt;spec json\u003e[//\u0026lt;component\u003e[:\u0026lt;version\u003e]] The \u0026ndash;repo option takes an OCM repository specification:
[\u0026lt;repo type\u003e::]\u0026lt;configured name\u003e|\u0026lt;file path\u003e|\u0026lt;spec json\u003e For the Common Transport Format the types directory, tar or tgz is possible.
Using the JSON variant any repository type supported by the linked library can be used:
Dedicated OCM repository types:
ComponentArchive OCI Repository types (using standard component repository to OCI mapping):
ArtefactSet CommonTransportFormat DockerDaemon Empty OCIRegistry oci ociRegistry With the option \u0026ndash;closure the complete reference tree of a component reference is traversed.
If a component lookup for building a reference closure is required the \u0026ndash;lookup option can be used to specify a fallback lookup repository. By default the component versions are searched in the repository holding the component version for which the closure is determined. For Component Archives this is never possible, because it only contains a single component version. Therefore, in this scenario this option must always be specified to be able to follow component references.
With the option \u0026ndash;output the output mode can be selected. The following modes are supported:
JSON json tree treewide wide yaml SEE ALSO # Parents # ocm ocm resources	- Commands acting on component resources ocm ocm	- Dedicated command flavors for the Open Component Model ocm	- Open Component Model command line client `}),e.add({id:77,href:"/docs/cli-reference/ocm_ocm_sources/",title:"ocm_ocm_sources",description:"ocm ocm sources â€” Commands Acting On Component Sources # Synopsis # ocm ocm sources [\u0026lt;options\u0026gt;] \u0026lt;sub command\u0026gt; ... Options # -h, --help help for sources SEE ALSO # Parents # ocm ocm	- Dedicated command flavors for the Open Component Model ocm	- Open Component Model command line client Sub Commands # ocm ocm sources add	- add source information to a component version ocm ocm sources get	- get sources of a component version ",content:"ocm ocm sources â€” Commands Acting On Component Sources # Synopsis # ocm ocm sources [\u0026lt;options\u0026gt;] \u0026lt;sub command\u0026gt; ... Options # -h, --help help for sources SEE ALSO # Parents # ocm ocm	- Dedicated command flavors for the Open Component Model ocm	- Open Component Model command line client Sub Commands # ocm ocm sources add	- add source information to a component version ocm ocm sources get	- get sources of a component version "}),e.add({id:78,href:"/docs/cli-reference/ocm_ocm_sources_add/",title:"ocm_ocm_sources_add",description:"ocm ocm sources add â€” Add Source Information To A Component Version # Synopsis # ocm ocm sources add [\u0026lt;options\u0026gt;] \u0026lt;target\u0026gt; {\u0026lt;resourcefile\u0026gt; | \u0026lt;var\u0026gt;=\u0026lt;value\u0026gt;} Options # --addenv access environment for templating -h, --help help for add -s, --settings stringArray settings file with variable settings (yaml) --templater string templater to use (subst, spiff, go) (default \u0026quot;subst\u0026quot;) Description # Add source information specified in a resource file to a component version. So far only component archives are supported as target.",content:`ocm ocm sources add â€” Add Source Information To A Component Version # Synopsis # ocm ocm sources add [\u0026lt;options\u0026gt;] \u0026lt;target\u0026gt; {\u0026lt;resourcefile\u0026gt; | \u0026lt;var\u0026gt;=\u0026lt;value\u0026gt;} Options # --addenv access environment for templating -h, --help help for add -s, --settings stringArray settings file with variable settings (yaml) --templater string templater to use (subst, spiff, go) (default \u0026quot;subst\u0026quot;) Description # Add source information specified in a resource file to a component version. So far only component archives are supported as target.
Templating: All yaml/json defined resources can be templated. Variables are specified as regular arguments following the syntax \u0026lt;name\u0026gt;=\u0026lt;value\u0026gt;. Additionally settings can be specified by a yaml file using the \u0026ndash;settings option. With the option \u0026ndash;addenv environment variables are added to the binding. Values are overwritten in the order environment, settings file, commmand line settings.
Note: Variable names are case-sensitive.
Example:
-- MY_VAL=test There are several templaters that can be selected by the \u0026ndash;templater option:
envsubst: simple value substitution with the drone/envsubst templater. It supports string values, only. Complext settings will be json encoded.
key: subkey: "abc \${MY_VAL}" go: go templating supports complex values.
key: subkey: "abc {{.MY_VAL}}" spiff: spiff templating supports complex values. the settings are accessible using the binding values.
key: subkey: "abc (( values.MY_VAL ))" This command accepts (re)source specification files describing the sources to add to a component version.
The resource specification supports the following blob input types, specified with the field type in the input field:
Input type dir
The path must denote a directory relative to the resources file, which is packed with tar and optionally compressed if the compress field is set to true. If the field preserveDir is set to true the directory itself is added to the tar. If the field followSymLinks is set to true, symbolic links are not packed but their targets files or folders. With the list fields includeFiles and excludeFiles it is possible to specify which files should be included or excluded. The values are regular expression used to match relative file paths. If no inlcudes are specified all file not explicitly excluded are used.
This blob type specification supports the following fields:
path string
This REQUIRED property describes the file path to directory relative to the resource file location.
mediaType string
This OPTIONAL property describes the media type to store with the local blob. The default media type is application/x-tar and application/gzip if compression is enabled.
compress bool
This OPTIONAL property describes whether the file content should be stored compressed or not.
preserveDir bool
This OPTIONAL property describes whether the specified directory with its basename should be included as top level folder.
followSymlinks bool
This OPTIONAL property describes whether symbolic links should be followed or included as links.
excludeFiles list of regex
This OPTIONAL property describes regular expressions used to match files that should NOT be included in the tar file. It takes precedence over the include match.
includeFiles list of regex
This OPTIONAL property describes regular expressions used to match files that should be included in the tar file. If this option is not given all files not explicitly excluded are used.
Input type docker
The path must denote an image tag that can be found in the local docker daemon. The denoted image is packed an OCI artefact set.
This blob type specification supports the following fields:
path string
This REQUIRED property describes the image name to import from the local docker daemon.
Input type file
The path must denote a file relative the the resources file. The content is compressed if the compress field is set to true.
This blob type specification supports the following fields:
path string
This REQUIRED property describes the file path to the helm chart relative to the resource file location.
mediaType string
This OPTIONAL property describes the media type to store with the local blob. The default media type is application/octet-stream and application/gzip if compression is enabled.
compress bool
This OPTIONAL property describes whether the file content should be stored compressed or not.
Input type helm
The path must denote an helm chart archive or directory relative to the resources file. The denoted chart is packed as an OCI artefact set. Additional provider info is taken from a file with the same name and the suffix .prov.
If the chart should just be stored as archive, please use the type file or dir.
This blob type specification supports the following fields:
path string
This REQUIRED property describes the file path to the helm chart relative to the resource file location.
version string
This OPTIONAL property can be set to configure an explicit version hint. If not specified the versio from the chart will be used. Basically, it is a good practice to use the component version for local resources This can be achieved by using templating for this attribute in the resource file.
SEE ALSO # Parents # ocm ocm sources	- Commands acting on component sources ocm ocm	- Dedicated command flavors for the Open Component Model ocm	- Open Component Model command line client `}),e.add({id:79,href:"/docs/cli-reference/ocm_ocm_sources_get/",title:"ocm_ocm_sources_get",description:"ocm ocm sources get â€” Get Sources Of A Component Version # Synopsis # ocm ocm sources get [\u0026lt;options\u0026gt;] \u0026lt;component\u0026gt; {\u0026lt;name\u0026gt; { \u0026lt;key\u0026gt;=\u0026lt;value\u0026gt; }} Options # -c, --closure follow component reference nesting -h, --help help for get --lookup string repository name or spec for closure lookup fallback -o, --output string output mode (JSON, json, tree, wide, yaml) -r, --repo string repository name or spec -s, --sort stringArray sort fields Description # Get sources of a component version.",content:`ocm ocm sources get â€” Get Sources Of A Component Version # Synopsis # ocm ocm sources get [\u0026lt;options\u0026gt;] \u0026lt;component\u0026gt; {\u0026lt;name\u0026gt; { \u0026lt;key\u0026gt;=\u0026lt;value\u0026gt; }} Options # -c, --closure follow component reference nesting -h, --help help for get --lookup string repository name or spec for closure lookup fallback -o, --output string output mode (JSON, json, tree, wide, yaml) -r, --repo string repository name or spec -s, --sort stringArray sort fields Description # Get sources of a component version. Sources are specified by identities. An identity consists of a name argument followed by optional \u0026lt;key\u0026gt;=\u0026lt;value\u0026gt; arguments.
If the \u0026ndash;repo option is specified, the given names are interpreted relative to the specified repository using the syntax
\u0026lt;component\u003e[:\u0026lt;version\u003e] If no \u0026ndash;repo option is specified the given names are interpreted as located OCM component version references:
[\u0026lt;repo type\u003e::]\u0026lt;host\u003e[:\u0026lt;port\u003e][/\u0026lt;base path\u003e]//\u0026lt;component\u003e[:\u0026lt;version\u003e] Additionally there is a variant to denote common transport archives and general repository specifications
[\u0026lt;repo type\u003e::]\u0026lt;filepath\u003e|\u0026lt;spec json\u003e[//\u0026lt;component\u003e[:\u0026lt;version\u003e]] The \u0026ndash;repo option takes an OCM repository specification:
[\u0026lt;repo type\u003e::]\u0026lt;configured name\u003e|\u0026lt;file path\u003e|\u0026lt;spec json\u003e For the Common Transport Format the types directory, tar or tgz is possible.
Using the JSON variant any repository type supported by the linked library can be used:
Dedicated OCM repository types:
ComponentArchive OCI Repository types (using standard component repository to OCI mapping):
ArtefactSet CommonTransportFormat DockerDaemon Empty OCIRegistry oci ociRegistry With the option \u0026ndash;closure the complete reference tree of a component reference is traversed.
If a component lookup for building a reference closure is required the \u0026ndash;lookup option can be used to specify a fallback lookup repository. By default the component versions are searched in the repository holding the component version for which the closure is determined. For Component Archives this is never possible, because it only contains a single component version. Therefore, in this scenario this option must always be specified to be able to follow component references.
With the option \u0026ndash;output the output mode can be selected. The following modes are supported:
JSON json tree wide yaml SEE ALSO # Parents # ocm ocm sources	- Commands acting on component sources ocm ocm	- Dedicated command flavors for the Open Component Model ocm	- Open Component Model command line client `}),e.add({id:80,href:"/docs/cli-reference/ocm_ocm_versions/",title:"ocm_ocm_versions",description:"ocm ocm versions â€” Commands Acting On Component Version Names # Synopsis # ocm ocm versions [\u0026lt;options\u0026gt;] \u0026lt;sub command\u0026gt; ... Options # -h, --help help for versions SEE ALSO # Parents # ocm ocm	- Dedicated command flavors for the Open Component Model ocm	- Open Component Model command line client Sub Commands # ocm ocm versions show	- show dedicated versions (semver compliant) ",content:"ocm ocm versions â€” Commands Acting On Component Version Names # Synopsis # ocm ocm versions [\u0026lt;options\u0026gt;] \u0026lt;sub command\u0026gt; ... Options # -h, --help help for versions SEE ALSO # Parents # ocm ocm	- Dedicated command flavors for the Open Component Model ocm	- Open Component Model command line client Sub Commands # ocm ocm versions show	- show dedicated versions (semver compliant) "}),e.add({id:81,href:"/docs/cli-reference/ocm_ocm_versions_show/",title:"ocm_ocm_versions_show",description:`ocm ocm versions show â€” Show Dedicated Versions (Semver Compliant) # Synopsis # ocm ocm versions show [\u0026lt;options\u0026gt;] \u0026lt;component\u0026gt; {\u0026lt;version pattern\u0026gt;} Options # -h, --help help for show -l, --latest show only latest version -r, --repo string repository name or spec -s, --semantic show semantic version Description # Match versions of a component against some patterns.
If the \u0026ndash;repo option is specified, the given names are interpreted relative to the specified repository using the syntax`,content:`ocm ocm versions show â€” Show Dedicated Versions (Semver Compliant) # Synopsis # ocm ocm versions show [\u0026lt;options\u0026gt;] \u0026lt;component\u0026gt; {\u0026lt;version pattern\u0026gt;} Options # -h, --help help for show -l, --latest show only latest version -r, --repo string repository name or spec -s, --semantic show semantic version Description # Match versions of a component against some patterns.
If the \u0026ndash;repo option is specified, the given names are interpreted relative to the specified repository using the syntax
\u0026lt;component\u003e[:\u0026lt;version\u003e] If no \u0026ndash;repo option is specified the given names are interpreted as located OCM component version references:
[\u0026lt;repo type\u003e::]\u0026lt;host\u003e[:\u0026lt;port\u003e][/\u0026lt;base path\u003e]//\u0026lt;component\u003e[:\u0026lt;version\u003e] Additionally there is a variant to denote common transport archives and general repository specifications
[\u0026lt;repo type\u003e::]\u0026lt;filepath\u003e|\u0026lt;spec json\u003e[//\u0026lt;component\u003e[:\u0026lt;version\u003e]] The \u0026ndash;repo option takes an OCM repository specification:
[\u0026lt;repo type\u003e::]\u0026lt;configured name\u003e|\u0026lt;file path\u003e|\u0026lt;spec json\u003e For the Common Transport Format the types directory, tar or tgz is possible.
Using the JSON variant any repository type supported by the linked library can be used:
Dedicated OCM repository types:
ComponentArchive OCI Repository types (using standard component repository to OCI mapping):
ArtefactSet CommonTransportFormat DockerDaemon Empty OCIRegistry oci ociRegistry Examples # \$ ocm show versions ghcr.io/mandelsoft/cnudie//github.com/mandelsoft/playground SEE ALSO # Parents # ocm ocm versions	- Commands acting on component version names ocm ocm	- Dedicated command flavors for the Open Component Model ocm	- Open Component Model command line client `}),e.add({id:82,href:"/docs/cli-reference/ocm_ocm-references/",title:"ocm_ocm-references",description:"ocm ocm-references â€” Notation For OCM References # Description # The command line client supports a special notation scheme for specifying references to OCM components and repositories. This allows for specifying references to any registry supported by the OCM toolset that can host OCM components: [+][\u0026lt;type\u003e::][./][\u0026lt;file path\u003e//\u0026lt;component id\u003e[:\u0026lt;version\u003e] or [+][\u0026lt;type\u003e::]\u0026lt;domain\u003e[:\u0026lt;port\u003e][/\u0026lt;repository prefix\u003e]//\u0026lt;component id\u003e[:\u0026lt;version] or [\u0026lt;type\u003e::][\u0026lt;json repo spec\u003e//]\u0026lt;component id\u003e[:\u0026lt;version\u003e] Besides dedicated components it is also possible to denote repositories as a whole:",content:`ocm ocm-references â€” Notation For OCM References # Description # The command line client supports a special notation scheme for specifying references to OCM components and repositories. This allows for specifying references to any registry supported by the OCM toolset that can host OCM components:
[+][\u0026lt;type\u003e::][./][\u0026lt;file path\u003e//\u0026lt;component id\u003e[:\u0026lt;version\u003e] or [+][\u0026lt;type\u003e::]\u0026lt;domain\u003e[:\u0026lt;port\u003e][/\u0026lt;repository prefix\u003e]//\u0026lt;component id\u003e[:\u0026lt;version] or [\u0026lt;type\u003e::][\u0026lt;json repo spec\u003e//]\u0026lt;component id\u003e[:\u0026lt;version\u003e] Besides dedicated components it is also possible to denote repositories as a whole:
[+][\u0026lt;type\u003e::][\u0026lt;scheme\u003e:://]\u0026lt;domain\u003e[:\u0026lt;port\u003e][/\u0026lt;repository prefix\u003e] or [+][\u0026lt;type\u003e::]\u0026lt;json repo spec\u003e or [+][\u0026lt;type\u003e::][./]\u0026lt;file path\u003e The optional + is used for file based implementations (Common Transport Format) to indicate the creation of a not yet existing file.
The type may contain a file format qualifier separated by a + character. The following formats are supported: directory, tar, tgz
Examples # ghcr.io/mandelsoft/cnudie//github.com/mandelsoft/pause:1.0.0 ctf+tgz::./ctf SEE ALSO # Parents # ocm	- Open Component Model command line client `}),e.add({id:83,href:"/docs/cli-reference/ocm_references/",title:"ocm_references",description:"ocm references â€” Commands Related To Component References In Component Versions # Synopsis # ocm references [\u0026lt;options\u0026gt;] \u0026lt;sub command\u0026gt; ... Options # -h, --help help for references SEE ALSO # Parents # ocm	- Open Component Model command line client Sub Commands # ocm references add	- add aggregation information to a component version ocm references get	- get references of a component version ",content:"ocm references â€” Commands Related To Component References In Component Versions # Synopsis # ocm references [\u0026lt;options\u0026gt;] \u0026lt;sub command\u0026gt; ... Options # -h, --help help for references SEE ALSO # Parents # ocm	- Open Component Model command line client Sub Commands # ocm references add	- add aggregation information to a component version ocm references get	- get references of a component version "}),e.add({id:84,href:"/docs/cli-reference/ocm_references_add/",title:"ocm_references_add",description:"ocm references add â€” Add Aggregation Information To A Component Version # Synopsis # ocm references add [\u0026lt;options\u0026gt;] \u0026lt;target\u0026gt; {\u0026lt;resourcefile\u0026gt; | \u0026lt;var\u0026gt;=\u0026lt;value\u0026gt;} Options # --addenv access environment for templating -h, --help help for add -s, --settings stringArray settings file with variable settings (yaml) --templater string templater to use (subst, spiff, go) (default \u0026quot;subst\u0026quot;) Description # Add aggregation information specified in a resource file to a component version. So far only component archives are supported as target.",content:`ocm references add â€” Add Aggregation Information To A Component Version # Synopsis # ocm references add [\u0026lt;options\u0026gt;] \u0026lt;target\u0026gt; {\u0026lt;resourcefile\u0026gt; | \u0026lt;var\u0026gt;=\u0026lt;value\u0026gt;} Options # --addenv access environment for templating -h, --help help for add -s, --settings stringArray settings file with variable settings (yaml) --templater string templater to use (subst, spiff, go) (default \u0026quot;subst\u0026quot;) Description # Add aggregation information specified in a resource file to a component version. So far only component archives are supported as target.
Templating: All yaml/json defined resources can be templated. Variables are specified as regular arguments following the syntax \u0026lt;name\u0026gt;=\u0026lt;value\u0026gt;. Additionally settings can be specified by a yaml file using the \u0026ndash;settings option. With the option \u0026ndash;addenv environment variables are added to the binding. Values are overwritten in the order environment, settings file, commmand line settings.
Note: Variable names are case-sensitive.
Example:
-- MY_VAL=test There are several templaters that can be selected by the \u0026ndash;templater option:
envsubst: simple value substitution with the drone/envsubst templater. It supports string values, only. Complext settings will be json encoded.
key: subkey: "abc \${MY_VAL}" go: go templating supports complex values.
key: subkey: "abc {{.MY_VAL}}" spiff: spiff templating supports complex values. the settings are accessible using the binding values.
key: subkey: "abc (( values.MY_VAL ))" This command accepts reference specification files describing the references to add to a component version.
The resource specification supports the following blob input types, specified with the field type in the input field:
Input type dir
The path must denote a directory relative to the resources file, which is packed with tar and optionally compressed if the compress field is set to true. If the field preserveDir is set to true the directory itself is added to the tar. If the field followSymLinks is set to true, symbolic links are not packed but their targets files or folders. With the list fields includeFiles and excludeFiles it is possible to specify which files should be included or excluded. The values are regular expression used to match relative file paths. If no inlcudes are specified all file not explicitly excluded are used.
This blob type specification supports the following fields:
path string
This REQUIRED property describes the file path to directory relative to the resource file location.
mediaType string
This OPTIONAL property describes the media type to store with the local blob. The default media type is application/x-tar and application/gzip if compression is enabled.
compress bool
This OPTIONAL property describes whether the file content should be stored compressed or not.
preserveDir bool
This OPTIONAL property describes whether the specified directory with its basename should be included as top level folder.
followSymlinks bool
This OPTIONAL property describes whether symbolic links should be followed or included as links.
excludeFiles list of regex
This OPTIONAL property describes regular expressions used to match files that should NOT be included in the tar file. It takes precedence over the include match.
includeFiles list of regex
This OPTIONAL property describes regular expressions used to match files that should be included in the tar file. If this option is not given all files not explicitly excluded are used.
Input type docker
The path must denote an image tag that can be found in the local docker daemon. The denoted image is packed an OCI artefact set.
This blob type specification supports the following fields:
path string
This REQUIRED property describes the image name to import from the local docker daemon.
Input type file
The path must denote a file relative the the resources file. The content is compressed if the compress field is set to true.
This blob type specification supports the following fields:
path string
This REQUIRED property describes the file path to the helm chart relative to the resource file location.
mediaType string
This OPTIONAL property describes the media type to store with the local blob. The default media type is application/octet-stream and application/gzip if compression is enabled.
compress bool
This OPTIONAL property describes whether the file content should be stored compressed or not.
Input type helm
The path must denote an helm chart archive or directory relative to the resources file. The denoted chart is packed as an OCI artefact set. Additional provider info is taken from a file with the same name and the suffix .prov.
If the chart should just be stored as archive, please use the type file or dir.
This blob type specification supports the following fields:
path string
This REQUIRED property describes the file path to the helm chart relative to the resource file location.
version string
This OPTIONAL property can be set to configure an explicit version hint. If not specified the versio from the chart will be used. Basically, it is a good practice to use the component version for local resources This can be achieved by using templating for this attribute in the resource file.
SEE ALSO # Parents # ocm references	- Commands related to component references in component versions ocm	- Open Component Model command line client `}),e.add({id:85,href:"/docs/cli-reference/ocm_references_get/",title:"ocm_references_get",description:"ocm references get â€” Get References Of A Component Version # Synopsis # ocm references get [\u0026lt;options\u0026gt;] \u0026lt;component\u0026gt; {\u0026lt;name\u0026gt; { \u0026lt;key\u0026gt;=\u0026lt;value\u0026gt; }} Options # -c, --closure follow component reference nesting -h, --help help for get --lookup string repository name or spec for closure lookup fallback -o, --output string output mode (JSON, json, tree, wide, yaml) -r, --repo string repository name or spec -s, --sort stringArray sort fields Description # Get references of a component version.",content:`ocm references get â€” Get References Of A Component Version # Synopsis # ocm references get [\u0026lt;options\u0026gt;] \u0026lt;component\u0026gt; {\u0026lt;name\u0026gt; { \u0026lt;key\u0026gt;=\u0026lt;value\u0026gt; }} Options # -c, --closure follow component reference nesting -h, --help help for get --lookup string repository name or spec for closure lookup fallback -o, --output string output mode (JSON, json, tree, wide, yaml) -r, --repo string repository name or spec -s, --sort stringArray sort fields Description # Get references of a component version. References are specified by identities. An identity consists of a name argument followed by optional \u0026lt;key\u0026gt;=\u0026lt;value\u0026gt; arguments.
If the \u0026ndash;repo option is specified, the given names are interpreted relative to the specified repository using the syntax
\u0026lt;component\u003e[:\u0026lt;version\u003e] If no \u0026ndash;repo option is specified the given names are interpreted as located OCM component version references:
[\u0026lt;repo type\u003e::]\u0026lt;host\u003e[:\u0026lt;port\u003e][/\u0026lt;base path\u003e]//\u0026lt;component\u003e[:\u0026lt;version\u003e] Additionally there is a variant to denote common transport archives and general repository specifications
[\u0026lt;repo type\u003e::]\u0026lt;filepath\u003e|\u0026lt;spec json\u003e[//\u0026lt;component\u003e[:\u0026lt;version\u003e]] The \u0026ndash;repo option takes an OCM repository specification:
[\u0026lt;repo type\u003e::]\u0026lt;configured name\u003e|\u0026lt;file path\u003e|\u0026lt;spec json\u003e For the Common Transport Format the types directory, tar or tgz is possible.
Using the JSON variant any repository type supported by the linked library can be used:
Dedicated OCM repository types:
ComponentArchive OCI Repository types (using standard component repository to OCI mapping):
ArtefactSet CommonTransportFormat DockerDaemon Empty OCIRegistry oci ociRegistry With the option \u0026ndash;closure the complete reference tree of a component reference is traversed.
If a component lookup for building a reference closure is required the \u0026ndash;lookup option can be used to specify a fallback lookup repository. By default the component versions are searched in the repository holding the component version for which the closure is determined. For Component Archives this is never possible, because it only contains a single component version. Therefore, in this scenario this option must always be specified to be able to follow component references.
With the option \u0026ndash;output the output mode can be selected. The following modes are supported:
JSON json tree wide yaml SEE ALSO # Parents # ocm references	- Commands related to component references in component versions ocm	- Open Component Model command line client `}),e.add({id:86,href:"/docs/cli-reference/ocm_resources/",title:"ocm_resources",description:"ocm resources â€” Commands Acting On Component Resources # Synopsis # ocm resources [\u0026lt;options\u0026gt;] \u0026lt;sub command\u0026gt; ... Options # -h, --help help for resources SEE ALSO # Parents # ocm	- Open Component Model command line client Sub Commands # ocm resources add	- add resources to a component version ocm resources download	- download resources of a component version ocm resources get	- get resources of a component version ",content:"ocm resources â€” Commands Acting On Component Resources # Synopsis # ocm resources [\u0026lt;options\u0026gt;] \u0026lt;sub command\u0026gt; ... Options # -h, --help help for resources SEE ALSO # Parents # ocm	- Open Component Model command line client Sub Commands # ocm resources add	- add resources to a component version ocm resources download	- download resources of a component version ocm resources get	- get resources of a component version "}),e.add({id:87,href:"/docs/cli-reference/ocm_resources_add/",title:"ocm_resources_add",description:"ocm resources add â€” Add Resources To A Component Version # Synopsis # ocm resources add [\u0026lt;options\u0026gt;] \u0026lt;target\u0026gt; {\u0026lt;resourcefile\u0026gt; | \u0026lt;var\u0026gt;=\u0026lt;value\u0026gt;} Options # --addenv access environment for templating -h, --help help for add -s, --settings stringArray settings file with variable settings (yaml) --templater string templater to use (subst, spiff, go) (default \u0026quot;subst\u0026quot;) Description # Add resources specified in a resource file to a component version. So far only component archives are supported as target.",content:`ocm resources add â€” Add Resources To A Component Version # Synopsis # ocm resources add [\u0026lt;options\u0026gt;] \u0026lt;target\u0026gt; {\u0026lt;resourcefile\u0026gt; | \u0026lt;var\u0026gt;=\u0026lt;value\u0026gt;} Options # --addenv access environment for templating -h, --help help for add -s, --settings stringArray settings file with variable settings (yaml) --templater string templater to use (subst, spiff, go) (default \u0026quot;subst\u0026quot;) Description # Add resources specified in a resource file to a component version. So far only component archives are supported as target.
Templating: All yaml/json defined resources can be templated. Variables are specified as regular arguments following the syntax \u0026lt;name\u0026gt;=\u0026lt;value\u0026gt;. Additionally settings can be specified by a yaml file using the \u0026ndash;settings option. With the option \u0026ndash;addenv environment variables are added to the binding. Values are overwritten in the order environment, settings file, commmand line settings.
Note: Variable names are case-sensitive.
Example:
-- MY_VAL=test There are several templaters that can be selected by the \u0026ndash;templater option:
envsubst: simple value substitution with the drone/envsubst templater. It supports string values, only. Complext settings will be json encoded.
key: subkey: "abc \${MY_VAL}" go: go templating supports complex values.
key: subkey: "abc {{.MY_VAL}}" spiff: spiff templating supports complex values. the settings are accessible using the binding values.
key: subkey: "abc (( values.MY_VAL ))" This command accepts resource specification files describing the resources to add to a component version.
The resource specification supports the following blob input types, specified with the field type in the input field:
Input type dir
The path must denote a directory relative to the resources file, which is packed with tar and optionally compressed if the compress field is set to true. If the field preserveDir is set to true the directory itself is added to the tar. If the field followSymLinks is set to true, symbolic links are not packed but their targets files or folders. With the list fields includeFiles and excludeFiles it is possible to specify which files should be included or excluded. The values are regular expression used to match relative file paths. If no inlcudes are specified all file not explicitly excluded are used.
This blob type specification supports the following fields:
path string
This REQUIRED property describes the file path to directory relative to the resource file location.
mediaType string
This OPTIONAL property describes the media type to store with the local blob. The default media type is application/x-tar and application/gzip if compression is enabled.
compress bool
This OPTIONAL property describes whether the file content should be stored compressed or not.
preserveDir bool
This OPTIONAL property describes whether the specified directory with its basename should be included as top level folder.
followSymlinks bool
This OPTIONAL property describes whether symbolic links should be followed or included as links.
excludeFiles list of regex
This OPTIONAL property describes regular expressions used to match files that should NOT be included in the tar file. It takes precedence over the include match.
includeFiles list of regex
This OPTIONAL property describes regular expressions used to match files that should be included in the tar file. If this option is not given all files not explicitly excluded are used.
Input type docker
The path must denote an image tag that can be found in the local docker daemon. The denoted image is packed an OCI artefact set.
This blob type specification supports the following fields:
path string
This REQUIRED property describes the image name to import from the local docker daemon.
Input type file
The path must denote a file relative the the resources file. The content is compressed if the compress field is set to true.
This blob type specification supports the following fields:
path string
This REQUIRED property describes the file path to the helm chart relative to the resource file location.
mediaType string
This OPTIONAL property describes the media type to store with the local blob. The default media type is application/octet-stream and application/gzip if compression is enabled.
compress bool
This OPTIONAL property describes whether the file content should be stored compressed or not.
Input type helm
The path must denote an helm chart archive or directory relative to the resources file. The denoted chart is packed as an OCI artefact set. Additional provider info is taken from a file with the same name and the suffix .prov.
If the chart should just be stored as archive, please use the type file or dir.
This blob type specification supports the following fields:
path string
This REQUIRED property describes the file path to the helm chart relative to the resource file location.
version string
This OPTIONAL property can be set to configure an explicit version hint. If not specified the versio from the chart will be used. Basically, it is a good practice to use the component version for local resources This can be achieved by using templating for this attribute in the resource file.
SEE ALSO # Parents # ocm resources	- Commands acting on component resources ocm	- Open Component Model command line client `}),e.add({id:88,href:"/docs/cli-reference/ocm_resources_download/",title:"ocm_resources_download",description:"ocm resources download â€” Download Resources Of A Component Version # Synopsis # ocm resources download [\u0026lt;options\u0026gt;] \u0026lt;component\u0026gt; {\u0026lt;name\u0026gt; { \u0026lt;key\u0026gt;=\u0026lt;value\u0026gt; }} Options # -c, --closure follow component reference nesting -d, --download-handlers use download handler if possible -h, --help help for download --lookup string repository name or spec for closure lookup fallback -O, --outfile string output file or directory -r, --repo string repository name or spec Description # Download resources of a component version.",content:`ocm resources download â€” Download Resources Of A Component Version # Synopsis # ocm resources download [\u0026lt;options\u0026gt;] \u0026lt;component\u0026gt; {\u0026lt;name\u0026gt; { \u0026lt;key\u0026gt;=\u0026lt;value\u0026gt; }} Options # -c, --closure follow component reference nesting -d, --download-handlers use download handler if possible -h, --help help for download --lookup string repository name or spec for closure lookup fallback -O, --outfile string output file or directory -r, --repo string repository name or spec Description # Download resources of a component version. Resources are specified by identities. An identity consists of a name argument followed by optional \u0026lt;key\u0026gt;=\u0026lt;value\u0026gt; arguments.
The option -O is used to declare the output destination. For a single resource to download, this is the file written for the resource blob. If multiple resources are selected, a directory structure is written into the given directory for every involved component version as follows:
\u0026lt;component\u003e/\u0026lt;version\u003e{/\u0026lt;nested component\u003e/\u0026lt;version\u003e} The resource files are named according to the resource identity in the component descriptor. If this identity is just the resource name, this name is ised. If additional identity attributes are required, this name is append by a comma separated list of \u0026lt;name\u0026gt;=\u0026amp;lt\u0026gt;value\u0026gt; pairs separated by a \u0026ldquo;-\u0026rdquo; from the plain name. This attribute list is alphabetical order:
\u0026lt;resource name\u003e[-[\u0026lt;name\u003e=\u0026lt\u003evalue\u003e]{,\u0026lt;name\u003e=\u0026lt\u003evalue\u003e}] If the \u0026ndash;repo option is specified, the given names are interpreted relative to the specified repository using the syntax
\u0026lt;component\u003e[:\u0026lt;version\u003e] If no \u0026ndash;repo option is specified the given names are interpreted as located OCM component version references:
[\u0026lt;repo type\u003e::]\u0026lt;host\u003e[:\u0026lt;port\u003e][/\u0026lt;base path\u003e]//\u0026lt;component\u003e[:\u0026lt;version\u003e] Additionally there is a variant to denote common transport archives and general repository specifications
[\u0026lt;repo type\u003e::]\u0026lt;filepath\u003e|\u0026lt;spec json\u003e[//\u0026lt;component\u003e[:\u0026lt;version\u003e]] The \u0026ndash;repo option takes an OCM repository specification:
[\u0026lt;repo type\u003e::]\u0026lt;configured name\u003e|\u0026lt;file path\u003e|\u0026lt;spec json\u003e For the Common Transport Format the types directory, tar or tgz is possible.
Using the JSON variant any repository type supported by the linked library can be used:
Dedicated OCM repository types:
ComponentArchive OCI Repository types (using standard component repository to OCI mapping):
ArtefactSet CommonTransportFormat DockerDaemon Empty OCIRegistry oci ociRegistry The library supports some downloads with semantics based on resource types. For example a helm chart can be download directly as helm chart archive, even if stored as OCI artefact. This is handled by download handler. Their usage can be enabled with the \u0026ndash;download-handlers option. Otherwise the resource as returned by the access method is stored.
With the option \u0026ndash;closure the complete reference tree of a component reference is traversed.
If a component lookup for building a reference closure is required the \u0026ndash;lookup option can be used to specify a fallback lookup repository. By default the component versions are searched in the repository holding the component version for which the closure is determined. For Component Archives this is never possible, because it only contains a single component version. Therefore, in this scenario this option must always be specified to be able to follow component references.
SEE ALSO # Parents # ocm resources	- Commands acting on component resources ocm	- Open Component Model command line client `}),e.add({id:89,href:"/docs/cli-reference/ocm_resources_get/",title:"ocm_resources_get",description:"ocm resources get â€” Get Resources Of A Component Version # Synopsis # ocm resources get [\u0026lt;options\u0026gt;] \u0026lt;component\u0026gt; {\u0026lt;name\u0026gt; { \u0026lt;key\u0026gt;=\u0026lt;value\u0026gt; }} Options # -c, --closure follow component reference nesting -h, --help help for get --lookup string repository name or spec for closure lookup fallback -o, --output string output mode (JSON, json, tree, treewide, wide, yaml) -r, --repo string repository name or spec -s, --sort stringArray sort fields Description # Get resources of a component version.",content:`ocm resources get â€” Get Resources Of A Component Version # Synopsis # ocm resources get [\u0026lt;options\u0026gt;] \u0026lt;component\u0026gt; {\u0026lt;name\u0026gt; { \u0026lt;key\u0026gt;=\u0026lt;value\u0026gt; }} Options # -c, --closure follow component reference nesting -h, --help help for get --lookup string repository name or spec for closure lookup fallback -o, --output string output mode (JSON, json, tree, treewide, wide, yaml) -r, --repo string repository name or spec -s, --sort stringArray sort fields Description # Get resources of a component version. Resources are specified by identities. An identity consists of a name argument followed by optional \u0026lt;key\u0026gt;=\u0026lt;value\u0026gt; arguments.
If the \u0026ndash;repo option is specified, the given names are interpreted relative to the specified repository using the syntax
\u0026lt;component\u003e[:\u0026lt;version\u003e] If no \u0026ndash;repo option is specified the given names are interpreted as located OCM component version references:
[\u0026lt;repo type\u003e::]\u0026lt;host\u003e[:\u0026lt;port\u003e][/\u0026lt;base path\u003e]//\u0026lt;component\u003e[:\u0026lt;version\u003e] Additionally there is a variant to denote common transport archives and general repository specifications
[\u0026lt;repo type\u003e::]\u0026lt;filepath\u003e|\u0026lt;spec json\u003e[//\u0026lt;component\u003e[:\u0026lt;version\u003e]] The \u0026ndash;repo option takes an OCM repository specification:
[\u0026lt;repo type\u003e::]\u0026lt;configured name\u003e|\u0026lt;file path\u003e|\u0026lt;spec json\u003e For the Common Transport Format the types directory, tar or tgz is possible.
Using the JSON variant any repository type supported by the linked library can be used:
Dedicated OCM repository types:
ComponentArchive OCI Repository types (using standard component repository to OCI mapping):
ArtefactSet CommonTransportFormat DockerDaemon Empty OCIRegistry oci ociRegistry With the option \u0026ndash;closure the complete reference tree of a component reference is traversed.
If a component lookup for building a reference closure is required the \u0026ndash;lookup option can be used to specify a fallback lookup repository. By default the component versions are searched in the repository holding the component version for which the closure is determined. For Component Archives this is never possible, because it only contains a single component version. Therefore, in this scenario this option must always be specified to be able to follow component references.
With the option \u0026ndash;output the output mode can be selected. The following modes are supported:
JSON json tree treewide wide yaml SEE ALSO # Parents # ocm resources	- Commands acting on component resources ocm	- Open Component Model command line client `}),e.add({id:90,href:"/docs/cli-reference/ocm_show/",title:"ocm_show",description:"ocm show â€” Show Tags Or Versions # Synopsis # ocm show [\u0026lt;options\u0026gt;] \u0026lt;sub command\u0026gt; ... Options # -h, --help help for show SEE ALSO # Parents # ocm	- Open Component Model command line client Sub Commands # ocm show tags	- show dedicated tags of OCI artefacts ocm show versions	- show dedicated versions (semver compliant) ",content:"ocm show â€” Show Tags Or Versions # Synopsis # ocm show [\u0026lt;options\u0026gt;] \u0026lt;sub command\u0026gt; ... Options # -h, --help help for show SEE ALSO # Parents # ocm	- Open Component Model command line client Sub Commands # ocm show tags	- show dedicated tags of OCI artefacts ocm show versions	- show dedicated versions (semver compliant) "}),e.add({id:91,href:"/docs/cli-reference/ocm_show_tags/",title:"ocm_show_tags",description:`ocm show tags â€” Show Dedicated Tags Of OCI Artefacts # Synopsis # ocm show tags [\u0026lt;options\u0026gt;] \u0026lt;component\u0026gt; {\u0026lt;version pattern\u0026gt;} Options # -h, --help help for tags -l, --latest show only latest tags -r, --repo string repository name or spec -o, --semantic show semantic tags -s, --semver show only semver compliant tags Description # Match tags of an artefact against some patterns.
If the repository/registry option is specified, the given names are interpreted relative to the specified registry using the syntax`,content:`ocm show tags â€” Show Dedicated Tags Of OCI Artefacts # Synopsis # ocm show tags [\u0026lt;options\u0026gt;] \u0026lt;component\u0026gt; {\u0026lt;version pattern\u0026gt;} Options # -h, --help help for tags -l, --latest show only latest tags -r, --repo string repository name or spec -o, --semantic show semantic tags -s, --semver show only semver compliant tags Description # Match tags of an artefact against some patterns.
If the repository/registry option is specified, the given names are interpreted relative to the specified registry using the syntax
\u0026lt;OCI repository name\u003e[:\u0026lt;tag\u003e][@\u0026lt;digest\u003e] If no \u0026ndash;repo option is specified the given names are interpreted as extended CI artefact references.
[\u0026lt;repo type\u003e::]\u0026lt;host\u003e[:\u0026lt;port\u003e]/\u0026lt;OCI repository name\u003e[:\u0026lt;tag\u003e][@\u0026lt;digest\u003e] The \u0026ndash;repo option takes a repository/OCI registry specification:
[\u0026lt;repo type\u003e::]\u0026lt;configured name\u003e|\u0026lt;file path\u003e|\u0026lt;spec json\u003e For the Common Transport Format the types directory, tar or tgz are possible.
Using the JSON variant any repository type supported by the linked library can be used:
ArtefactSet CommonTransportFormat DockerDaemon Empty OCIRegistry oci ociRegistry Examples # \$ oci show tags ghcr.io/mandelsoft/kubelink SEE ALSO # Parents # ocm show	- Show tags or versions ocm	- Open Component Model command line client `}),e.add({id:92,href:"/docs/cli-reference/ocm_show_versions/",title:"ocm_show_versions",description:`ocm show versions â€” Show Dedicated Versions (Semver Compliant) # Synopsis # ocm show versions [\u0026lt;options\u0026gt;] \u0026lt;component\u0026gt; {\u0026lt;version pattern\u0026gt;} Options # -h, --help help for versions -l, --latest show only latest version -r, --repo string repository name or spec -s, --semantic show semantic version Description # Match versions of a component against some patterns.
If the \u0026ndash;repo option is specified, the given names are interpreted relative to the specified repository using the syntax`,content:`ocm show versions â€” Show Dedicated Versions (Semver Compliant) # Synopsis # ocm show versions [\u0026lt;options\u0026gt;] \u0026lt;component\u0026gt; {\u0026lt;version pattern\u0026gt;} Options # -h, --help help for versions -l, --latest show only latest version -r, --repo string repository name or spec -s, --semantic show semantic version Description # Match versions of a component against some patterns.
If the \u0026ndash;repo option is specified, the given names are interpreted relative to the specified repository using the syntax
\u0026lt;component\u003e[:\u0026lt;version\u003e] If no \u0026ndash;repo option is specified the given names are interpreted as located OCM component version references:
[\u0026lt;repo type\u003e::]\u0026lt;host\u003e[:\u0026lt;port\u003e][/\u0026lt;base path\u003e]//\u0026lt;component\u003e[:\u0026lt;version\u003e] Additionally there is a variant to denote common transport archives and general repository specifications
[\u0026lt;repo type\u003e::]\u0026lt;filepath\u003e|\u0026lt;spec json\u003e[//\u0026lt;component\u003e[:\u0026lt;version\u003e]] The \u0026ndash;repo option takes an OCM repository specification:
[\u0026lt;repo type\u003e::]\u0026lt;configured name\u003e|\u0026lt;file path\u003e|\u0026lt;spec json\u003e For the Common Transport Format the types directory, tar or tgz is possible.
Using the JSON variant any repository type supported by the linked library can be used:
Dedicated OCM repository types:
ComponentArchive OCI Repository types (using standard component repository to OCI mapping):
ArtefactSet CommonTransportFormat DockerDaemon Empty OCIRegistry oci ociRegistry Examples # \$ ocm show versions ghcr.io/mandelsoft/cnudie//github.com/mandelsoft/playground SEE ALSO # Parents # ocm show	- Show tags or versions ocm	- Open Component Model command line client `}),e.add({id:93,href:"/docs/cli-reference/ocm_sign/",title:"ocm_sign",description:"ocm sign â€” Sign Components # Synopsis # ocm sign [\u0026lt;options\u0026gt;] \u0026lt;sub command\u0026gt; ... Options # -h, --help help for sign SEE ALSO # Parents # ocm	- Open Component Model command line client Sub Commands # ocm sign componentversions	- Sign component version ",content:"ocm sign â€” Sign Components # Synopsis # ocm sign [\u0026lt;options\u0026gt;] \u0026lt;sub command\u0026gt; ... Options # -h, --help help for sign SEE ALSO # Parents # ocm	- Open Component Model command line client Sub Commands # ocm sign componentversions	- Sign component version "}),e.add({id:94,href:"/docs/cli-reference/ocm_sign_componentversions/",title:"ocm_sign_componentversions",description:"ocm sign componentversions â€” Sign Component Version # Synopsis # ocm sign componentversions [\u0026lt;options\u0026gt;] {\u0026lt;component-reference\u0026gt;} Options # -S, --algorithm string signature handler (default \u0026quot;RSASSA-PKCS1-V1_5\u0026quot;) --ca-cert stringArray Additional root certificates -H, --hash string hash algorithm (default \u0026quot;sha256\u0026quot;) -h, --help help for componentversions -I, --issuer string issuer name -N, --normalization string normalization algorithm (default \u0026quot;jsonNormalisation/v1\u0026quot;) -K, --private-key stringArray private key setting -k, --public-key stringArray public key setting -R, --recursive recursively sign component versions (default true) -r, --repo string repository name or spec -s, --signature stringArray signature name --update update digest in component versions (default true) -V, --verify verify existing digests (default true) Description # Sign specified component versions.",content:`ocm sign componentversions â€” Sign Component Version # Synopsis # ocm sign componentversions [\u0026lt;options\u0026gt;] {\u0026lt;component-reference\u0026gt;} Options # -S, --algorithm string signature handler (default \u0026quot;RSASSA-PKCS1-V1_5\u0026quot;) --ca-cert stringArray Additional root certificates -H, --hash string hash algorithm (default \u0026quot;sha256\u0026quot;) -h, --help help for componentversions -I, --issuer string issuer name -N, --normalization string normalization algorithm (default \u0026quot;jsonNormalisation/v1\u0026quot;) -K, --private-key stringArray private key setting -k, --public-key stringArray public key setting -R, --recursive recursively sign component versions (default true) -r, --repo string repository name or spec -s, --signature stringArray signature name --update update digest in component versions (default true) -V, --verify verify existing digests (default true) Description # Sign specified component versions.
If the \u0026ndash;repo option is specified, the given names are interpreted relative to the specified repository using the syntax
\u0026lt;component\u003e[:\u0026lt;version\u003e] If no \u0026ndash;repo option is specified the given names are interpreted as located OCM component version references:
[\u0026lt;repo type\u003e::]\u0026lt;host\u003e[:\u0026lt;port\u003e][/\u0026lt;base path\u003e]//\u0026lt;component\u003e[:\u0026lt;version\u003e] Additionally there is a variant to denote common transport archives and general repository specifications
[\u0026lt;repo type\u003e::]\u0026lt;filepath\u003e|\u0026lt;spec json\u003e[//\u0026lt;component\u003e[:\u0026lt;version\u003e]] The \u0026ndash;repo option takes an OCM repository specification:
[\u0026lt;repo type\u003e::]\u0026lt;configured name\u003e|\u0026lt;file path\u003e|\u0026lt;spec json\u003e For the Common Transport Format the types directory, tar or tgz is possible.
Using the JSON variant any repository type supported by the linked library can be used:
Dedicated OCM repository types:
ComponentArchive OCI Repository types (using standard component repository to OCI mapping):
ArtefactSet CommonTransportFormat DockerDaemon Empty OCIRegistry oci ociRegistry The \u0026ndash;public-key and \u0026ndash;private-key options can be used to define public and private keys on the command line. The options have an argument of the form [\u0026lt;name\u0026gt;=]\u0026lt;filepath\u0026gt;. The optional name specifies the signature name the key should be used for. By default this is the signature name specified with the option \u0026ndash;signature.
Alternatively a key can be specified as base64 encoded string if the argument start with the prefix ! or as direct string with the prefix =.
If in signing mode a public key is specified, existing signatures for the given signature name will be verified, instead of recreated.
The following signing types are supported with option \u0026ndash;algorithm:
RSASSA-PKCS1-V1_5 (default) rsa-signingsservice The following normalization modes are supported with option \u0026ndash;normalization:
jsonNormalisation/v1 (default) jsonNormalisation/v2 The following hash modes are supported with option \u0026ndash;hash:
NO-DIGEST sha256 (default) sha512 Examples # \$ ocm sign componentversion --signature mandelsoft --private-key=mandelsoft.key ghcr.io/mandelsoft/kubelink SEE ALSO # Parents # ocm sign	- Sign components ocm	- Open Component Model command line client `}),e.add({id:95,href:"/docs/cli-reference/ocm_sources/",title:"ocm_sources",description:"ocm sources â€” Commands Acting On Component Sources # Synopsis # ocm sources [\u0026lt;options\u0026gt;] \u0026lt;sub command\u0026gt; ... Options # -h, --help help for sources SEE ALSO # Parents # ocm	- Open Component Model command line client Sub Commands # ocm sources add	- add source information to a component version ocm sources get	- get sources of a component version ",content:"ocm sources â€” Commands Acting On Component Sources # Synopsis # ocm sources [\u0026lt;options\u0026gt;] \u0026lt;sub command\u0026gt; ... Options # -h, --help help for sources SEE ALSO # Parents # ocm	- Open Component Model command line client Sub Commands # ocm sources add	- add source information to a component version ocm sources get	- get sources of a component version "}),e.add({id:96,href:"/docs/cli-reference/ocm_sources_add/",title:"ocm_sources_add",description:"ocm sources add â€” Add Source Information To A Component Version # Synopsis # ocm sources add [\u0026lt;options\u0026gt;] \u0026lt;target\u0026gt; {\u0026lt;resourcefile\u0026gt; | \u0026lt;var\u0026gt;=\u0026lt;value\u0026gt;} Options # --addenv access environment for templating -h, --help help for add -s, --settings stringArray settings file with variable settings (yaml) --templater string templater to use (subst, spiff, go) (default \u0026quot;subst\u0026quot;) Description # Add source information specified in a resource file to a component version. So far only component archives are supported as target.",content:`ocm sources add â€” Add Source Information To A Component Version # Synopsis # ocm sources add [\u0026lt;options\u0026gt;] \u0026lt;target\u0026gt; {\u0026lt;resourcefile\u0026gt; | \u0026lt;var\u0026gt;=\u0026lt;value\u0026gt;} Options # --addenv access environment for templating -h, --help help for add -s, --settings stringArray settings file with variable settings (yaml) --templater string templater to use (subst, spiff, go) (default \u0026quot;subst\u0026quot;) Description # Add source information specified in a resource file to a component version. So far only component archives are supported as target.
Templating: All yaml/json defined resources can be templated. Variables are specified as regular arguments following the syntax \u0026lt;name\u0026gt;=\u0026lt;value\u0026gt;. Additionally settings can be specified by a yaml file using the \u0026ndash;settings option. With the option \u0026ndash;addenv environment variables are added to the binding. Values are overwritten in the order environment, settings file, commmand line settings.
Note: Variable names are case-sensitive.
Example:
-- MY_VAL=test There are several templaters that can be selected by the \u0026ndash;templater option:
envsubst: simple value substitution with the drone/envsubst templater. It supports string values, only. Complext settings will be json encoded.
key: subkey: "abc \${MY_VAL}" go: go templating supports complex values.
key: subkey: "abc {{.MY_VAL}}" spiff: spiff templating supports complex values. the settings are accessible using the binding values.
key: subkey: "abc (( values.MY_VAL ))" This command accepts (re)source specification files describing the sources to add to a component version.
The resource specification supports the following blob input types, specified with the field type in the input field:
Input type dir
The path must denote a directory relative to the resources file, which is packed with tar and optionally compressed if the compress field is set to true. If the field preserveDir is set to true the directory itself is added to the tar. If the field followSymLinks is set to true, symbolic links are not packed but their targets files or folders. With the list fields includeFiles and excludeFiles it is possible to specify which files should be included or excluded. The values are regular expression used to match relative file paths. If no inlcudes are specified all file not explicitly excluded are used.
This blob type specification supports the following fields:
path string
This REQUIRED property describes the file path to directory relative to the resource file location.
mediaType string
This OPTIONAL property describes the media type to store with the local blob. The default media type is application/x-tar and application/gzip if compression is enabled.
compress bool
This OPTIONAL property describes whether the file content should be stored compressed or not.
preserveDir bool
This OPTIONAL property describes whether the specified directory with its basename should be included as top level folder.
followSymlinks bool
This OPTIONAL property describes whether symbolic links should be followed or included as links.
excludeFiles list of regex
This OPTIONAL property describes regular expressions used to match files that should NOT be included in the tar file. It takes precedence over the include match.
includeFiles list of regex
This OPTIONAL property describes regular expressions used to match files that should be included in the tar file. If this option is not given all files not explicitly excluded are used.
Input type docker
The path must denote an image tag that can be found in the local docker daemon. The denoted image is packed an OCI artefact set.
This blob type specification supports the following fields:
path string
This REQUIRED property describes the image name to import from the local docker daemon.
Input type file
The path must denote a file relative the the resources file. The content is compressed if the compress field is set to true.
This blob type specification supports the following fields:
path string
This REQUIRED property describes the file path to the helm chart relative to the resource file location.
mediaType string
This OPTIONAL property describes the media type to store with the local blob. The default media type is application/octet-stream and application/gzip if compression is enabled.
compress bool
This OPTIONAL property describes whether the file content should be stored compressed or not.
Input type helm
The path must denote an helm chart archive or directory relative to the resources file. The denoted chart is packed as an OCI artefact set. Additional provider info is taken from a file with the same name and the suffix .prov.
If the chart should just be stored as archive, please use the type file or dir.
This blob type specification supports the following fields:
path string
This REQUIRED property describes the file path to the helm chart relative to the resource file location.
version string
This OPTIONAL property can be set to configure an explicit version hint. If not specified the versio from the chart will be used. Basically, it is a good practice to use the component version for local resources This can be achieved by using templating for this attribute in the resource file.
SEE ALSO # Parents # ocm sources	- Commands acting on component sources ocm	- Open Component Model command line client `}),e.add({id:97,href:"/docs/cli-reference/ocm_sources_get/",title:"ocm_sources_get",description:"ocm sources get â€” Get Sources Of A Component Version # Synopsis # ocm sources get [\u0026lt;options\u0026gt;] \u0026lt;component\u0026gt; {\u0026lt;name\u0026gt; { \u0026lt;key\u0026gt;=\u0026lt;value\u0026gt; }} Options # -c, --closure follow component reference nesting -h, --help help for get --lookup string repository name or spec for closure lookup fallback -o, --output string output mode (JSON, json, tree, wide, yaml) -r, --repo string repository name or spec -s, --sort stringArray sort fields Description # Get sources of a component version.",content:`ocm sources get â€” Get Sources Of A Component Version # Synopsis # ocm sources get [\u0026lt;options\u0026gt;] \u0026lt;component\u0026gt; {\u0026lt;name\u0026gt; { \u0026lt;key\u0026gt;=\u0026lt;value\u0026gt; }} Options # -c, --closure follow component reference nesting -h, --help help for get --lookup string repository name or spec for closure lookup fallback -o, --output string output mode (JSON, json, tree, wide, yaml) -r, --repo string repository name or spec -s, --sort stringArray sort fields Description # Get sources of a component version. Sources are specified by identities. An identity consists of a name argument followed by optional \u0026lt;key\u0026gt;=\u0026lt;value\u0026gt; arguments.
If the \u0026ndash;repo option is specified, the given names are interpreted relative to the specified repository using the syntax
\u0026lt;component\u003e[:\u0026lt;version\u003e] If no \u0026ndash;repo option is specified the given names are interpreted as located OCM component version references:
[\u0026lt;repo type\u003e::]\u0026lt;host\u003e[:\u0026lt;port\u003e][/\u0026lt;base path\u003e]//\u0026lt;component\u003e[:\u0026lt;version\u003e] Additionally there is a variant to denote common transport archives and general repository specifications
[\u0026lt;repo type\u003e::]\u0026lt;filepath\u003e|\u0026lt;spec json\u003e[//\u0026lt;component\u003e[:\u0026lt;version\u003e]] The \u0026ndash;repo option takes an OCM repository specification:
[\u0026lt;repo type\u003e::]\u0026lt;configured name\u003e|\u0026lt;file path\u003e|\u0026lt;spec json\u003e For the Common Transport Format the types directory, tar or tgz is possible.
Using the JSON variant any repository type supported by the linked library can be used:
Dedicated OCM repository types:
ComponentArchive OCI Repository types (using standard component repository to OCI mapping):
ArtefactSet CommonTransportFormat DockerDaemon Empty OCIRegistry oci ociRegistry With the option \u0026ndash;closure the complete reference tree of a component reference is traversed.
If a component lookup for building a reference closure is required the \u0026ndash;lookup option can be used to specify a fallback lookup repository. By default the component versions are searched in the repository holding the component version for which the closure is determined. For Component Archives this is never possible, because it only contains a single component version. Therefore, in this scenario this option must always be specified to be able to follow component references.
With the option \u0026ndash;output the output mode can be selected. The following modes are supported:
JSON json tree wide yaml SEE ALSO # Parents # ocm sources	- Commands acting on component sources ocm	- Open Component Model command line client `}),e.add({id:98,href:"/docs/cli-reference/ocm_transfer/",title:"ocm_transfer",description:"ocm transfer â€” Transfer Artefacts Or Components # Synopsis # ocm transfer [\u0026lt;options\u0026gt;] \u0026lt;sub command\u0026gt; ... Options # -h, --help help for transfer SEE ALSO # Parents # ocm	- Open Component Model command line client Sub Commands # ocm transfer artefacts	- transfer OCI artefacts ocm transfer commontransportarchive	- transfer transport archive ocm transfer componentarchive	- transfer component archive to some component repository ocm transfer componentversions	- transfer component version ",content:"ocm transfer â€” Transfer Artefacts Or Components # Synopsis # ocm transfer [\u0026lt;options\u0026gt;] \u0026lt;sub command\u0026gt; ... Options # -h, --help help for transfer SEE ALSO # Parents # ocm	- Open Component Model command line client Sub Commands # ocm transfer artefacts	- transfer OCI artefacts ocm transfer commontransportarchive	- transfer transport archive ocm transfer componentarchive	- transfer component archive to some component repository ocm transfer componentversions	- transfer component version "}),e.add({id:99,href:"/docs/cli-reference/ocm_transfer_artefacts/",title:"ocm_transfer_artefacts",description:"ocm transfer artefacts â€” Transfer OCI Artefacts # Synopsis # ocm transfer artefacts [\u0026lt;options\u0026gt;] {\u0026lt;artefact-reference\u0026gt;} Options # -h, --help help for artefacts -r, --repo string repository name or spec Description # Transfer OCI artefacts from one registry to another one If the repository/registry option is specified, the given names are interpreted relative to the specified registry using the syntax \u0026lt;OCI repository name\u003e[:\u0026lt;tag\u003e][@\u0026lt;digest\u003e] If no \u0026ndash;repo option is specified the given names are interpreted as extended CI artefact references.",content:`ocm transfer artefacts â€” Transfer OCI Artefacts # Synopsis # ocm transfer artefacts [\u0026lt;options\u0026gt;] {\u0026lt;artefact-reference\u0026gt;} Options # -h, --help help for artefacts -r, --repo string repository name or spec Description # Transfer OCI artefacts from one registry to another one
If the repository/registry option is specified, the given names are interpreted relative to the specified registry using the syntax
\u0026lt;OCI repository name\u003e[:\u0026lt;tag\u003e][@\u0026lt;digest\u003e] If no \u0026ndash;repo option is specified the given names are interpreted as extended CI artefact references.
[\u0026lt;repo type\u003e::]\u0026lt;host\u003e[:\u0026lt;port\u003e]/\u0026lt;OCI repository name\u003e[:\u0026lt;tag\u003e][@\u0026lt;digest\u003e] The \u0026ndash;repo option takes a repository/OCI registry specification:
[\u0026lt;repo type\u003e::]\u0026lt;configured name\u003e|\u0026lt;file path\u003e|\u0026lt;spec json\u003e For the Common Transport Format the types directory, tar or tgz are possible.
Using the JSON variant any repository type supported by the linked library can be used:
ArtefactSet CommonTransportFormat DockerDaemon Empty OCIRegistry oci ociRegistry Examples # \$ ocm oci transfer ghcr.io/mandelsoft/kubelink gcr.io SEE ALSO # Parents # ocm transfer	- Transfer artefacts or components ocm	- Open Component Model command line client `}),e.add({id:100,href:"/docs/cli-reference/ocm_transfer_commontransportarchive/",title:"ocm_transfer_commontransportarchive",description:"ocm transfer commontransportarchive â€” Transfer Transport Archive # Synopsis # ocm transfer commontransportarchive [\u0026lt;options\u0026gt;] \u0026lt;ctf\u0026gt; \u0026lt;target\u0026gt; Options # -h, --help help for commontransportarchive -f, --overwrite overwrite existing component versions -V, --resourcesByValue transfer resources by-value --script string config name of transfer handler script -s, --scriptFile string filename of transfer handler script -t, --type string archive format (default \u0026quot;directory\u0026quot;) Description # Transfer content of a Common Transport Archive to the given target repository.",content:`ocm transfer commontransportarchive â€” Transfer Transport Archive # Synopsis # ocm transfer commontransportarchive [\u0026lt;options\u0026gt;] \u0026lt;ctf\u0026gt; \u0026lt;target\u0026gt; Options # -h, --help help for commontransportarchive -f, --overwrite overwrite existing component versions -V, --resourcesByValue transfer resources by-value --script string config name of transfer handler script -s, --scriptFile string filename of transfer handler script -t, --type string archive format (default \u0026quot;directory\u0026quot;) Description # Transfer content of a Common Transport Archive to the given target repository.
The \u0026ndash;type option accepts a file format for the target archive to use. The following formats are supported:
directory tar tgz The default format is directory. It the option \u0026ndash;overwrite is given, component version in the target repository will be overwritten, if they already exist.
It the option \u0026ndash;resourcesByValue is given, all referential resources will potentially be localized, mapped to component version local resources in the target repository. This behaviour can be further influenced by specifying a transfer script with the script option family.
It is possible to use a dedicated transfer script based on spiff. The option \u0026ndash;scriptFile can be used to specify this script by a file name. With \u0026ndash;script it can be taken from the CLI config using an entry of the following format:
type: scripts.ocm.config.ocm.gardener.cloud scripts: \u0026lt;name\u003e: path: \u0026lt;filepath\u003e script: \u0026lt;scriptdata\u003e Only one of the fields path or script can be used.
If no script option is given and the cli config defines a script default this one is used.
Examples # \$ ocm transfer ctf ctf.tgz ghcr.io/mandelsoft/components SEE ALSO # Parents # ocm transfer	- Transfer artefacts or components ocm	- Open Component Model command line client `}),e.add({id:101,href:"/docs/cli-reference/ocm_transfer_componentarchive/",title:"ocm_transfer_componentarchive",description:"ocm transfer componentarchive â€” Transfer Component Archive To Some Component Repository # Synopsis # ocm transfer componentarchive [\u0026lt;options\u0026gt;] \u0026lt;source\u0026gt; \u0026lt;target\u0026gt; Options # -h, --help help for componentarchive -t, --type string archive format (default \u0026quot;directory\u0026quot;) Description # Transfer a component archive to some component repository. This might be a CTF Archive or a regular repository. If the type CTF is specified the target must already exist, if CTF flavor is specified it will be created if it does not exist.",content:`ocm transfer componentarchive â€” Transfer Component Archive To Some Component Repository # Synopsis # ocm transfer componentarchive [\u0026lt;options\u0026gt;] \u0026lt;source\u0026gt; \u0026lt;target\u0026gt; Options # -h, --help help for componentarchive -t, --type string archive format (default \u0026quot;directory\u0026quot;) Description # Transfer a component archive to some component repository. This might be a CTF Archive or a regular repository. If the type CTF is specified the target must already exist, if CTF flavor is specified it will be created if it does not exist.
Besides those explicitly known types a complete repository spec might be configured, either via inline argument or command configuration file and name.
The \u0026ndash;type option accepts a file format for the target archive to use. The following formats are supported:
directory tar tgz The default format is directory. SEE ALSO # Parents # ocm transfer	- Transfer artefacts or components ocm	- Open Component Model command line client `}),e.add({id:102,href:"/docs/cli-reference/ocm_transfer_componentversions/",title:"ocm_transfer_componentversions",description:"ocm transfer componentversions â€” Transfer Component Version # Synopsis # ocm transfer componentversions [\u0026lt;options\u0026gt;] {\u0026lt;component-reference\u0026gt;} \u0026lt;target\u0026gt; Options # -c, --closure follow component reference nesting -h, --help help for componentversions -f, --overwrite overwrite existing component versions -r, --repo string repository name or spec -V, --resourcesByValue transfer resources by-value --script string config name of transfer handler script -s, --scriptFile string filename of transfer handler script -t, --type string archive format (default \u0026quot;directory\u0026quot;) Description # Transfer all component versions specified to the given target repository.",content:`ocm transfer componentversions â€” Transfer Component Version # Synopsis # ocm transfer componentversions [\u0026lt;options\u0026gt;] {\u0026lt;component-reference\u0026gt;} \u0026lt;target\u0026gt; Options # -c, --closure follow component reference nesting -h, --help help for componentversions -f, --overwrite overwrite existing component versions -r, --repo string repository name or spec -V, --resourcesByValue transfer resources by-value --script string config name of transfer handler script -s, --scriptFile string filename of transfer handler script -t, --type string archive format (default \u0026quot;directory\u0026quot;) Description # Transfer all component versions specified to the given target repository. If only a component (instead of a component version) is specified all versions are transferred.
If the \u0026ndash;repo option is specified, the given names are interpreted relative to the specified repository using the syntax
\u0026lt;component\u003e[:\u0026lt;version\u003e] If no \u0026ndash;repo option is specified the given names are interpreted as located OCM component version references:
[\u0026lt;repo type\u003e::]\u0026lt;host\u003e[:\u0026lt;port\u003e][/\u0026lt;base path\u003e]//\u0026lt;component\u003e[:\u0026lt;version\u003e] Additionally there is a variant to denote common transport archives and general repository specifications
[\u0026lt;repo type\u003e::]\u0026lt;filepath\u003e|\u0026lt;spec json\u003e[//\u0026lt;component\u003e[:\u0026lt;version\u003e]] The \u0026ndash;repo option takes an OCM repository specification:
[\u0026lt;repo type\u003e::]\u0026lt;configured name\u003e|\u0026lt;file path\u003e|\u0026lt;spec json\u003e For the Common Transport Format the types directory, tar or tgz is possible.
Using the JSON variant any repository type supported by the linked library can be used:
Dedicated OCM repository types:
ComponentArchive OCI Repository types (using standard component repository to OCI mapping):
ArtefactSet CommonTransportFormat DockerDaemon Empty OCIRegistry oci ociRegistry The \u0026ndash;type option accepts a file format for the target archive to use. The following formats are supported:
directory tar tgz The default format is directory. With the option \u0026ndash;closure the complete reference tree of a component reference is traversed.
It the option \u0026ndash;overwrite is given, component version in the target repository will be overwritten, if they already exist.
It the option \u0026ndash;resourcesByValue is given, all referential resources will potentially be localized, mapped to component version local resources in the target repository. This behaviour can be further influenced by specifying a transfer script with the script option family.
It is possible to use a dedicated transfer script based on spiff. The option \u0026ndash;scriptFile can be used to specify this script by a file name. With \u0026ndash;script it can be taken from the CLI config using an entry of the following format:
type: scripts.ocm.config.ocm.gardener.cloud scripts: \u0026lt;name\u003e: path: \u0026lt;filepath\u003e script: \u0026lt;scriptdata\u003e Only one of the fields path or script can be used.
If no script option is given and the cli config defines a script default this one is used.
Examples # \$ ocm transfer components -t tgz ghcr.io/mandelsoft/kubelink ctf.tgz \$ ocm transfer components -t tgz --repo OCIRegistry:ghcr.io mandelsoft/kubelink ctf.tgz SEE ALSO # Parents # ocm transfer	- Transfer artefacts or components ocm	- Open Component Model command line client `}),e.add({id:103,href:"/docs/cli-reference/ocm_verify/",title:"ocm_verify",description:"ocm verify â€” Verify Component Version Signatures # Synopsis # ocm verify [\u0026lt;options\u0026gt;] \u0026lt;sub command\u0026gt; ... Options # -h, --help help for verify SEE ALSO # Parents # ocm	- Open Component Model command line client Sub Commands # ocm verify componentversions	- Verify signature of component version ",content:"ocm verify â€” Verify Component Version Signatures # Synopsis # ocm verify [\u0026lt;options\u0026gt;] \u0026lt;sub command\u0026gt; ... Options # -h, --help help for verify SEE ALSO # Parents # ocm	- Open Component Model command line client Sub Commands # ocm verify componentversions	- Verify signature of component version "}),e.add({id:104,href:"/docs/cli-reference/ocm_verify_componentversions/",title:"ocm_verify_componentversions",description:`ocm verify componentversions â€” Verify Signature Of Component Version # Synopsis # ocm verify componentversions [\u0026lt;options\u0026gt;] {\u0026lt;component-reference\u0026gt;} Options # --ca-cert stringArray Additional root certificates -h, --help help for componentversions -k, --public-key stringArray public key setting -r, --repo string repository name or spec -s, --signature stringArray signature name -V, --verify verify existing digests Description # Verify signature of specified component versions.
If the \u0026ndash;repo option is specified, the given names are interpreted relative to the specified repository using the syntax`,content:`ocm verify componentversions â€” Verify Signature Of Component Version # Synopsis # ocm verify componentversions [\u0026lt;options\u0026gt;] {\u0026lt;component-reference\u0026gt;} Options # --ca-cert stringArray Additional root certificates -h, --help help for componentversions -k, --public-key stringArray public key setting -r, --repo string repository name or spec -s, --signature stringArray signature name -V, --verify verify existing digests Description # Verify signature of specified component versions.
If the \u0026ndash;repo option is specified, the given names are interpreted relative to the specified repository using the syntax
\u0026lt;component\u003e[:\u0026lt;version\u003e] If no \u0026ndash;repo option is specified the given names are interpreted as located OCM component version references:
[\u0026lt;repo type\u003e::]\u0026lt;host\u003e[:\u0026lt;port\u003e][/\u0026lt;base path\u003e]//\u0026lt;component\u003e[:\u0026lt;version\u003e] Additionally there is a variant to denote common transport archives and general repository specifications
[\u0026lt;repo type\u003e::]\u0026lt;filepath\u003e|\u0026lt;spec json\u003e[//\u0026lt;component\u003e[:\u0026lt;version\u003e]] The \u0026ndash;repo option takes an OCM repository specification:
[\u0026lt;repo type\u003e::]\u0026lt;configured name\u003e|\u0026lt;file path\u003e|\u0026lt;spec json\u003e For the Common Transport Format the types directory, tar or tgz is possible.
Using the JSON variant any repository type supported by the linked library can be used:
Dedicated OCM repository types:
ComponentArchive OCI Repository types (using standard component repository to OCI mapping):
ArtefactSet CommonTransportFormat DockerDaemon Empty OCIRegistry oci ociRegistry The \u0026ndash;public-key and \u0026ndash;private-key options can be used to define public and private keys on the command line. The options have an argument of the form [\u0026lt;name\u0026gt;=]\u0026lt;filepath\u0026gt;. The optional name specifies the signature name the key should be used for. By default this is the signature name specified with the option \u0026ndash;signature.
Alternatively a key can be specified as base64 encoded string if the argument start with the prefix ! or as direct string with the prefix =.
Examples # \$ ocm verify componentversion --signature mandelsoft --public-key=mandelsoft.key ghcr.io/mandelsoft/kubelink SEE ALSO # Parents # ocm verify	- Verify component version signatures ocm	- Open Component Model command line client `}),e.add({id:105,href:"/docs/cli-reference/ocm_version/",title:"ocm_version",description:"ocm version â€” Displays The Version # Synopsis # ocm version [\u0026lt;options\u0026gt;] Options # -h, --help help for version SEE ALSO # Parents # ocm	- Open Component Model command line client ",content:"ocm version â€” Displays The Version # Synopsis # ocm version [\u0026lt;options\u0026gt;] Options # -h, --help help for version SEE ALSO # Parents # ocm	- Open Component Model command line client "}),e.add({id:106,href:"/docs/",title:"Docs",description:"Docs OCM.",content:`Get started # There are two main ways to get started with Doks:
Tutorial # `}),search.addEventListener("input",t,!0);function t(){const s=5;var n=this.value,o=e.search(n,{limit:s,enrich:!0});const t=new Map;for(const e of o.flatMap(e=>e.result)){if(t.has(e.doc.href))continue;t.set(e.doc.href,e.doc)}if(suggestions.innerHTML="",suggestions.classList.remove("d-none"),t.size===0&&n){const e=document.createElement("div");e.innerHTML=`No results for "<strong>${n}</strong>"`,e.classList.add("suggestion__no-results"),suggestions.appendChild(e);return}for(const[r,a]of t){const n=document.createElement("div");suggestions.appendChild(n);const e=document.createElement("a");e.href=r,n.appendChild(e);const o=document.createElement("span");o.textContent=a.title,o.classList.add("suggestion__title"),e.appendChild(o);const i=document.createElement("span");if(i.textContent=a.description,i.classList.add("suggestion__description"),e.appendChild(i),suggestions.appendChild(n),suggestions.childElementCount==s)break}}})()