<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title/><link>https://symmetrical-broccoli-b4446266.pages.github.io/spec/formats/formats/</link><description>Recent content on</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://symmetrical-broccoli-b4446266.pages.github.io/spec/formats/formats/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://symmetrical-broccoli-b4446266.pages.github.io/spec/formats/formats/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://symmetrical-broccoli-b4446266.pages.github.io/spec/formats/formats/</guid><description>2.4.2 Formats # This section defines common standardized specification formats to be used for variations of the extension points of the Open Component Model. There might be any number of incarnations of such extension points.
Repository Specifications # Any repository that can be used to store content according to the Open Component Model MUST be describable by a formal repository specification.
Such a specification is usable by a language binding supporting this kind of specification to gain access to this repository.</description></item><item><title/><link>https://symmetrical-broccoli-b4446266.pages.github.io/spec/formats/normalization_format/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://symmetrical-broccoli-b4446266.pages.github.io/spec/formats/normalization_format/</guid><description>Base Format for Normalization # The OCM component model allows for signing component descriptors. Signing is done using a text based format. Usually component descriptors are stored as yaml files. The signing ensures that a component descriptor has not been tampered with since ist was signed. As yaml is a text based format the signing should be robust against various minor changes not effecting the integrity:
formatting issue (e.g. different indent depth) comments HTML escaping &amp;hellip; Furthermore the OCM supports transportation of artifacts between repositories.</description></item><item><title/><link>https://symmetrical-broccoli-b4446266.pages.github.io/spec/formats/normalization_procedure/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://symmetrical-broccoli-b4446266.pages.github.io/spec/formats/normalization_procedure/</guid><description/></item><item><title/><link>https://symmetrical-broccoli-b4446266.pages.github.io/spec/formats/types/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://symmetrical-broccoli-b4446266.pages.github.io/spec/formats/types/</guid><description>2.4.1 Types # Types are used to type variants for extension points provided by the Open Component Model. It is used to describe the intended dedicated logical or technical interpretation of the described element.
Repository Types
OCM repositories can be described by a repository specification. The repository type determines the field structure of the specification and its technical access procedure.
Access Method Types
Access methods describe dedicated technical ways how to access the blob content of an artifact described by an OCM component descriptor.</description></item></channel></rss>