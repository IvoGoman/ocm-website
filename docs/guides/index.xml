<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Guides on</title><link>https://ocm.software/docs/guides/</link><description>Recent content in Guides on</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Fri, 12 Aug 2022 10:36:48 +0100</lastBuildDate><atom:link href="https://ocm.software/docs/guides/index.xml" rel="self" type="application/rss+xml"/><item><title>Getting Started with OCM</title><link>https://ocm.software/docs/guides/getting-started-with-ocm/</link><pubDate>Mon, 13 Mar 2023 09:38:41 +0100</pubDate><guid>https://ocm.software/docs/guides/getting-started-with-ocm/</guid><description>This chapter walks you through some basic steps to get started with OCM concepts and the OCM CLI.
Prerequisites Create a component version Create a component archive Add a local resource Add an image reference Add an image resource Using a resources file Uploading component versions Bundle composed components All in One Display and Examine component versions List component versions List the resources of a component version Download the resources of a component version Download with download handlers Download an image Download an executable Download a full component version Download OCI Artifacts Transport OCM component versions Sign component versions Signing with certificates Signature Verification Prerequisites # To follow the steps described in this section, you will need:</description></item><item><title>Structuring Software with OCM</title><link>https://ocm.software/docs/guides/structuring-software-with-ocm/</link><pubDate>Fri, 12 Aug 2022 10:36:48 +0100</pubDate><guid>https://ocm.software/docs/guides/structuring-software-with-ocm/</guid><description>Introduction Example Helm Charts Input Specification Building the Common Transport Archive Deploying Software Localization Example Updating Components Introduction # In this specification software products are comprised of logical units called components. A component version consists of a set of technical artifacts, e.g. Docker images, Helm charts, binaries, configuration data etc. Such artifacts are called resources in this specification. Resources are usually built from something, e.g. code in a git repo.</description></item><item><title>Getting Started with Flux &amp; OCM</title><link>https://ocm.software/docs/guides/getting-started-with-ocm-flux/</link><pubDate>Wed, 23 Nov 2022 10:00:00 +0000</pubDate><guid>https://ocm.software/docs/guides/getting-started-with-ocm-flux/</guid><description>Introduction # This tutorial will demonstrate how to get started with the Open Component Model &amp;amp; Flux.
We shall build a component to deliver the podinfo application, which we will then deploy using OCM&amp;rsquo;s Flux integration. Along the way, we&amp;rsquo;ll demonstrate some of the useful features of OCM.
Table of content # Requirements Building the component The shape of things to come Setting up our project Adding resources Inspecting Components Shipping the component Signing Verification Transferring Deploying the component Bootstrapping Flux Deploying the OCM Controller Reconciling Components Consuming Snapshots via Flux Wrapping Up Requirements # OCM command line tool kubectl git gh kind flux Building the component # The shape of things to come # Our component will consist of three resources:</description></item><item><title>Best Practices</title><link>https://ocm.software/docs/guides/best-practices-with-ocm/</link><pubDate>Mon, 13 Mar 2023 12:00:26 +0100</pubDate><guid>https://ocm.software/docs/guides/best-practices-with-ocm/</guid><description>This chapter contains guidelines for common scenarios how to work with the Open Component Model.
Separate between Build and Publish Building multi-arch images Using Makefiles Prerequisites Templating the resources Pipeline integration Static and Dynamic Variable Substitution Debugging: Explain the blobs directory Self-contained transport archives CICD integration Separate between Build and Publish # Typical automated builds have access to the complete internet ecosystem. This involves downloading of content required for a build (e.</description></item></channel></rss>