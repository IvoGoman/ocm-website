<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Guides on</title><link>https://ocm.software/docs/guides/</link><description>Recent content in Guides on</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Fri, 12 Aug 2022 10:36:48 +0100</lastBuildDate><atom:link href="https://ocm.software/docs/guides/index.xml" rel="self" type="application/rss+xml"/><item><title>Structuring Software with OCM</title><link>https://ocm.software/docs/guides/structuring-software-with-ocm/</link><pubDate>Fri, 12 Aug 2022 10:36:48 +0100</pubDate><guid>https://ocm.software/docs/guides/structuring-software-with-ocm/</guid><description>Software products are divided into logical units, which are called components in this specification. For example, a frontend, a backend and some monitoring stack. The software product itself could be seen as a component comprising the other three components.
As a result of the development phase, component versions are created, e.g. when you make a new release of a component.
A component version consists of a set of technical artifacts, e.</description></item><item><title>Getting Started with Flux &amp; OCM</title><link>https://ocm.software/docs/guides/getting-started-with-ocm-flux/</link><pubDate>Wed, 23 Nov 2022 10:00:00 +0000</pubDate><guid>https://ocm.software/docs/guides/getting-started-with-ocm-flux/</guid><description>Introduction # This tutorial will demonstrate how get started with the Open Component Model &amp;amp; Flux.
We shall build a component to deliver the podinfo application, which we will then deploy using OCM&amp;rsquo;s Flux integration. Along the way, we&amp;rsquo;ll demonstrate some of the useful features of OCM.
Table of content # Requirements Building the component The shape of things to come Setting up our project Adding resources Inspecting Components Shipping the component Signing Verification Transferring Deploying the component Bootstrapping Flux Deploying the OCM Controller Reconciling Components Consuming Snapshots via Flux Wrapping Up Requirements # OCM command line tool kubectl git gh kind flux Building the component # The shape of things to come # Our component will consist of three resources:</description></item></channel></rss>