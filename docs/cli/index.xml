<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>cli-reference on</title><link>https://ocm.software/docs/cli/</link><description>Recent content in cli-reference on</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Thu, 04 Apr 2024 14:09:23 +0200</lastBuildDate><atom:link href="https://ocm.software/docs/cli/index.xml" rel="self" type="application/rss+xml"/><item><title>attributes</title><link>https://ocm.software/docs/cli/attributes/</link><pubDate>Thu, 04 Apr 2024 14:09:23 +0200</pubDate><guid>https://ocm.software/docs/cli/attributes/</guid><description>Description # The OCM library supports a set of attributes, which can be used to influence the behaviour of various functions. The CLI also supports setting of those attributes using the config file (see ocm configfile) or by command line options of the main command (see ocm).
The following options are available in the currently used version of the OCM library:
github.com/mandelsoft/logforward: logconfig Logging config structure used for config forwarding</description></item><item><title>configfile</title><link>https://ocm.software/docs/cli/configfile/</link><pubDate>Thu, 04 Apr 2024 14:09:23 +0200</pubDate><guid>https://ocm.software/docs/cli/configfile/</guid><description>Description # The command line client supports configuring by a given configuration file. If existent, by default, the file $HOME/.ocmconfig will be read. Using the option &amp;ndash;config an alternative file can be specified.
The file format is yaml. It uses the same type mechanism used for all kinds of typed specification in the ocm area. The file must have the type of a configuration specification. Instead, the command line client supports a generic configuration specification able to host a list of arbitrary configuration specifications.</description></item><item><title>credential-handling</title><link>https://ocm.software/docs/cli/credential-handling/</link><pubDate>Thu, 04 Apr 2024 14:09:23 +0200</pubDate><guid>https://ocm.software/docs/cli/credential-handling/</guid><description>Description # In contrast to libraries intended for a dedicated technical environment, for example the handling of OCI images in OCI registries, the OCM ecosystem cannot provide a specialized credential management for a decicated environment.
Because of its extensibility working with component versions could require access to any kind of technical system, either for storing the model elements in a storage backend, or for accessing content in any kind of technical storage system.</description></item><item><title>logging</title><link>https://ocm.software/docs/cli/logging/</link><pubDate>Thu, 04 Apr 2024 14:09:23 +0200</pubDate><guid>https://ocm.software/docs/cli/logging/</guid><description>Description # Logging can be configured as part of the ocm config file (ocm configfile) or by command line options of the ocm command. Details about the YAML structure of a logging settings can be found on https://github.com/mandelsoft/logging.
The command line also supports some quick-config options for enabling log levels for dedicated tags and realms or realm prefixes (logging keys).
The following tags are used by the command line tool:</description></item><item><title>oci-references</title><link>https://ocm.software/docs/cli/oci-references/</link><pubDate>Thu, 04 Apr 2024 14:09:23 +0200</pubDate><guid>https://ocm.software/docs/cli/oci-references/</guid><description>Description # The command line client supports a special notation scheme for specifying references to instances of oci like registries. This allows for specifying references to any registry supported by the OCM toolset that can host OCI artifacts. As a subset the regular OCI artifact notation used for docker images are possible:
[+][&amp;lt;type>::][./][&amp;lt;file path>//&amp;lt;repository>[:&amp;lt;tag>][@&amp;lt;digest>] or [&amp;lt;type>::][&amp;lt;json repo spec>//]&amp;lt;repository>[:&amp;lt;tag>][@&amp;lt;digest>] or [&amp;lt;type>::][&amp;lt;scheme>:://]&amp;lt;domain>[:&amp;lt;port>/]&amp;lt;repository>[:&amp;lt;tag>][@&amp;lt;digest>] or &amp;lt;docker library>[:&amp;lt;tag>][@&amp;lt;digest>] or &amp;lt;docker repository>/&amp;lt;docker image>[:&amp;lt;tag>][@&amp;lt;digest>] Besides dedicated artifacts it is also possible to denote registries as a whole:</description></item><item><title>ocm-accessmethods</title><link>https://ocm.software/docs/cli/ocm-accessmethods/</link><pubDate>Thu, 04 Apr 2024 14:09:23 +0200</pubDate><guid>https://ocm.software/docs/cli/ocm-accessmethods/</guid><description>Description # Access methods are used to handle the access to the content of artifacts described in a component version. Therefore, an artifact entry contains an access specification describing the access attributes for the dedicated artifact.
The following list describes the supported access methods, their versions and specification formats. Typically there is special support for the CLI artifact add commands. The access method specification can be put below the access field.</description></item><item><title>ocm-downloadhandlers</title><link>https://ocm.software/docs/cli/ocm-downloadhandlers/</link><pubDate>Thu, 04 Apr 2024 14:09:23 +0200</pubDate><guid>https://ocm.software/docs/cli/ocm-downloadhandlers/</guid><description>Description # A download handler can be used to process resources to be downloaded from on OCM repository. By default, the blobs provided from the access method (see ocm ocm-accessmethods) are used to store the resource content in the local filesystem. Download handlers can be used to tweak this process. They get access to the blob content and decide on their own what to do with it, or how to transform it into files stored in the file system.</description></item><item><title>ocm-labels</title><link>https://ocm.software/docs/cli/add_componentversions/ocm-labels/</link><pubDate>Thu, 04 Apr 2024 14:09:23 +0200</pubDate><guid>https://ocm.software/docs/cli/add_componentversions/ocm-labels/</guid><description>Description # Labels are a set of arbitrary properties, which can be attached to elements of a component version:
a component version itself the provider of a component version resources sources component references The dedicated elements support this by providing a field labels, which is a list of label definitions. Every label definition has several fields:
name string
The name of the label also determines the interpretaion of its value. All labels with a dedicated name must have the same globally unique meaning, enabling a common understanding of label content for tools working of such properties of an element.</description></item><item><title>ocm-labels</title><link>https://ocm.software/docs/cli/ocm-labels/</link><pubDate>Thu, 04 Apr 2024 14:09:23 +0200</pubDate><guid>https://ocm.software/docs/cli/ocm-labels/</guid><description>Description # Labels are a set of arbitrary properties, which can be attached to elements of a component version:
a component version itself the provider of a component version resources sources component references The dedicated elements support this by providing a field labels, which is a list of label definitions. Every label definition has several fields:
name string
The name of the label also determines the interpretaion of its value. All labels with a dedicated name must have the same globally unique meaning, enabling a common understanding of label content for tools working of such properties of an element.</description></item><item><title>ocm-references</title><link>https://ocm.software/docs/cli/ocm-references/</link><pubDate>Thu, 04 Apr 2024 14:09:23 +0200</pubDate><guid>https://ocm.software/docs/cli/ocm-references/</guid><description>Description # The command line client supports a special notation scheme for specifying references to OCM components and repositories. This allows for specifying references to any registry supported by the OCM toolset that can host OCM components:
[+][&amp;lt;type>::][./][&amp;lt;file path>//&amp;lt;component id>[:&amp;lt;version>] or [+][&amp;lt;type>::]&amp;lt;domain>[:&amp;lt;port>][/&amp;lt;repository prefix>]//&amp;lt;component id>[:&amp;lt;version] or [&amp;lt;type>::][&amp;lt;json repo spec>//]&amp;lt;component id>[:&amp;lt;version>] Besides dedicated components it is also possible to denote repositories as a whole:
[+][&amp;lt;type>::][&amp;lt;scheme>:://]&amp;lt;domain>[:&amp;lt;port>][/&amp;lt;repository prefix>] or [+][&amp;lt;type>::]&amp;lt;json repo spec> or [+][&amp;lt;type>::][./]&amp;lt;file path> The optional + is used for file based implementations (Common Transport Format) to indicate the creation of a not yet existing file.</description></item></channel></rss>