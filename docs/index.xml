<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>OCM Documentation on</title><link>https://ocm.software/docs/</link><description>Recent content in OCM Documentation on</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Tue, 06 Oct 2020 08:48:23 +0000</lastBuildDate><atom:link href="https://ocm.software/docs/index.xml" rel="self" type="application/rss+xml"/><item><title>Context</title><link>https://ocm.software/docs/context/</link><pubDate>Fri, 12 Aug 2022 10:37:54 +0100</pubDate><guid>https://ocm.software/docs/context/</guid><description>The definition, structure and management of software in larger enterprises often builds upon tools and processes, which largely originate from former on-premise thinking and monolithic architectures. Development teams responsible for solutions or services have built specific, often point-2-point integrations with CI/CD systems, compliance tools, reporting dashboards or delivery processes in the past. Larger development teams might have even built their own toolsets specifically for their products, including those needed for compliance handling and delivery automation.</description></item><item><title>Scope</title><link>https://ocm.software/docs/scope/</link><pubDate>Fri, 12 Aug 2022 10:37:54 +0100</pubDate><guid>https://ocm.software/docs/scope/</guid><description>Operating software installations/products, both for cloud and on-premises, covers many aspects:
How, when and where are the technical artifacts created? How are technical artifacts stored and accessed? Which technical artifacts are to be deployed? How is the configuration managed? How and when are compliance checks, scanning etc. executed? When are technical artifacts deployed? Where and how are those artifacts deployed? Which other software installations are required and how are they deployed and accessed?</description></item><item><title>Installation</title><link>https://ocm.software/docs/installation/</link><pubDate>Fri, 12 Aug 2022 10:37:58 +0100</pubDate><guid>https://ocm.software/docs/installation/</guid><description>Disclaimer # Currently it is only possible to install the ocm CLI manually, in the future we plan to support the standard distribution methods.
Prerequisites # git make golang Installation Process # Clone the open-component-model/ocm repo:
git clone https://github.com/open-component-model/ocm Enter the repository directory (cd ocm/) and install the cli using make:
make install Verify the installation:
ocm version</description></item><item><title>Contributing</title><link>https://ocm.software/docs/contributing/</link><pubDate>Fri, 12 Aug 2022 10:38:22 +0100</pubDate><guid>https://ocm.software/docs/contributing/</guid><description>Welcome to the OCM community!
Thank you for taking the time to contribute to OCM.
DCO # By contributing to this project you agree to the Developer Certificate of Origin (DCO). This document was created by the Linux Kernel community and is a simple statement that you, as a contributor, have the legal right to make the contribution.
We require all commits to be signed. By signing off with your signature, you certify that you wrote the patch or otherwise have the right to contribute the material by the rules of the DCO:</description></item></channel></rss>